%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: WGAN.pdf
%%Creator: Adobe Acrobat 8.0
%%For: shujliu
%%CreationDate: 2017/4/24, 11:01:36
%%BoundingBox: 0 0 369 225
%%HiResBoundingBox: 0 0 369 225
%%CropBox: 0 0 369 225
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:ModifyDate="2017-04-24T11:01:29+08:00"
   xap:CreateDate="2017-04-24T11:00:25+08:00"
   xap:MetadataDate="2017-04-24T11:01:29+08:00"
   xap:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:b3595f78-ff45-42e2-8f3a-bdaea54192f3"
   xapMM:InstanceID="uuid:b1c26a66-c674-4b7c-83b4-8ae9472422f3"
   pdf:Producer="pdfTeX-1.40.17"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -225 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 225 li
369 225 li
369 0 li
cp
clp
[1 0 0 1 -126 0 ]ct
.797 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
126 9.39899 mo
486 9.39899 li
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: NXMBAA+CMBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NXMBAA+CMBX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX10.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 65 /A put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-56 -250 1164 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 444 453 655 676 686 697] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [47] def
/StdVW [114] def
/StemSnapH [40 47] def
/StemSnapV [114 142] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/one <1C60D8A8C9B7FCB6AF8364FFDD07AFC90369AA09A92DA6A5FA1F27B147
3229121209969E0325A5375000F01DC5F64BC963E21B3BDF52473FC214BF8832
F90F8117074A5E750F6E14FDD52CBC0D988F630FCDBFBC2030259193731FAA03
B616AF4326A94BC10249E1187F35CFC24747F202E1034C> |-
/A <1C60D8A8C9B698731BF9F85600975F13A83539F63330B0908F135EFF0A9B
D14BA9BCA5930AC0AB81009A187E4877D59D4581D6E5B9668FA093F78AF1828D
5F043581278B9E7CBF7EA29E3B527B530EB91C5F00BC840B1C314A99495B7DF7
04B2446433DF0DD24C8F5CBF239D20D024D3AD3F41FDFEC762F7F16313F8A8BD
1A8303FBC8D5171ADA6BD036650789F42170BF64441A80938C4D7057364234C1
F25BE19A697E459048CCE11F831339EFA2D6291E691DD14F6BCD02F377> |-
/g <1C60D8A8C9B7FCB6DFB00D66717576F7B799683D0F5985C2246017DDC428
352C02EA59B62BD175A5C1AEE9FFA12F15BA4161F01FE8694270C56D17F21CBD
B64DA822FA21CEFD4517B854A2279161A8F41C47F6A56223D32DE25F5E52A145
523392C61B5AA8CE6619D515DA7BEA118DB74C0CDAFC9B42271C138086AD4AF8
6E128215E239A8F23CB86490189FD57276D116535974F29A907DAB7D65926210
8F3C18C03350B04DABF45BBCFEB86F3AEAD73B9F89ACA738998FAE3FF103B5F0
EFFE005DBA0729286E6F18D753111A80E89FC0128765F4541A103ECC95836F57
F531C1B154AF803A9E543ABE48C02BD4DD8962F6CE3B5F72A657805CBF6A4953
02FCE4BA01F781156594DA1F54> |-
/h <1C60D8A8C9B673A51B1FAFDF4A0934F148B4958134F93F854CFC723DFE6E
AE2BCC3C2BF20612F2C980F751426650ECAE81F875148C2EE1B2A2AA362164EE
5584A29749346956C204DE9C1315675C78880580AF1D6939506FBF6524304854
6E9B2463DE49DFA8874779BD87731F51A5DF19E5EB0B4393A2E232DCC4693130
2138CFB6FD2EAAEA536B18FED2170DFDDA5534CA1F16D9EDAC85F384F038CE0A
A9F4E46B7B5420601261E54AA3D958BDD2E3CFEE7C> |-
/i <1C60D8A8C9B82D668F2996CAA7E022F21822794935D7711F3DE382799AEF
7B8ECD20EB07B8CC1D217CDE3FD2E6B89CCB66F5DC5B771D2D086483D57D35AF
54084340ABFD23A5FF46CBE37B6627E05786CC2E4F6A35D306ED985645B41C76
F46EBDD85F54DC8145AF108A703E3C38CDF8F85FE05A91450B3A15EF03D800DD
3F35D314E51D696DF05551E1> |-
/l <1C60D8A8C9B82D668F2996CB94A8C3E3C5D197839CC7263AB460C357A208
0560849928F7D694C68055DF1ED9ABA6DC9C2FBB3B2659C08EDD732614DD43BD
DCB7269843C077FC910EA839230C096C5DBA666784CCDF6B319C3129> |-
/m <1C60D8A8C9B5C0293FA32A60504751CF115940051B282BD7997D5695F1BC
E96F7855D0DC94AD1A7DD2DCD8F4C77A838ED095D1BC3FAC0E8FE51C7B522A56
5EBE06ECAA95605DABDBB46FE1FFC98C9705AEAE5A489CA1C36C6E7FD7944C67
2F81F24C38EA9CFD5A1E2FED3642DDF497CAEA36C708200DDD2AF38DBFD31C76
67476253FF3ECFB709BF69DD0C9B00A9E1A845AAC0309079E15BB62D876788F5
7BC7049DFE1BC6AC663F26921C4614D5E74A996C94C4881DF5CD57F12FFE45B6
5F97DDD6B7FA718E59228416C6DB2A718A1823AC4056F5D01DC32D49D9704D86
6298AF1AC1AFAE67FDCD2ECD5E1D7EF0161E41A90D338511F6541420633D5A22
E11FC6F49D676DD0374548D3720D26B060ACC39C0ED3B9BC597217AA699510D9
130418E07512215C62075D1D248E178A7B926F577EC460> |-
/o <1C60D8A8C9B7FCB6A15C803B3B972EE31F5A721ABF9B8490D1BCABFAF507
3D6D0835AA64493F9EC5B8BAE86BFF5C8028599ED438B3807899BF98EB3DF2EE
9BBE5DC52FDB77ACA45EA052A40521B13F529CBBBB8B40F192297C658BE1CF97
9B5618AA4355B6A77C9FC09641> |-
/r <1C60D8A8C9B742B231A082A4758268849BD6EC709285DAF33E4BCFE07B22
2AE9BE4B406BD8CF2C292C41D7CE231185ED94774B167787308BD201FAB64063
55D3AF1FD932D565E33594EE8AC9DEA8819296DEEDE9D4E2162CA77BD5848AA2
E2D78BE8D2D8C59E698C83ED25BE6CBC6758FA04B7EAC721F870445B0A4C8079
352F8732FDC2CF0CC939F5D36D419BCB08CF5E25BE983C508013A4AD28999E49
961D93A474AB9BF830C007D101> |-
/t <1C60D8A8C9B77C8923658EDDAB3B0110E0541AEF79029562B8F178ABD52D
36DA68182027DAF6D07A3838148E762E0F79FC3EAF643BD5C14A5690D369D37F
A996225662FD8E1444B10508C52C7462B00BE860EBBCF47380> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMR+CMBX10 /NXMBAA+CMBX10 findfont ct_VMDictPut
/OMJEMR+CMBX10*1 
[49{/.notdef}rp /one 15{/.notdef}rp /A 37{/.notdef}rp /g /h /i 
2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef 
/t 139{/.notdef}rp]
OMJEMR+CMBX10 nf
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
126 18.708 mo
(Algorithm1)
[8.66148 3.18202 5.72847 5.72847 4.71831 3.18202 4.45532 6.36511 13.2134 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: FFZAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FFZAAA+CMR10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 61 /equal put
dup 65 /A put
dup 71 /G put
dup 78 /N put
dup 87 /W put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
31 dict dup begin
/comma <1C60D8A8C9B85744148CA332B8493D4AA74EC0ED15A645BB097A03BC
B0F035B963033C1DF7BD2D48E65E6103A6E43630254BF33A6D7E1B7340BEC933
4288A8D805FE5AD1AC9173E2E18AD17AD4AEC5661EEF946D3EA40FA8C5> |-
/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D
239BCB61DC78D83A8F223F832> |-
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
25DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668
D97ECF27E58978E82B8932F2635747B0D240AA> |-
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065FCDD01CF53F5
4AF89DAF22339F0A467CEB54960C4097888AD7CBC676C4076733D124E7B4C79B
6D0E020E27E56B7A34848B450E2A23F2DF3103BCB5E75D289FAF3FD67A12C99B
2EB0A8390A7DAB0DD8B7BFBE34B66044D4D46D3CB580B3DAECD8E50CD2549B45
50A6A6B131A61C4> |-
/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13
CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9
B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA25
7DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CB
F9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB7
7472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393
F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD
601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-
/six <1C60D8A8C9B7A73D3B2B97FE394CF5175EFEC06CD8F59A375E41591273
E0C059123310EC79AE072F532A0C9DF11EDCF7D4B9D83F0A2FCBB058CCF95C0F
F8BAD8605C0C2E8D60E28BE3D0E0DD42D8AAC3094E7159CC3989179C22CC5AA3
B3825C4ED9C5A83B733BA4666CE2A2B0097F22D25C776953D494478010B9DD2B
5DC520FCB2B0B7183A59B91F9C6B76BCB8A8CE135881FEEEB2BD853CC29FB7FD
F436E095CF25C0CF3D1030E991D37D2BB2A05DD251695665BEB980DCF70EB0EF
ACB10E78F2D22C879E92110E4963EE6051EA84F4D334> |-
/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E59
93F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5
497F9A03CF7F30718A4F8E51FE4C555962B834> |-
/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF09EF454D03FB6CE0741
835DFEA276F2BD9DA1E567C1E2AA272C9AF9AA6DE082183B6B069F122C69C93C
C84C1E2E5C1EDB186833D9A28F18458A45AD6A7572F00011ECC2E09341FD6937
B43E501C94208386B52881CD9F0C7EE85FC76CF7DFA415F22DB3B2B926D06F49
5CDDAB596E2F022F9C4F3C3961AB08783D379F9901790C33B26D5144056789A9
5EB7D120F2CBD25F8C89DDE84F37EAAE2D7C9D8E52E449BEC2C204B273340CAA
6C0D416A62DDFF217CC15AC6F8> |-
/G <1C60D8A8C9B6C5CA50BA1A66B0ED58C9A27CC1684A535A4AAE923AA86946
9B9FB1E98E8E911A6B68D071D9A9C53B9EA692748987A65C86386EDBF1DC70F6
4BF40FA829872071155D2EEF287FA3F412065012D7ECC6A66BEC3F9115F8F2B7
44B6FDCED55D0AA61445F9E82DBD8E663727CBB905C20DD0B57EE3C58C71FBD2
61064D2534E005C7403CDFF8F45F8CA19540B5E742E2C392DF93DEF0F5DEAFD7
7D3EE1270EBF8C86EDAFD0C899763930BDAF6E95FB83A7C6FF21F91FB9F4114A
C07B82F3A2368EBE8C4CF6B8F681F436D5496509EB99DE62F2C39298D13A5FC8
117BF4675C81CBB48E290A6FB33819> |-
/N <1C60D8A8C9B6E3FA234780EB1A04772A480C0BA74E47A01736C3330B79F9
4973DD24567A876D5331B1C1E5BDF74D24451B47112EB46B9EF65275AA4A1B84
3B86074DC79A6CD0050A641BBD3D76F6A280A01B662CF540DC44B0244BA42328
D0C0AD1033AC62F401A3DED6A2DEA6245CB4859932AF05637597C673C1E4554E
6D1A85B9A271FFDD6802EE1900EEE3BF3FB1C692903A5561AF31F20EADA5B95C
F7CED21BCF0DCD198120A75B66796A207B4ED846B6C8BCEB6AFE688E2BBAFBC7
E620BB69A3B9327CE86F09F7F62A63> |-
/W <1C60D8A8C9B505563364AC8BE8AB65E15C6C08AD458A3C49B32AF7A6889C
E67A7C3A7AE930FDF331D78AF6B2774B2E2F9165802F51899041EFBD3924C43E
D76A472FF8E62DD42BB26872119346C8E5FAE87DF4A5B6404CEC1023A1889FE1
14BA5E56D8DAB21B203F5E6D874C0E17030C65A10469C5F86A53A7D1CFDBCD0E
6B94604F94EF6BECF776BD9FD84BFC7AF2D1AA08788921B6CE8FD734B2E9372A
CA3C7D976E4DF8C6EED1CE088EB43DC42B2D6388D9B8E9E4C6FA2D7E84106976
063DE8EEDEDD5065F70DF6158531A23BF77B8F77A74E19614095CB2049840CA4
D0D45F1041ABD9861325F1156E78D91D6A706606395E26954346A8584D3C7D06
B32B91751B6AC28A5309BAC9B774A4A1514E73B9AA13764701722D129040EC> |-
/a <1C60D8A8C9B7A73DCB03313BCF7AD8C8EE234E5372D46A65E92A78F4B7E0
2ECC58F71EE6C027AD4D56C5E4DE1AF1031295DC17C0E7AC8D8358634F9A19B0
2A110E5539C10136C68E0D2CBEA6658A501D9D73323861F8C29EB92F9080ACC3
E236C5F14389534682EC2925F59CD4A215569A7BD7B9F7827A30BA75EB840535
B2A2C8F92AD166CE93D277314A4C690C47DB847F73BFE1049631CDDB9124FD76
2753AA8DB187C216ED3005CA929015114EA53826E55872B63FD1FA60DB9883C7
27F137C754792AB823A705DD0DF28293037E1DA5DE4936C6573A1718CA671378
3EC51D8DA977> |-
/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515E
B70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D5
5EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F
90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768
FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBA
BF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C183
99A9D9> |-
/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF
8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA
61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F
0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4D
A2371542253C2A1E1B028917A1E5> |-
/f <1C60D8A8C9B83BB81FA130945C39F84E5B6E4A6C9F65F126BAA27979D5DD
24D841AF174619487B50FE2700B1E5283B920CF0C36EBD127A2FB193DC3CC442
CA2E2038702792712AC88F8A95F0FA297EC3B143EBC57B59693CDD3FD2B58E1A
0E615D44B1BC286B802CB88D50954B5E67313CC26D2733BD799245E69ACF97F2
A9BABCDB06A9D69EA77A4D41E95E2A8D3382998D0B0648C54FDA3BC85D30> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
63CFC67672A34CC74B0AEAADF24229DF1CCAA1488AE3E348FE2ACD572EA487EC
9D77FBB0710AB421B03DD5B8AE5519B5C269E9648E819E7ECE806EEF16A6618D
07D9AAB350E57F26F5259E8FCF9E5C2D96BBEAD16502F9E7819E854042DDB2BC
674C39681CC2E5224219582BC7B59BBAEF869C9DF91CA7770A97BAD53C3C3A99
175BA8F0A5744B5969D3BC15831A95918F7C707E41F5D87B8DB2D57378BC9C29
7DAE69E4BF438246E63F565B22D86CBE28DEF748262FB9FF82A88935451D6280
A28F1AD964E6E476D5779321E42D3A86BE41122F1BED36C3DC47E1E01C225345
98D0431873197ABE1C8EC03B4011E4B26D249635BDBABB8E5B69BE07AFA65F88
EAF6> |-
/h <1C60D8A8C9B790A83D946A52D133532E9DDB252C41638FA043533341FF45
F4E0EEA3BF171DE971DA044D93815FABEAC6A961DE24CD8980B97FCA250A2CD3
DBC1C9175E22BC18E41FEAAE3FDFFC1EC461872FCD8D617F792306109E6C32D9
EEF5544F9D280B7D28E77406A0CD8B488898A862DE88999A354709E3D3907517
0B03FDE60F1E3F7008331FFBCAD1B838829FBE76742914B50EBA96CF0A9BFB36
10334BBAB609B960E9922A4587A5710F25CDF35D8C915B99DCE5DB414BDFAE70
7D88DDA35DD290F04B> |-
/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444
C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB
5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B56
17CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4F
B895EE90259DCAEBCEFB9765574F> |-
/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADF
B78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CF
F61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D3
2A> |-
/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A0865738F60F138
94266612CF652F44C217A476812BE532AC6358E0DAFFB0D5E5117642F5BA2923
BEDB1C7E5DCDCA6F9C7FD13A241FE9CAACF60BAB1EA0492936F6C6CF04C43B9A
FAC5B2026A794CD9C7836D055F7A78383659A460B574C21AA89D092E6B58E9A3
1CB4E83AFE695EB2A4193C039EA5F618CAF7745B1FDA9ADBC0C4AFF43C821C25
38E4D3E0311619B8D0096703429D61227134D3D4F10264801F2AA4B0A71E8991
4A580FDC8088D541BDE06B262C3D90AF19EF55DBE228CA71D5828F50534BACCE
F423C267E1995B8408ADC61022455B144160D98EB158310C4459DDC5A63157F9
82CF307D29294A260DA3997052E3598EEBA826650D8D48FE852C19EC9306D477
60211C4650B51CCF133ADCA8B28F2087D2999D418C5739327F2B40FD7891074F
BE2A054E78BE9D42> |-
/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624A
AEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC67
6C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA8
4C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3
970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF
6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032
D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83
C3181BD7505792D4855E> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B790A84D73DFE4D381CFD68735E4475645A4E53BCF7DB579C1
AFDD13D1A6F15CA06B47ED1C3E1B244798306364BC5CABD6DA63519493A5C659
BC60B5447F0104F114BE694DF580105735E360631FEECD6EC7A012CC85171828
1D07B0CC157A8E7B5931B7103AE94662442B62C7C336402079CFF632ADA590C0
779C308A1FCAF94180306BE01E5D89C2BD042F11A347AFB582199E7E84F8C797
ABEE0EDBB75C6E1AC5F4E76437DB6ED4E096E1BDAADA422AEEAC70BB94A61E61
EC7C901D077227549E6F61C4273BAEF20A141FBE8FA9A551273E39D70B> |-
/r <1C60D8A8C9B734780FC88FD3B21DF573DE0BD8E19ECF409327C58E3627DF
4B64D82C290E296AD12D16F3BDD53C90C5D592551EDF5E8C7E8FE6B97498610F
068FB40EF014C6896F922B40CC34CEEEFE16781389974FD1D8010C3A1B93DA94
23D6C4280D86498AD092998E974DDACA1FA3CA4F3751905AC346A3F69D468219
4D3342733C7CF3000C654F8E9DE159A2316F10B36E49A0996D15FEF4DE5D8433
2102ECD35D818CF4C1F221D14DB48C0FB5BD30A2> |-
/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6EC
B30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E8
97F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56
CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C8
47773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC89
18AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1
B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-
/t <1C60D8A8C9B737EC5C828C415A21EF65A8DCE4AB75C4F804FD2F74AAED03
32CF1075799E326C4CB510197DA3A668B8EFF3F2CAC89EFC9F1E24EFCBB6E4F7
D58562BB90C45FF297D6656314FD65E690525FFF895AC8C24B58CDA801> |-
/u <1C60D8A8C9B790A8362C570CFB2800E8CBF5A206A67F17BAAE343254C03E
958F83CB5A12ADFA8B4412150589560DDE9B70784A29B02FB60C9645231D13A9
78308E5EE53984B78C9AC2AA2F0EE5269299E66EC0A2F6D2FC9C7C56146B4A2D
450F3E529F72E7D7FD96107695E2148A6B3CC77B93CD510A44599C53106E6043
B1ADA6520148DE> |-
/v <1C60D8A8C9B78C669403575833C8C1B14674B390D764957989B7FCA39046
F88EAC215F3348F64657FA41BBBD2D5465C3FAEC5C4992D77A70D6D0FF5B9FE8
4D58B8A01F974B26A648270BCBC3DA08E1FB6DCB4BD59931217BAC36EE05C15D
6C9332DAEE553F44B623DA84A3E35E45703CEA683F59CB5D7DC58019327FAA46
90D7E0848C4054F367D2C3BF6371C99CA6751F50C10017AA2754321B985E8B60
B10B9F082539BC1A53136644081D5FD9AE168FC766A25A8946C2> |-
/x <1C60D8A8C9B78C669F28CFA812DED67DCEB62F17AD12F7D7900E6AD3161B
3BB6A9E88D307B5F8CC0D753B8AC565B099CC0ACAA4A7CA31F2811E297F44D0D
EB72F7C315759FD2E63382EDE3061A24E5309BEE98D8290B6BC9B628BEBD7F7D
73F1B5EA640583D87E4AD24CB7F7908FD9A3DC9303785637F3B203908DF84330
922688D7A03D094D4EF700DA6BD8427088868109E238A57C22F5759A9FC99E5C
3C3F2D6B15D44C534041C741DF56BEDC796180345856EA6BBC1BD98F587E9295
32F631C96BE91F404EF68AE1203A5AD95C9FFBED9A1E5A7A1275795AE7884699
0825436FB611A109B66853254DCAC13E4C6298C531E7AEB98A1184600057B10A
9DAB09484AF36A38858BAF4BD8E53752011A5652B9FACEB6B61F17736A8E4776
835DFBDE552410043F2D535B01DBC3DAA1EA0A782CE3B35114AE12> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMS+CMR10 /FFZAAA+CMR10 findfont ct_VMDictPut
/OMJEMS+CMR10*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one 2{/.notdef}rp 
/four /five /six 6{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp 
/G 6{/.notdef}rp /N 8{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp 
/d /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /.notdef /x 135{/.notdef}rp]
OMJEMS+CMR10 nf
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
190.629 18.708 mo
(WGAN,ourproposedalgorithm.Allexperimentsinthepaperused)
[9.96062 7.81764 7.47195 7.47195 5.95566 4.98129 5.53525 7.09032 5.53525 3.90227 4.98132 5.81421 
4.98126 3.9292 4.42737 8.72327 4.98129 2.76764 4.98129 4.98129 3.90228 2.76764 3.87445 5.5253 
8.31177 7.1412 7.47195 2.76764 5.95563 4.42737 5.25827 5.81421 4.42734 3.90228 2.76764 8.30182 
4.42734 5.25632 3.87445 7.11722 2.76761 8.7233 3.87445 5.53525 7.61539 5.53525 4.98129 5.81421 
4.42734 7.09033 5.53525 3.9292 4.42734 0 ]xsh
126 30.663 mo
(thedefaultvalues)
[3.87447 5.53525 7.74489 5.53525 4.42735 3.0446 4.98131 5.53525 2.76762 7.20197 4.70038 4.98129 
2.76764 5.53525 4.42734 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: OQOAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OQOAAA+CMMI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 58 /period put
dup 99 /c put
dup 109 /m put
dup 110 /n put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/alpha <1C60D8A8C9B672D45BFC23B1BF800E1ACB05E50B7910064DAAF33F1C
226D8694134CDF4422A74CFB0592F5B407157F4CE5A72BC40A799BF41A6B6127
F948FBCA3A02695044FAC83587055BCAB446C188F87D7462818B08346941C748
D0E7B89356AC4EB22916C99341BBD9BEA8B19DAD1FB3C37A90E7A06F628D038F
5E0B79DD787FBCDAD342C4FEA11A5E58675C86F194DA558E866305D8F9BEC493
31CD33BBD3B022378B81A0B00267BC> |-
/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D
239BCB61DC78D83A8F223F832> |-
/c <1C60D8A8C9B76BC2DCFCFADA1B88FA716258F5F9D1103004934E5136D5B2
F536E49552ED71C4264BEBD571AA34E07B2E10C5167B1C00FE390786EDC9D41B
E313C189C9D7DC3FB75AF15174021A1F865304F3405D0916E21023E63DDE15C9
0E4C0E0252C9262F4EEEFDA44397E14FE0E739E1B68DE75FFF816AE9CE6F7E46
0A0C> |-
/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE
1078F4F9FDB6B815479F3F8E4C08C2277611060995694159FCC2D78EC50D6606
F47BAC8A1398DC80C5E684AC883370A5C0C368E90D6EC6CE9F28F4FF49EB4CD9
003CC7F16FD0A458554531F31DF07949099D9F289F893C6C0EA6573FB2150C2F
087255EF81A7EEB3F17E2AAA817353178C1356798885D696ECA769BAF77B7767
3C710522BBDF0D2C2EE2D19E2E6FF3F81BFD0244B25EB4D4D7D82E1EC8E49E10
740271118963D0C05218ACE6C68295346EB12E8E166BADE2CEAD64A82CCCD612
7BF1A62C2509EE150842123EC00626CE2680D411C5A10661C74C5C04837F5760
E283E665B33789D5E578DC0371410F32760EB96A60355BA38A71507B81967F12
8B5C> |-
/n <1C60D8A8C9B7C3C99592073C380D5EB33972B0E7A1F7696CFD3BFCDBA36E
74B12788DB1F09B52B587438F5C7126CC3F9331B76B411552DAD88FF5B2731FB
8A30D4039054DE7881FD1040B3AAA0067A7F268759C5B8FE71C6C640E6CFCCBE
79D4AF27DC6E5B0A2255251E501D4B4B538B55ED267C22906901AB7EEDA3069D
F42F6AF99C860F98E5A2449D9A147D2C1F90CFD8CE9D17F947C6867C8C175E34
1343B07E6C856BED2AB83F9AF1F2FB39E3C5A2A0DC4339E7026D740FBCF79669
7562554331A7ACC4FBF70E9430AC085F22816D98AA26> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMT+CMMI10 /OQOAAA+CMMI10 findfont ct_VMDictPut
/OMJEMT+CMMI10*1 
[11{/.notdef}rp /alpha 46{/.notdef}rp /period 40{/.notdef}rp /c 9{/.notdef}rp /m 
/n 145{/.notdef}rp]
OMJEMT+CMMI10 nf
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
206.31 30.663 mo
(\013)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
215.487 30.663 mo
(=0)
[10.5185 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
230.985 30.663 mo
(:)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
233.752 30.663 mo
(00005,)
[4.98129 4.98131 4.98129 4.98131 4.98131 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.747 30.663 mo
(c)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
271.826 30.663 mo
(=0)
[10.5185 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.323 30.663 mo
(:)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.091 30.663 mo
(01,)
[4.98129 4.98129 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
306.142 30.663 mo
(m)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
317.656 30.663 mo
(=64,)
[10.5185 4.98129 4.98132 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
344.223 30.663 mo
(n)sh
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ZLQBAA+CMR7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 99 /c put
dup 105 /i put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/c <1C60D8A8C9B7A08673B8E4C5B14BD48970D0EE082DD9F74461A1644063F4
6A1BDDC468A2759E55DE0A45896BCBF87F2CE943D2A4CF47C6D69253E3B31D7B
B9BC38C8241DFF3E913888D15533793A3F561A24F93CE802A150D412CA4272CF
F8092A652E0FBC7BCFD4DCDAD29449F8B161FF182434> |-
/i <1C60D8A8C9B8293C37F948139681853393BE65FD626D907BDAAC93C0277D
A058E112BCC918DFCAA69BF7C87C4632F5761E057ADE0088C71CF80098CFA0EB
C7C600AF27A34977A9A3B24BBEBD2124C909A44DD0C4DA6BB0D39514D312DC78
B3AD1A066A21AB180CC4F258EFEB95FD55CDC3B803BB17CB1D2FC7B8E9441B> |-
/r <1C60D8A8C9B77D5FE837D21A9F5B0D0FA38A879D356DB24842EE46B3547F
DEFDD958CFB4CC00C7EF5F857A124A22B6D69BA60C57E1A97651EDE8BC3B5248
290895465C8C07E44BF8CFEB9744550F7B3DE2AE1CB5D77A2677C41D2688AE12
11DAC509F7C18C7DDA15AF1EA2CAD4BFAC346778220914A25EA280EE44AFF85B
7E498212D8490BD198B4D114D1> |-
/t <1C60D8A8C9B77D5FE26A5467FC865D4E3D414F11170BA9D8CE367EDA267A
13B60897D15EE92DB138DA42AAC8717C4F656BDA31D5CE5829E80C5785EE880A
F87B0279DEEE86DAE914DA698DACD1EAA1ABE145473A2B37F2F7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMU+CMR7 /ZLQBAA+CMR7 findfont ct_VMDictPut
/OMJEMU+CMR7*1 
[99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 
139{/.notdef}rp]
OMJEMU+CMR7 nf
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
350.203 32.158 mo
(critic)
[3.54202 3.11307 2.25531 3.11307 2.25528 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
371.291 30.663 mo
(=5.)
[10.5185 4.98129 0 ]xsh
.398 lw
126 34.792 mo
486 34.792 li
@
true set_gvm
%ADOBeginSubsetFont: NXMBAA+CMBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMR+CMBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B82D668F641ACDA148B3921DAF6A2E1038DD803DC03263
797C05955C79894BA1FC47CEDA52BB2056131CF18BEAD8A2823089FAD252008A
BBF2AD54D44CBC2E083F6C7D> |-
/R <1C60D8A8C9B693781FEBCDFF5ED2919069429E3DEB93CE4F58A335BE5294
752BA8C9D4DC822074B05A1861A6F0F5273C625D93E9A037163E1CE2746B9234
10827239642FAB4D26375FB8632CCD79CD2ACCA5B4D4169D7507E026F89728A8
BE6C21F862F5E0E7A74BE7667A789365DE989692114971C14210DF072CF09E9B
4A379342F58B9EC16B2C3FC95599AC71D01D2BCE56B0D6DCC6E93478FE3BC82D
F4D04797E5735003E57E74C4A51EE80AB1AE242E8B8862152E0EFE647F6C42B9
80C15677A8C9534A5F2D5E9E116789FE52E822841D4B3C5DD88FDE8AA4970C0A
3CA324E0543B3313C6DBE2D27B05B9A8BF3D5117B5B929> |-
/d <1C60D8A8C9B673A51B1FAFDF4A0934F148B495C75352DF10517E5042E84C
972B1B926F406688D0B58FC4EFCF7045AF6AB1A996B63AA66D32B0A4044FF5BC
4B0AC24257FF8D2F15BF53121827CDCF0A17E104F07D4736081658FA8E4F57CC
A850D96D4B44F24DB2A6AFDDDF0465D64093B69CB170EAD8B8C9F93A30D2BE40
E616C7B43E7AC364D8980967EA944C3164580C01FBBA3DADDF58DFC860FBA578
293CFF129D9B953CC5236E20D918DD9F27F0D44E> |-
/e <1C60D8A8C9B78C66918B31B94BCF5DDEA33C1DBCF364315F9CC3DA5E835C
6010F243D5EB967D0C4D13336A2043912832029423247942DAB4B949A8E8436A
8C2E68669B9DE7A0BC04C336DC773E9C6E25DA9AC60925FD29E3AE56555B411A
2334FA15C6D35FF52079D3707213F853A15FC1AE1741F525A5919F53362E4F> |-
/f <1C60D8A8C9B80D901E8EF2AA0122C65649C03688BEDC3BEFDC87A256F368
98E8C094807A577B24052F7D7541973C6B44CD92B01407D7EF6B39A626FBF8D0
FDDCCF20AE4DF83AE59DBED0302572733EB3EF98AAD027D0F156154E7614F61D
0EDC1F221E569CF2E15F304CA6446C37327114CA5FCE825BD42BABF6D7589DC2
B6756E9A47A66BC55EE4E884F0954D7B81A4C1AC86F0> |-
/q <1C60D8A8C9B7DDB68A5F108E9774F661533260D784429C66E9551FD9EF8B
CDFC2CA85870A23B50039E82BDD34D6B265FDE3A68F4BE24D141599CD35C1E0C
A13EA8BC1F29CEEE8DA71A7AA3A71C40571540D4473C362FF8B0407FA44B63B8
4336D3EDD380961ABAD3A8B70C35CE8241EFC08FEA7D9BF4BA359DBDBFE13934
CFFAB254773DDEE8AA8A8FA111BA7EF8DEFC433769DE4CFCDD3574C97566ABD3
EEE032B7AAA1FE2EC49CDDEB4FFDC25DAEB0544B> |-
/u <1C60D8A8C9B673A5150E5B4673A2F8509C6053BF9EB5BCE99B02E9171DD6
5E63288C852B7282AD4F0BC688E5C46BA28E1539C627DA912D5BB103F4052D94
7A58A6EA4F336588B9D3885A70AB63AFB60C65689004EF12E5D84042B20309C0
3C80A352A88975805A6783E567D46FE9252E5FD527121A7203C607012561A594
064D6ED3147861FB65C0855D> |-
/w <1C60D8A8C9B6B34E84A397C9BCA4391AC5147442761D6CF33E59379B1C83
3DD15FB0AF3B39E9461E571D28111A704132E071F9E81B5E5D9DA769FE4DEBED
A1F9DD5E60C34661D10CEE0832FD32A7E04E5D175A0AB78469DAF60FE52CB6B9
E0349B6288FBFBCEC72E4BA4D8BE4E2F5028DDF7AC013F2CE8F4EC66135BF536
9A82906EABAEAE9FAE06B9BA5B4C334C4B8C7F2BDABEB3A19402CA75A298D59F
C82685DA62A68AD0F9E98F6D335DA11DD721F46977F9E4058CD1B759DA408CE3
EEA550BE04A69C419B3BB33A2A1289A728AE07928241A1C54B1C14ECFE2702A8
BB4C5C1495207E71F2B155C92460CA185462997AB3C1F6D2C596541FB763F776
782144D34B37AD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMR+CMBX10 /Encoding get
dup 58 /colon put
dup 82 /R put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 113 /q put
dup 117 /u put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMR+CMBX10*1 
[49{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A 16{/.notdef}rp /R 
17{/.notdef}rp /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /.notdef /o /.notdef /q /r /.notdef 
/t /u /.notdef /w 136{/.notdef}rp]
OMJEMR+CMBX10 nf
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
126 45.895 mo
(Require:)
[8.59277 5.25128 6.04633 6.36511 3.18204 4.71831 5.25128 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: FFZAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B85744175BF073046ADDEE6907895482D01ECF35D
E54BEA4FEC28048235934F2907084DF4FC87697B01D8F3E2719D21D88EF7B5C5
9D144E7C3DE232ABF1C786F3922BB096712FF3F317AEE6D0C9853CEE8DC70F07
4D9A7F3EB33> |-
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164
F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02
A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598
A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A
0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF397
16A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB9
9C4AAA689F9E967FCE15709E3204C4D> |-
/colon <1C60D8A8C9B8574464AEAFAC7C68900D93273DA49162F3A5B8C16D30
B96C6FD4E30E80E1F78558AD2540B994A3F8C4499D90D9C7B92969D703EA7177
FFCAE7C73BA4F83773> |-
/S <1C60D8A8C9B790A8C3E1550ACC8DA9C9FBD3A5CF2194CD2B8642D81A716B
D00E790683F96881FACDE1F9315D62E9690B60701D527468B87CDFB0F4764C55
97556AE6A1AC77EAC949F9287197658BC350D110E467DE690E505B49A0B78B79
E2357C1B06B49C46DBCFC093C8FD052BE36FB8FD34081A4086AA2F339D541A84
930A281511E0A17B9869F6AA55371F1C0D54B13DC306CE1AA830A9CC533AF6BD
85406DAA830F9B2385417AD4B282844721D0D07F3AC31F2E4FAB062DE1D98E9B
B1ADDC8425AA1837400BB1FE64042CEA44886B96F0827BA19AA957D2008F38EA
9B013399E5BDAC4F2A> |-
/b <1C60D8A8C9B790A83D9E7A6001AC854EF8B943E743E91B99DA29586301CD
D5839823233D99B1C577C1F4DFF0EA0F32BC2086F2707A7DD20AF9B67CEAF2A8
142C0184903C062BCDA3F619B0D53D20F97863BA7527C41ABC984D83E7927537
7BA320AFBB48F48B2D10088BC89EBB9C01D05CB682732B7056131A0BF4F223A4
5FB196C15FF8C20088CC8B4C909F5F0D72D1839A24540D889C90DD68E933DDAD
60B1B6BFBEF9B96EA41D08123BC10ECBE3BFA295FF397E499C14DA43850D7296
20> |-
/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDB
F65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD
53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026
EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D867
51973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-
/z <1C60D8A8C9B77FE2B22E0F07D895063A6CBFC8958E5265B47997FDB44410
EF82082C1184649626F6371AF344118760364B6EC30D2E25540C9A8EEA16C343
FAC809855F7DAEF0E07CA7BC51F510A8186DD54C20ED97C04F0C8551F34EFD11
87F6F14F39> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMS+CMR10 /Encoding get
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 58 /colon put
dup 83 /S put
dup 98 /b put
dup 99 /c put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMS+CMR10*1 
[39{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 
/.notdef /zero /one 2{/.notdef}rp /four /five /six 3{/.notdef}rp 
/colon 2{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp 
/N 4{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a /b 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /.notdef /x /.notdef /z 133{/.notdef}rp]
OMJEMS+CMR10 nf
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.571 45.895 mo
(:)sh
true set_gvm
%ADOBeginSubsetFont: OQOAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMT+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/theta <1C60D8A8C9B746F4DC1E814AE1FC30B39928A17E3C3CA63C78CAE909
39580A87811D4F36992BA7EE8729C7E86E3E048DEBCB2FA4242AFA83E0265924
6909FFFE82876ACA5BD9AAB211D4C866C3763FACC5DB3E2AF016825C3916AE2D
AD90E628D66A138E6FBAEC394BDEA529A399D8DB19FD1B19D6102A0762E17B5F> |-
/comma <1C60D8A8C9B85744148CA332C8F6F1C9DE6B352F8C512D68BA1E3142
6FC0ECC7A922246EACB7A924151A79EDFB3E3451BD87933C27475FAC0D74CB82
67D592363D57178D8C03E491CE91E57E08820A621E0AED28> |-
/g <1C60D8A8C9B75F2F6D395BACC84C31C3B8372903CC9CFF677AF414414B7A
87C94C2007602795A97FFC216D9EC68A6CC816BABFC68EE2D165F092E1DEDD21
80D5E68F1E46BD3D39915DBF0BD529944A9F460E79C2A2DD3ADDE535C40B258B
0EDF1F0BB945C030943CE9CE8EC3218E2F97303675C45D0C4673767D0716ABF7
60AE70BC855A6EC26691BFC4D832CC1B7C48F0D399DAC1CD612279746CF4AD2E
4603C65720EFD86A50DF927E0E363599AA3336A351667EC814635E> |-
/p <1C60D8A8C9B7A4C86FCDA79C1DC84C4AFA74132B55E671E0148FC9185DE5
42CF0A71585BAD4258B26C1F3B3A0435613D394A097F890103EEE94F0198A0CD
F1493BEE037CA809F768D3CA31B06FDF414ADF7FA234CF7637A281CCA986F8CE
AB5B42A2FC867A6251E761A919F19974C7EB88903F96C99515F3506473744714
FD2563692FABDC1C76E0234A8313AC9D180FF055E26FDBC469D8CAAED24E9B74
57F0E7EFCCEA81732EB9B703DDA8CAAC602C310EE80FF3918D06614DBDA1B0D3
2DF8DBC97BD211B2B852C2DDD6957319A82C39CB8D70784BE77AAF8132C91742
6C6C53D6268FA19B01C107792DA8B070> |-
/t <1C60D8A8C9B80380260085120D6D1E249FB2DE32EFDFC5AEFCC3C1AB362A
B1AC4D945C4142F374B77DC20250C08162AEB69DC4CEC0575EF34A20FF2838C5
6D01A3D40EE49012FD52F036B2ED1BB119E65DE07D10EB5C2DD7F41ED672F45A
F363F4750BF26AF3518256DE17E77936DC9CD6CE44CA5F494C6FB830F5037D06
DCD316E617> |-
/w <1C60D8A8C9B63EE682F71457722A7C10F63B8BF0FC39EB4308901C88A931
18D378480E75480AD7F79F5F3C0F19218D3E26F0BF347BCC16F8C0C511E06631
9A536DFCEC607A7530AE82F11BCC1C5E91484F3622E8BB262EEAB0BB6AD55BF6
A403A3F57F5C94D0821D8B79627B73E22CE67B546D7D2C0A513B27AD06F93FFB
2F65904515BBA20972A27D47CFFFD3C9679B699A9C5B08A0C4C2D00EBF747880
6361E7EC8D35F36D9A8CF873DD17EA7E7E9B10AAD63C5089E29EB35F740B3431
A2AAE2EE66ED3AC732DD3A6DC099B6D943D540FA8F7EBFD79C1BB337EB126B93
01A020BD8AB05C0EB5A44C565A81924BDD47> |-
/x <1C60D8A8C9B7E02ADD9A961EA85B11A4D6AE8E5FF47D0FB2B207722E9454
9CFCF90B2994EB4018DCD72707FC7E657C1357774D6ABC659E4BFFA1BAD58151
43126640EA2DAE45CE146667BB09E3222C5B2BE1809001CE57FFDA3F8C3B30B2
86B230357F5F955C9F57E2989850ACB5C1C587977554FAB8160F71D5F85970C9
22D115B7642513052A5260EFE973B9D542C18F64EADFD1C5FDD09160C3DC94D4
7F2CD7AE4851BB3D04487C33689E9C61C71A12B0085775C7E4FAF6B3AF6BF212
F2A47B39735F454DF875687BF642E91EEAEBA7EEB2> |-
/z <1C60D8A8C9B74A3E84382C6D1E91220933A5E730ADFD63E24CC08BDDE5EE
CA0BA0C973053CBE62A90AF50619728A5330D6E611C5EF4C665B91BCC6C9B9A4
33ABA29ABE22766F4AB4E577E8AE8EDFEBE713F31BAC993648067C175C8A44D6
3E25AE63D517E6187730672F9913AE7BC1D7D63D892A6FBE9A4096169311DBF5
2AF53851ACFBDD2DB3B04F5339642881F60AAF4779FD123A43929A3DBA810A4F
2198B4F8ED5421E29DC26B665F9A021D5B3E3785C44DB407480E75BCA2516928
1269E75C4FC1DC930D8CB737C0790AF7657E82C3D84A1D1D5761> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMT+CMMI10 /Encoding get
dup 18 /theta put
dup 59 /comma put
dup 103 /g put
dup 112 /p put
dup 116 /t put
dup 119 /w put
dup 120 /x put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMT+CMMI10*1 
[11{/.notdef}rp /alpha 6{/.notdef}rp /theta 39{/.notdef}rp /period /comma 39{/.notdef}rp 
/c 3{/.notdef}rp /g 5{/.notdef}rp /m /n /.notdef /p 
3{/.notdef}rp /t 2{/.notdef}rp /w /x /.notdef /z 133{/.notdef}rp]
OMJEMT+CMMI10 nf
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.856 45.895 mo
(\013)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
189.266 45.895 mo
(,thelearningrate.)
[7.39027 3.87447 5.53525 8.80092 2.76764 4.42734 4.98131 3.90228 5.53525 2.76762 5.52528 9.35489 
3.9023 4.98129 3.87445 4.42734 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
281.641 45.895 mo
(c)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.952 45.895 mo
(,theclippingparameter.)
[7.39026 3.87448 5.53525 8.80093 4.42734 2.76764 2.76761 5.53525 5.53525 2.75769 5.53525 9.35489 
5.53522 4.98132 3.90228 4.98129 8.30179 4.42737 3.87445 4.42737 3.90228 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
404.894 45.895 mo
(m)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
413.641 45.895 mo
(,thebatchsize.)
[7.39026 3.87448 5.53525 8.80093 5.53525 4.98129 3.87448 4.14838 9.89886 3.9292 2.76761 4.42737 
4.42734 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
142.936 57.85 mo
(n)sh
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMU+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B77D5F989B950A07335B748C2E59E5D2D6BF1E6051
957DD97CEFF35302EE98FC4B787BCA44229E0EB5B1327789C7E84159A08D8DD6
8C92A07DE5F5A75D5A81EBAB8FA5D1E69836F3FC93F6E29FC5BFCC9DEA3989EC
8EA8AA> |-
/parenright <1C60D8A8C9B77D5F989B950A07335B748CB31A51BDF9FCF02A2
BBCACD13F22BC441A3FF8286B2AF4AFEB0BAC09CB8CFC19F55A315F3EDC1D3B4
CB4181963F3AF6C950ED14D564BDEFFFE139BE1E10473AE6A5D25F9A29D9AC22
23E09CC1DB99271> |-
/zero <1C60D8A8C9B7E2CEA7B240FEF602C0A65C384F7D9F85D89DA8B00ED99
C515D758A8E52DC86F382FB688F61317580A66E24517AC4B674C7F287697FD9E
B76D1A8A475F5845B03AF89A501A6DB631BF28FBA18A499E479A1BFC174F26C9
55CA64A7BFA811EED6669B69DDEBB8700FD4E8343040166E083D8F9355C627C9
603D5> |-
/one <1C60D8A8C9B7E2CE5B62E9FEEC2E64DB4DF57A0DEE8F2DC4BC1D285E2D
6E93583C8BA769F966BA0D2874BA4F6692804A12EE154BF6C4128EE336963B1B
369FC937E51FD440B01114006718C9CD9EDADE925291DDB3291CFBE83284B576
2DA660F3B8EE1736383DFDEEBA0BD582FD6608113CEA73> |-
/equal <1C60D8A8C9B593D6D47FD9CC657AEA78BB93B93E797CFD3C2F45E7AE
99BBC72E0746A7E2A1090B9AA11860F7CCC70A62A9356998CC9E481F07FF34F4
8507607194D6BEE374D18623A13CD516823B17> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMU+CMR7 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 61 /equal put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMU+CMR7*1 
[40{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 11{/.notdef}rp /equal 
37{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 
139{/.notdef}rp]
OMJEMU+CMR7 nf
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
148.916 59.345 mo
(critic)
[3.54202 3.11307 2.25529 3.11308 2.25528 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
167.237 57.85 mo
(,thenumberofiterationsofthecriticpergeneratoriteration.)
[6.08517 3.87447 5.53525 7.75485 5.2563 5.53525 8.02286 5.81421 4.42734 7.21983 4.98131 6.36215 
2.76761 3.87447 4.42735 3.90228 4.98129 3.87448 2.76761 4.98129 5.53528 7.25668 4.98129 6.36215 
3.87448 5.53522 7.7449 4.42734 3.90228 2.76764 3.87445 2.76764 7.75485 5.80423 4.42737 7.2298 
4.98129 4.42734 5.53528 4.42731 3.90228 4.98132 3.87445 4.98132 7.21982 2.76761 3.87448 4.42734 
3.90228 4.98132 3.87445 2.76761 4.98132 5.53525 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
126 69.8051 mo
(Require:)
[8.59277 5.25128 6.04633 6.36511 3.18204 4.71831 5.25128 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.571 69.8051 mo
(:)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
180.767 69.8051 mo
(w)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
187.899 71.3 mo
(0)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
192.368 69.8051 mo
(,initialcriticparameters.)
[6.08517 2.76762 5.53525 2.76762 3.87447 2.76762 4.98129 6.09514 4.42735 3.90228 2.76762 3.87445 
2.76764 7.74489 5.53526 4.98129 3.90228 4.98129 8.30182 4.42734 3.87448 4.42734 3.90228 3.9292 
0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
308.184 69.8051 mo
(\022)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
312.861 71.3 mo
(0)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
317.331 69.8051 mo
(,initialgenerator'sparameters.)
[6.08517 2.76761 5.53528 2.76761 3.87445 2.76764 4.98129 6.08517 4.98129 4.43732 5.5253 4.43732 
3.8923 4.99127 3.8645 4.98129 3.90228 2.76761 7.25671 5.53525 4.98129 3.90228 4.98132 8.30179 
4.42737 3.87445 4.42734 3.90228 3.9292 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VFJBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 58 /colon put
def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C
7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD466
5FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E
81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A
59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB8
18D90EA7C1> |-
/four <1C60D8A8C9B7883C47E9695598D0AF3A7007C55B549EB9B3F3F461046
52844342745D2B91FB2D0F00634244F88463533B1B57C29F84779340190813A1
C1D067290CD1A5A15C3546B4439E2525D45177EB37490815EF6B6C58818E7C9C
DA495E2BF3E7B45D1B291D529E999804ECD42D22A6077E492DD51C0EA4F3AC64
7B0CA8614C7> |-
/five <1C60D8A8C9B7883CBAA92BB8F04ADF0CA94FD08BC440200536D203E6D
D6DA1AA4E24085E351E5B7C415E93A6939C0F28260B2D42E565E41E47CAD8C4E
0FB90A5F0EBE143B4D47059097939838CB5B3014789C985B5F61B6EFFE42818F
5880DA935C9BED05A3F418BBE57B46C9A1FD27EC9ABE0648F3A246130B19CCAE
C5E002CEF22BC7D01B0678313CD88BAB34203C2F1276DBDF05750AA0AA265A31
22096D5835D96AA3CB4F3086139CF8051057195072A2049B20B1C013E0278E05
89660283087653BEDD3> |-
/colon <1C60D8A8C9B845C808722EC4AC28D1A9F562339BE5D47C6439697E50
84957CD6A43717221FCC57323573C71302E15A6C3C7D0BA1759F13D734E7D26E
4EB8AA08C86E045EEFCA48CE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMV+CMR8 /VFJBAA+CMR8 findfont ct_VMDictPut
/OMJEMV+CMR8*1 
[49{/.notdef}rp /one /two /three /four /five 4{/.notdef}rp /colon 
197{/.notdef}rp]
OMJEMV+CMR8 nf
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 81.7601 mo
(1:)
[4.23448 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
142.936 81.7601 mo
(while)
[8.2749 6.36511 3.18202 3.18204 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.513 81.7601 mo
(\022)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
180.787 81.7601 mo
(hasnotconverged)
[5.53525 4.98131 7.24673 5.53525 4.98129 7.20198 4.42734 4.98131 5.2563 4.97931 4.42735 3.90228 
4.98131 4.42734 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
262.509 81.7601 mo
(do)
[6.36511 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 93.7161 mo
(2:)
[4.23448 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.88 93.7161 mo
(for)
[3.50081 5.72845 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.149 93.7161 mo
(t)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
181.514 93.7161 mo
(=0)
[10.5185 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.011 93.7161 mo
(;:::;n)
[4.43138 2.76762 2.76762 2.76762 4.42142 0 ]xsh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
220.149 95.2101 mo
(critic)
[3.54202 3.11307 2.25529 3.11308 2.25528 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
241.79 93.7161 mo
(do)
[6.36511 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 105.671 mo
(3:)
[4.23448 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.824 105.671 mo
(Sample)
[5.53525 4.98131 8.3018 5.53525 2.76762 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: SIUBAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SIUBAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 24 /similar put
dup 32 /arrowleft put
dup 102 /braceleft put
dup 103 /braceright put
dup 114 /nabla put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/similar <1C60D8A8C9B6FC2D989507181C728F35D6907D6911DF886CED2CBF
A4D7A1ECDD6D7D71EC7CC52F8F82E266C6915C016F352BA997C30BE7E05C9187
D4432E6AC240104D0D5C337395CCB28D2427261DC733493EA1281A1C34D5C1F8
403A690E9FF11D828D7E9FD78AC07A> |-
/arrowleft <1C60D8A8C9B5EE310D75E4BB540F5F8E498DEE0ABF56701815B7
E8E03489E6F726A3CCD9125F7EDDB608BD6F0A0B80DF996F52C200F2F2504890
6FAB0B90ABD457B7970DFDE3B9F0AF498C7BBAEFFAA214625DF8420770430B2E
1AFE666F8E842341195A1C17824B33DED9A1B8347C3105A24E220FD7> |-
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917
CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83
D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D
97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133
C46859EF9ACC558D046684C86AF46342> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E50297
25A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E4
8C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D
60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A70
95E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A7429856
03D0073C85F20BAEF47B61A9ECA7243ED> |-
/nabla <1C60D8A8C9B6B41C26EB9418446F514CE5DC8BAA4E40E337D8E0A2FA
274C84F16529821A4F3751C2DDEC087D5300E1335D56B07D7BA2C847FF7B323D
1306C627F2881AFA95C935CCAF498A448BCF857F5ACE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMW+CMSY10 /SIUBAA+CMSY10 findfont ct_VMDictPut
/OMJEMW+CMSY10*1 
[24{/.notdef}rp /similar 7{/.notdef}rp /arrowleft 69{/.notdef}rp /braceleft /braceright 10{/.notdef}rp 
/nabla 141{/.notdef}rp]
OMJEMW+CMSY10 nf
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
207.694 105.671 mo
(f)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
212.675 105.671 mo
(x)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
218.369 102.055 mo
(\()sh
true set_gvm
%ADOBeginSubsetFont: RWSBAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RWSBAA+CMMI7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 109 /m put
dup 114 /r put
dup 119 /w put
def
/FontBBox {-1 -250 1171 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 441 451 463 683 703] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/i <1C60D8A8C9B70721B9F639782C8460B97E82801AD0D8A919DC5D9CAA4C68
FBE7833AC2F83808014E455261AE4698D1787D69206B38071478CB577B72EF41
ED0606485A0805B327A9541BF99C223B853428820C7432E93F64332505182833
A9A1726F67F49595C0D6B4E36728E08E3A3FFE1D3400C0426C9F7D546B609ED9
847726C531FCA5CF35B9B04381F81797F4E937A123F607399D53953A016040EB
4EB08C885D7568DA709FDAC1486D> |-
/m <1C60D8A8C9B51B15A3B004ABA78A4F02BD45FD7274A9A74A7E48B0CC064D
1921E5F873EDDD9CF9C0E04FB4DDBB5A9DE083B2A06BBAAA363C515090F99E1B
B42E4268DDFDD4B979C34D2B766AEA414FC3301D3900FB6A2581AD984395510A
7DE6E4E94F0B46728CE5D2F992A065A90F6FDC045FF834218D0821D404C67A58
3E6DD4E1C1588B76CFCBAC1F0CF3095FBCE07AB6CB05BD94D14F59C6697D642A
E3F308A8ECEAA8EDA418A19805A2AF109BEDC47DCC3ED47312863C6C89DF3AE5
52650A8DAB19AA4E26F36E02C586851911CC17A2A390CF53B48BB9E3B044F2B7
3887D346B6371E8B3242F85376774A8C36E83543CF398DA6610FF498DF45068C
D5CFA4B320311628C3069E3398E15B2A2F0A889B7AFCD88C192CA83812CBF5C3
1A2E8B2370AC853734ADAF47BADBD0D80D02C1B26A91738B43EBAA89B839> |-
/r <1C60D8A8C9B7890D00481D2C25DC59AC462738A7908647A15752A3AFFCCD
82AFB55F3D209EC0B794DEDDC2CE25565929F21C086DF18DC1C50AA7E07A8388
D5158D170B4268F7BBA5724DE3DDD8BF83A348FC9CABF1FB221059AF3799835E
78341AE70D66B6566419F262897356C41452AE9F42AA6EEC683E691B71DBA214
CE2E35D9657C9B9F4CCEEBAE48B5919D56430661EC6FCE7D881D8F19C002BBE2
36C2CD941C8E618DE41114FF2AB2F6723922> |-
/w <1C60D8A8C9B6AF046FD81E39594209771810E387EF4CBB8248FF5F7D4F6B
431A05C25415E024F809B4A9AC21AC029EDAE0A5D2D25806E63283839D90B346
4C8EB7F5F3495F58D5C681018A37EC051E6EF5E76E6F3ACFC24A0FF977C1A09A
BEB143CF68293624B068A0B651897F3D22B9144D5531BFDB5EA3EF997D36FB83
D188960E1145B6B02F53269803322EEA1AEDB3935C817C9FA1DF996AA8C0E066
BB670AFC6D9BB62CC2AA30651D378409FBAD6E813D566F315C80C311FA49C9DE
C715F9D7D3B90978E2B455A4D986B9B83DC43FEE825CEA3FF5CB272575BB3A43
11CF7CA14B8C46C8C7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMX+CMMI7 /RWSBAA+CMMI7 findfont ct_VMDictPut
/OMJEMX+CMMI7*1 
[105{/.notdef}rp /i 3{/.notdef}rp /m 4{/.notdef}rp /r 4{/.notdef}rp /w 
136{/.notdef}rp]
OMJEMX+CMMI7 nf
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
221.482 102.055 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
224.301 102.055 mo
(\))sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
227.912 105.671 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
232.894 102.055 mo
(m)sh
232.894 108.264 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
235.713 108.264 mo
(=1)
[6.11601 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.065 105.671 mo
(\030)sh
true set_gvm
%ADOBeginSubsetFont: TDABAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TDABAA+MSBM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSBM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/P <1C60D8A8C9B7D8BE6A714A5FD3826963FB3DB3380DA86B297125B8E77351
ABA869F19E7CED66D13FFECA0E0E28567A6258BE38309A452BEDB9DEC00FEB32
273A95FE2F3571B590B6F9369F161D5F273BBEC30935D935F734489A0D0019C8
3CEB0E5AF9E605D11F0BD2AE55499A06F64827442DCA5280CA8B1AB70620F4E8
502B9789231BF538B04E0AE08F75907C796E750347332D2A37C00E8AEBA2A113
CB148248D0C187CF435D1474986029BCA39DB14CCB4C63CAE0F28C0B13F7AFDB
FE5AC125B645A519898335F8BB3423957B981DF0F4C4633F8C19C875FC18> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMY+MSBM10 /TDABAA+MSBM10 findfont ct_VMDictPut
/OMJEMY+MSBM10*1 
[80{/.notdef}rp /P 175{/.notdef}rp]
OMJEMY+MSBM10 nf
OMJEMY+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
259.581 105.671 mo
(P)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
265.67 107.165 mo
(r)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
273.402 105.671 mo
(abatchfromtherealdata.)
[8.29886 5.53525 4.98129 3.87445 4.15836 8.85281 3.04459 3.90228 4.98132 11.6194 3.87445 5.53525 
7.75485 3.89233 4.43732 4.98129 6.08517 5.53525 4.98129 3.87448 4.98129 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 117.626 mo
(4:)
[4.23448 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.824 117.626 mo
(Sample)
[5.53525 4.98131 8.3018 5.53525 2.76764 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
207.694 117.626 mo
(f)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
212.675 117.626 mo
(z)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
217.746 114.011 mo
(\()sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
220.86 114.011 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
223.678 114.011 mo
(\))sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
227.29 117.626 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
232.271 114.011 mo
(m)sh
232.271 120.219 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
235.09 120.219 mo
(=1)
[6.11601 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
248.443 117.626 mo
(\030)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
258.959 117.626 mo
(p)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
263.971 117.626 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
267.846 117.626 mo
(z)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
272.917 117.626 mo
(\)abatchofpriorsamples.)
[7.19202 8.30881 5.53525 4.98129 3.87445 4.14841 8.85281 4.98129 6.36215 5.53525 3.90228 2.76761 
4.98132 7.22977 3.9292 4.98129 8.30182 5.53525 2.76761 4.42737 3.9292 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 129.581 mo
(5:)
[4.23448 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.824 129.581 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
177.576 131.076 mo
(w)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
186.793 129.581 mo
( r)
[12.7322 0 ]xsh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
207.825 131.076 mo
(w)sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KXGAAA+CMEX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /bracketleftbig put
def
/FontBBox {-24 -2960 1454 772} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bracketleftbig <1C60D8A8C9B71B40B80CCAE87D29017BD4D90FFA7B2E154
52C20AFCD4461F0F88DC198E60EEBCD9A129CC9E7BB0D40CDDE19CE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJEMZ+CMEX10 /KXGAAA+CMEX10 findfont ct_VMDictPut
/OMJEMZ+CMEX10*1 
[2{/.notdef}rp /bracketleftbig 253{/.notdef}rp]
OMJEMZ+CMEX10 nf
OMJEMZ+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
215.935 121.511 mo
(\002)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
222.831 125.659 mo
(1)sh
221.281 127.09 mo
228.351 127.09 li
@
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
221.281 133.017 mo
(m)sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMZ+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/summationtext <1C60D8A8C9B521E322C24C96E0E231F0E47EB04843156366
A24A293B59AFC4B3918CB6344678BC1DF63E4B4187061E01F9A9212873DA6C87
4CF370BD0DB0D5C637E26FABE797593940996ADB65EE3E84D5A9E5E17601165C
94096235E3C4719045852E9B9AAC2FDD3B4EE793AA595A2CDD953AE0DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMZ+CMEX10 /Encoding get
dup 80 /summationtext put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMZ+CMEX10*1 
[2{/.notdef}rp /bracketleftbig 77{/.notdef}rp /summationtext 175{/.notdef}rp]
OMJEMZ+CMEX10 nf
OMJEMZ+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
231.207 122.109 mo
(P)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
241.723 124.572 mo
(m)sh
241.723 132.57 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
244.542 132.57 mo
(=1)
[6.11601 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: OQOAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMT+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B752AB470B4B675153DAF5FFB9FA454C9906B926206E449AE2
703E65919425028E582F5B2415481B2BD72EF503FF91F262F166F00A9D78D0BF
EBEBC84F36A53DA28C84B1E1F420B56784175C2AA9B71BCA7C1B561D8AE78C75
07DA545FBED786245A533CC28BE8540D6F127692804BEFD7259888A39E96DA2C
C6A47A1546279CE3053200B6A7E201B7770A22EAEBA422BDAEA7D5C417C5AB53
05AF89F1C27E78553FB974F7821B67FCE1F24F306030DADE4CC6852D08> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMT+CMMI10 /Encoding get
dup 102 /f put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMT+CMMI10*1 
[11{/.notdef}rp /alpha 6{/.notdef}rp /theta 39{/.notdef}rp /period /comma 39{/.notdef}rp 
/c 2{/.notdef}rp /f /g 5{/.notdef}rp /m /n /.notdef 
/p 3{/.notdef}rp /t 2{/.notdef}rp /w /x /.notdef /z 
133{/.notdef}rp]
OMJEMT+CMMI10 nf
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
256.787 129.581 mo
(f)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
261.665 131.075 mo
(w)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
268.114 129.581 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
271.989 129.581 mo
(x)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
277.683 125.966 mo
(\()sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
280.796 125.966 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
283.615 125.966 mo
(\))sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.226 129.581 mo
(\))sh
true set_gvm
%ADOBeginSubsetFont: SIUBAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMW+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMW+CMSY10 /Encoding get
dup 33 /minus put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMW+CMSY10*1 
[24{/.notdef}rp /similar 7{/.notdef}rp /arrowleft /minus 68{/.notdef}rp /braceleft /braceright 
10{/.notdef}rp /nabla 141{/.notdef}rp]
OMJEMW+CMSY10 nf
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
293.314 129.581 mo
(!)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
306.022 125.658 mo
(1)sh
304.472 127.09 mo
311.542 127.09 li
@
true set_gvm
%ADOBeginSubsetFont: RWSBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMX+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/theta <1C60D8A8C9B79B8EE03CE6313C19B4E581DCF83D5F607D5F4421ED91
958176EED82510B3BDAE7D6D76A9F5E533C020C3F9FC172076C7C57A8531B738
2E110A735E377E98054E24479369132ADE6634116AC54EE488DD59DCF3DC94BB
6117A6A0C18232F4809BD4BC0F27EFEAF6BF74FF4C35F20E89BE7C4B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMX+CMMI7 /Encoding get
dup 18 /theta put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMX+CMMI7*1 
[18{/.notdef}rp /theta 86{/.notdef}rp /i 3{/.notdef}rp /m 4{/.notdef}rp /r 
4{/.notdef}rp /w 136{/.notdef}rp]
OMJEMX+CMMI7 nf
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
304.472 133.017 mo
(m)sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMZ+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketrightbig <1C60D8A8C9B71B40B80CCAE87D29017BD4D90FE61BB742
3FACD25AE465BCB25ED3A144CC7BEE12FB108C94ECFF269C0C1CA0BEBB0916> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMZ+CMEX10 /Encoding get
dup 3 /bracketrightbig put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMZ+CMEX10*1 
[2{/.notdef}rp /bracketleftbig /bracketrightbig 76{/.notdef}rp /summationtext 175{/.notdef}rp]
OMJEMZ+CMEX10 nf
OMJEMZ+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
314.398 122.109 mo
(P)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
324.914 124.572 mo
(m)sh
324.914 132.57 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
327.733 132.57 mo
(=1)
[6.11603 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.979 129.581 mo
(f)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
344.856 131.075 mo
(w)sh
true set_gvm
%ADOBeginSubsetFont: FFZAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
/M <1C60D8A8C9B5BA43AA8567ED4BE2D7FEDF84AA8E4D7C55A5BC42BD34F327
7CCBB834BA74F53382342B0BA2F117A667CBDAF558D8C8C6BB52DFE7A951AC7F
90B65CE73200D87C871483BCDABA867EF53CF58D923A6435A91070A9B8C57E2A
C8D8757C5081292709B14AABF10DF398DAFB85ADC1EBF2FD6188FF6384A9B0EC
88ED9C3C67FD1369FE1E51586F85AE8474F281CA47693B25D9154D6F07941252
F00CFCC0ABAA961F75FE6F08A5C67C2DA703A2BABBD58AEB6A91D6EEBE962740
43928EF3E9FBCB3DB234E95B1AF126B5BCE1E952BBBFAD047E0EA18D4396EBF2
025C72> |-
/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B20DABDE3694037FF5
C7CFF0F66599746818E44A88AE051EAA2ECC64A7F63066296DF5B94E5374A791
01894F634254EBF61BB4676A0F5F95AD513AF7507835F91BBF2F6DB05C191360
2214DC0C07048AC9F398A5400FC635BC3D7BE839FD2C9EAE0EFA08945ECA8DA2
3D80132909A7B4597A38120CAB750515AE457C3E49AB6D8454> |-
/R <1C60D8A8C9B615D12DC96511BCDF86E8A7C75693A48984A0E7356B506A1E
15B47A94A73C653189B6B5BD65FB5FD80494A93ED537A0F09ED1A8D7E99F236C
312E766AB94701E7DF4C5D2A60F4FD92EAE94A3954DDA379326F222414F1DE7C
4AACE6D4DED1720B0E27193BD7C5EA0E3BA2CC71AE1473C45D199A12EC2BADFA
899FEA715987353E3C7215E3A7FAC395D71EA8789DE2ED7766F94B55DE6CADF8
918D147A0B2E013795A64EAA525827FF34103C3300ACB3AA71F9D25FB8DACE8C
183EB9D5D1CB14AE41492D4FA0E06AFE19D1D845A5D9B7C1D57AA6016B555070
D6E922D376B26646FEF8B92A7CC134A4CEA68E0101BD25C8C1C5F54B53F49768
93EC3DED988EEFD4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMS+CMR10 /Encoding get
dup 43 /plus put
dup 77 /M put
dup 80 /P put
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMS+CMR10*1 
[39{/.notdef}rp /quoteright /parenleft /parenright /.notdef /plus /comma /.notdef 
/period /.notdef /zero /one 2{/.notdef}rp /four /five /six 
3{/.notdef}rp /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 
5{/.notdef}rp /M /N /.notdef /P /.notdef /R /S 
3{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/.notdef /x /.notdef /z 133{/.notdef}rp]
OMJEMS+CMR10 nf
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
351.305 129.581 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
355.18 129.581 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
359.932 131.075 mo
(\022)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
364.439 129.581 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
368.313 129.581 mo
(z)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
373.385 125.966 mo
(\()sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
376.498 125.966 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
379.317 125.966 mo
(\))sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
382.928 129.581 mo
(\)\))
[3.87445 0 ]xsh
OMJEMZ+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
390.677 121.511 mo
(\003)sh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMV+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F
6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3
D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB
8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A351
8927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-
/six <1C60D8A8C9B7883CBAA92BB7052CB3D025D26C786B134C7D4D024227A6
CF5116B65C7F3EDCBB046A6D5B58FC55EB7A6349771E207AC0F1620248BBC827
65A477B525CA3035D65AD150E1FA66D14C00F4D62FA003E8267DAD2E0BC6EB42
8EE745E8A441D5D96DA8071D8B76F53B9FED393417E799F3B539D42A45B55E05
75B899A9FA1CBDD41774F8FB6DCE28637A97B1A33161930CB80D70A25BF74CEB
E689B485DF0013312A677C6070E950F089378CB5> |-
/seven <1C60D8A8C9B7883CBAA0E9EE3E9878E92C520C469EC550617F372CF6
CA5D43E72582F1BD093E9D7DAA7EDD2F6BB550EA4501C1EA826B22107B5CA25D
E8B7AF5DB0572443CFC499D5C45E776EECEE105C833F431B4C6FDD6941D58AF0
005EC01E26F455F0A416837339F206571B57278CA105> |-
/eight <1C60D8A8C9B7883CBAA92BB64A311DA1354F5D68776F2608BEB81B80
294D73AA8C3FEDAFF58B4E60701097923423FBE4C36FE8DFBF6F2C385E130C47
988B6844413476018C63C43A8DDDFAE187820C43250C18C9D130DC31BAEF4A60
888F65AD1678646D1687B470D47BD523EE331174DDD0831E389327B2B700E7A6
A776152FCA4C02EC65B75F7B57D7BCCCD6954215D1EB0A1CFBA00896F64363A4
5CDA240697> |-
/nine <1C60D8A8C9B7883CBAA92BFC2795CB489FAB13B9BB6E18181A103EC5B
1E1B8B191BF9985DC765CB882D3BB429A7391E9ABEFC63A1500585FC331EAC31
ED3AE6DF0951839AC3A95570CFCA4F606382A77C8150F60C2BC2EE07B6BFEEA7
4B5BCB1B549978D6E5BDA7FAEE8A0209BF3A3DE0B37D2771CE9D9460866923DA
B9D9EA5A831A08CAABC890AF2E7ED89FF5AB09011E7F1A13FA90477058C41C66
77EE1251D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMV+CMR8 /Encoding get
dup 48 /zero put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMV+CMR8*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine /colon 197{/.notdef}rp]
OMJEMV+CMR8 nf
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 141.536 mo
(6:)
[4.23448 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.824 141.536 mo
(w)sh
true set_gvm
%ADOBeginSubsetFont: SIUBAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMW+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/periodcentered <1C60D8A8C9B85744184BF6DE7708B34A48D2A1BC0E3E86C
4A4A58F8CB4F3982EAABA33ABCF5BB62FA01F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMW+CMSY10 /Encoding get
dup 1 /periodcentered put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMW+CMSY10*1 
[/.notdef /periodcentered 22{/.notdef}rp /similar 7{/.notdef}rp /arrowleft /minus 68{/.notdef}rp 
/braceleft /braceright 10{/.notdef}rp /nabla 141{/.notdef}rp]
OMJEMW+CMSY10 nf
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.992 141.536 mo
( )sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
195.722 141.536 mo
(w)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
205.337 141.536 mo
(+)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
215.299 141.536 mo
(\013)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
223.923 141.536 mo
(\001)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
228.904 141.536 mo
(RMSProp\()
[7.33347 9.13274 5.53525 6.78056 3.90228 4.98132 5.53525 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
275.978 141.536 mo
(w;g)
[7.40118 4.43137 0 ]xsh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
292.558 143.031 mo
(w)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
299.007 141.536 mo
(\))sh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 153.491 mo
(7:)
[4.23448 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.824 153.491 mo
(w)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.992 153.491 mo
( )sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
195.722 153.491 mo
(clip\()
[4.42735 2.76762 2.76762 5.53525 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
215.094 153.491 mo
(w;)
[7.40118 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
226.922 153.491 mo
(!)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
234.671 153.491 mo
(c;c)
[4.31181 4.43138 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
247.722 153.491 mo
(\))sh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 165.447 mo
(8:)
[4.23448 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: NXMBAA+CMBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMR+CMBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B673A51B1FAFDF4A0934FFA3BEDFB22D3C6124D5FF35AA3EEF
2A6DB5C62A1DDFE630D9CFEEFF17FE39D2991452C5C364CBD3CC38A3E1B82F1D
62667E8FF38AA8623B859315A707F4981DAD415621937CECAA82A77BF6D6F1EC
6B661310D93C2C1BA138919565CA30333BB901D72E034FEA65AC93A583E63B30
D6F79B29CAD81ED44E44B98850A68A1CE11992C94300FB4C00035CA62298DC55
70E994B5F8567DE977080E534C1A9619F6A4378E7A4E516DA542AA4B59CA07C6
9CB6F5785ED54AA5AD3F5C323940BFF2DC9C69BD718E11982FFDC0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMR+CMBX10 /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMR+CMBX10*1 
[49{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A 16{/.notdef}rp /R 
17{/.notdef}rp /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /.notdef /q /r /.notdef 
/t /u /.notdef /w 136{/.notdef}rp]
OMJEMR+CMBX10 nf
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.88 165.447 mo
(endfor)
[5.25128 6.36511 9.68266 3.50079 5.72847 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
131.369 177.402 mo
(9:)
[4.23448 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.88 177.402 mo
(Sample)
[5.53525 4.98131 8.3018 5.53525 2.76764 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
192.75 177.402 mo
(f)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.731 177.402 mo
(z)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
202.802 173.786 mo
(\()sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
205.916 173.786 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
208.734 173.786 mo
(\))sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
212.346 177.402 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
217.327 173.786 mo
(m)sh
217.327 179.995 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
220.146 179.995 mo
(=1)
[6.11601 0 ]xsh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
233.499 177.402 mo
(\030)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.015 177.402 mo
(p)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.027 177.402 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
252.902 177.402 mo
(z)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
257.973 177.402 mo
(\)abatchofpriorsamples.)
[7.19202 8.30881 5.53525 4.98129 3.87445 4.14841 8.85281 4.98129 6.36215 5.53525 3.90228 2.76761 
4.98132 7.22977 3.9292 4.98129 8.30182 5.53525 2.76761 4.42737 3.9292 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
127.135 189.357 mo
(10:)
[4.23448 4.23448 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.881 189.357 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
162.632 190.851 mo
(\022)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
169.907 189.357 mo
( !r)
[12.7322 7.74892 0 ]xsh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
198.688 190.851 mo
(\022)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
205.94 185.434 mo
(1)sh
204.391 186.866 mo
211.461 186.866 li
@
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
204.391 192.792 mo
(m)sh
OMJEMZ+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
214.316 181.885 mo
(P)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
224.833 184.348 mo
(m)sh
224.833 192.346 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
227.651 192.346 mo
(=1)
[6.11601 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.897 189.357 mo
(f)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
244.775 190.851 mo
(w)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
251.224 189.357 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
255.098 189.357 mo
(g)sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
259.85 190.851 mo
(\022)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.357 189.357 mo
(\()sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
268.232 189.357 mo
(z)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
273.303 185.742 mo
(\()sh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
276.416 185.742 mo
(i)sh
OMJEMU+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
279.235 185.742 mo
(\))sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
282.847 189.357 mo
(\)\))
[3.87445 0 ]xsh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
127.134 201.312 mo
(11:)
[4.23448 4.23448 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.88 201.312 mo
(\022)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
165.601 201.312 mo
( )sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.331 201.312 mo
(\022)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
185.499 201.312 mo
(!)sh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
195.462 201.312 mo
(\013)sh
OMJEMW+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
204.085 201.312 mo
(\001)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
209.067 201.312 mo
(RMSProp\()
[7.33347 9.13274 5.53525 6.78058 3.90228 4.98129 5.53525 0 ]xsh
OMJEMT+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
256.14 201.312 mo
(\022;g)
[4.95544 4.42142 0 ]xsh
OMJEMX+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
270.274 202.807 mo
(\022)sh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
274.781 201.312 mo
(\))sh
OMJEMV+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
127.134 213.267 mo
(12:)
[4.23448 4.23448 0 ]xsh
OMJEMR+CMBX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
142.936 213.267 mo
(endwhile)
[5.25128 6.36511 9.68266 8.2749 6.36511 3.18202 3.18202 0 ]xsh
126 217.452 mo
486 217.452 li
@
true set_gvm
%ADOBeginSubsetFont: FFZAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
OMJEMS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ff <1C60D8A8C9B7F44AB057F17785C13EBF9EDBA5E37D38F2D2EC32EA15C52
166ECBF3DF0794257079BA45015630D7760B8E4C1EB3F58108741AD2AA01A109
0000B4F2956C8AFEB9BD9997AC95B037C1298E4C2307650A742CF1D3C703C73C
A10466F00ACAD6CEDFA580823778863C65543C9DC0AAAA390A14E627B436F6C9
88CCF1E043B7A19E345B2C3CD7EC8A67EFFE3A681960C3C17F5A01A8598C651C
F01F84C5FB94F73029353B8731DCFD311B4680D186A3A2574A0C0152E8858A90
6FA149A1EEA96578774D7E71B4108AAFBA90DA3FEB52C0A53964F54A02643303
F00648ACD662B9ED701E32591F8AF679524746C12872B65219126E3DE7C1150C
A0EADDAEB089C36D0297F5D40AFF15A8A9FBE2075BE1C682F0783B7E2> |-
/fi <1C60D8A8C9B790A83D946A52CDEF806B68BCA69D0F565BD47A313ACE64E
A4C51C4F7E2720AD6426622FF887A9B1CEFB163BC1E0E045B9CF4238406E1235
2EBBD9242E2C49AFC9D86CDEE482C0035CA1CA44CCBB1436642750A1E71B1CD2
88AC28B3D26A164143FCB2C92157FC4CD1F366676BE46E871DBBB1239C9614DC
38DD102B67124FC3D2C144C05DA896465C2DA06004C93D99A6D33F72F04F023B
41A55BAD349B063D76BBE78E5B60101B7FD0DF48C196A450BF7E868A35BEFE7F
5AEE46F6B98A5AEE642C67C9F421CFE1639B9D13BF5EC82D77CC20A4B04492D8
733D54EC758417FF41850C5076FB5C2875D5227FEF9897E31DFBBC49554A2544
AFB8F5D9BAF3452E7> |-
/hyphen <1C60D8A8C9B81F2C3AF48BE1F128682CB71E9BBC932714B7AB24E23
905FE> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A07BD51
606BCA866C4BD24CA34E86B9CA5A529B664F3EEDB6B4AF8A2B994DB57B49473E
162231CB943675FE63E9B92B8AEBB62FB22456EC4173C66EF6C2F34FFEC22ACA
E77FFFAAD70F3754CADC0D2CF63CB6D286D930AEA5A613E5AB9CB004BEAEBADD
D070EDAF4FF25FDB6421F540D58D2C7A3FC40290CBCF831BE1B89B7F> |-
/eight <1C60D8A8C9B7A73D3B2B97F1414E4E14F801A059892814FA42E4E2C8
0EFDA659D9BB77F349463F4A00D8ED33975855544E68ADA715C46B48E5214EC1
478071E2CA54580909701967B928DD6D384659775DC9744471AF4209ABE86CCF
54E84B03EB8981900A33E230A5E176029A4F3431D5460DA2A76659C526F48B26
52E37466C39C5889089BE6A19F3137FC6D1B485B848C27C668BF6C2B18756DC9
55F5DB5ABF7A74FD3DEC5789AB27D98224E42837> |-
/E <1C60D8A8C9B65DE708408E894B780C980FB3CD0F5A2C0BEF23E5114F36C9
09584A712E7AFDDA2F26FF878CC11EDE914164339F97B59F3659C5E3C5144DA7
9350C562BF05A1FC95A59765A840A579FDEA86DCEB7F99647561868501F99D35
BFF4F16CE8CFA6310AD24B7256C45B06ACB6DF245FF3654675E2E019899536DE
4452B0D6D01DB1C11617465A> |-
/F <1C60D8A8C9B6415B3711EB1374ABAAA5807C9EEF546BB48E20B7C80F2440
A33EBF154406CF8E0357C9FC59A91B81A30E2A6B39737D11C4098B5A80670049
AA0D28AEFFF6CC9623E77045E059C85ED1DEF097E8AD8EB596D92ECDFA245085
2F5239A26C6AE22D6FF2A11E41BB2F0B25F77CCF63F0DFBDCAFB46AB38C0475B
F38716AF7C70011524830AEDECD5FE884C30BE71797C9E6C523F53FAFC27E6> |-
/I <1C60D8A8C9B803802DEC08D98BCB1124DC97CC2168B04A76665CA4085863
C1134DED52EF876B65C467960DD7B14974A90DA32178A8C0201F22E90F10D9F0
4A14033C618CAC17B75F13513FEEAE1D4A0FD6DB8D776D9FCA15F0400DBEA440
D61D7EA23967363EF1098D6D4EAD2578D18D87B764EA14FC1B0329A8B2F96ED6
50C824B7D9FCB004F255C7B9DB4DDDD820C863> |-
/J <1C60D8A8C9B7BA8F97139BE3AED72E8C8460038D36000B23539DE66827A7
59AD49EF0BCE2931A11A77BF4584D52C32D31FC2A37C3C7E9CD4A9D94F4A72B9
F566DE66819BB0F2061230AE2263EF18395C3CB084B71074E7A956AC3ED27995
AED6CCC0BECC7D87BEA545D56260E276C657D6EA635C2AE7F33B6D22D208A41C
FC0A830A8DA5776D77F309F589B5> |-
/T <1C60D8A8C9B6079F3ACD50B6173265EE696B04F433123BE8FE6957F3B602
8924B7831F62749F61057E47C9AFC439E5FE9774BDBA95D8780F15E99A2D6DBC
842E367191628A2E402043835AC8FDE6AB93164DF41C7446FAB279D3EB9C6612
1877CB11D6A7077E1EA3F211DD4775AFAF95572B45BD0445F00DE2D6FF03CC09
F95A7375F8A1A506648567695D81EAA6869AE211E13B3028937B3B39284DCE> |-
/bracketleft <1C60D8A8C9B857441457F48D14F3F47B30BCEFA5B1BB16AB48
A411FDEDDBBCA4E8659FE72DCA596311382BB6> |-
/bracketright <1C60D8A8C9B857441457F48D14F3F47B30BD99EBE2CD4840C
E39569BE9FF8DDD4604DD868D11B34C9C90BD70> |-
/k <1C60D8A8C9B78C669F28CFA812DED6139D7D856991235AB6C4AFC31BCD27
3487675BD2F1E5E12A90601E8813F546F4A251C2413363ED229861B6D9BB803D
B05AFBD87A0BDB30ECAF79A6D7790B485108229A8E37CE114792148894516FD3
5B349631ABB537005E1976FEB58ECAFBA15317EB352D3CF9CB33300F195FC223
A3F6046CEB2634BEBCF6E3727F7EE5A302BE446437A812155B254724D2537EB0
05F67E4A1C637E1D0B04296D89278AFEA4370D60C606D50CD21C194036AA2B31
38CB3CBC2A27B2F6A619F68A923473FE4640A1DEB3A1DC3C48F4614D31FF09A6
26A640D3780A65E6F12B49D1B402046EDA42CFE7231C1BAE09391B8A756CE69E> |-
/q <1C60D8A8C9B78C66EF5247F5707C9C7401D463F3DD83C2E21DFAE96BA586
9F86EF6F51AF0B5F762AE3BB0D8E1C7478B2802678D1830DC7ED9855E0146DF2
53C5040BF957DE781BFD2649856A22B81BAB60DE0851507882D2678BCCF4FB73
FA11E61E10F9FDE35F239CEBF1BA14BA289F2351A51B0529E375EDA96C3901BF
06DF76F1DF130B9C42F8C080B5241230FBA0F56D04C3DEED8F2B384970176DCF
F7B73356B0D69453B4B4B22EA1DCE13756B7E36E6D00D130EC17FD408B948E6F
6DADB60E1BC224E21D91FA057FD171AA> |-
/w <1C60D8A8C9B6079F1534F6C9E4A028DF1A3B0F45C5ED9660DAC93A0D8C3F
14212FFFC33A5BF9F9DD1C33FCCFCA8E96FE6463AF5069DBFBDDA36D99F88520
652F25FDAFA9A8FF2873E3FDAD8A56EC3357F44ECB370CA4BFB8352215DEAFC2
2A0DFA018C56F834AADBF74CAA36536863C75BD9D7A1CEF77767FBD18809BFE6
294ECFE5D3634C7FCBBBF987220663EF315339F3D9AF5AA5B0F66F6EA972A5EE
22BB54794478F89EC6375B180C36468ADC7E7CAF0A17CB4A0ECCE19DAEAC46AD
A738E6EE5AB37B1A9CDCACA6A56A4B556E8FC78C8021B1E08F770EC97987838B
DF3A71E528C5695396142E79124F182E83C76D32BCA38AD1CB77748E00880A04
9F1E82A6C5E7A5A7404A74F28E09F8202A196F8E9F69EAA58A4A3555B55F> |-
/y <1C60D8A8C9B78C66EF659E90818F97757EE825CF655AFC48477B2EBD1F44
99DC02D3D00D2C79F15A6A14FA0E2836DE647DF694EA1CBE5D7DC52383058018
A4A5582F22DA6D7CA5C65B837F7ACE7A37D8295111416CC9542C83315A00DCC5
8E29D7A527B2702A3D42A1DF4479D981119205E9B3AA4589ADB8E455F287AEE9
7EF0B05E9F424581B6FBD77BBF4A2F94CB7C67A1D393F0F92A930746CD86812D
0F3B42F48F3482F4A9EA27C315DF77B6F7CF19EE636DE6A48B0C906553399551
18E2A4E2CE041041FB27A226D9B9C797FB178764482B1E4FE17D6316683F2694
7316> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OMJEMS+CMR10 /Encoding get
dup 11 /ff put
dup 12 /fi put
dup 45 /hyphen put
dup 50 /two put
dup 56 /eight put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 107 /k put
dup 113 /q put
dup 119 /w put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/OMJEMS+CMR10*1 
[11{/.notdef}rp /ff /fi 26{/.notdef}rp /quoteright /parenleft /parenright /.notdef 
/plus /comma /hyphen /period /.notdef /zero /one /two 
/.notdef /four /five /six /.notdef /eight /.notdef /colon 
2{/.notdef}rp /equal 3{/.notdef}rp /A 3{/.notdef}rp /E /F /G 
/.notdef /I /J 2{/.notdef}rp /M /N /.notdef /P 
/.notdef /R /S /T 2{/.notdef}rp /W 3{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
OMJEMS+CMR10 nf
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.944 247.539 mo
(ThefactthattheEMdistanceiscontinuousanddi\013erentiablea.e.meansthat)
[7.19498 5.53525 7.81464 3.0446 4.98129 4.42735 7.26175 3.87447 5.53525 4.98131 7.2717 3.87447 
5.53525 7.81464 6.78056 12.52 5.53525 2.76762 3.9292 3.87445 4.98129 5.53525 4.42737 7.81464 
2.76764 7.31647 4.42734 4.98129 5.26627 3.87445 2.76761 5.25632 5.53525 4.98132 5.53522 7.3165 
4.98129 5.53525 8.92255 5.53525 2.76764 5.81116 4.42734 3.90228 4.42734 5.25629 3.87448 2.76761 
4.98132 5.53525 2.76761 7.81464 4.98132 2.76761 4.42737 7.40024 8.30179 4.42737 4.98129 5.53525 
7.32642 3.87448 5.53525 4.98129 0 ]xsh
126 259.494 mo
(wecan\(andshould\)trainthecritictilloptimality.Theargumentissimple,the)
[6.91602 8.53195 4.42734 4.98131 9.62988 3.87447 4.98129 5.53525 9.63985 3.92918 5.53525 4.98131 
5.53525 2.76762 5.53525 7.9691 3.87447 3.90228 4.98129 2.76764 9.63983 3.87445 5.53526 8.53194 
4.42734 3.90228 2.76764 3.8645 2.76761 8.53195 3.87445 2.76764 2.76764 6.87219 4.98132 5.53525 
3.87445 2.76764 8.30179 4.98132 2.76764 2.76761 3.59549 4.42145 9.54218 7.19501 5.53522 8.52197 
4.98132 3.90225 4.98132 5.53525 8.30182 4.42734 5.25629 7.97906 2.76764 8.03378 3.9292 2.76761 
8.30179 5.53525 2.76764 4.42734 7.06152 3.87445 5.53525 0 ]xsh
126 271.449 mo
(morewetrainthecritic,themorereliablegradientoftheWassersteinweget,which)
[8.30182 4.98129 3.90228 7.18698 6.92599 7.18698 3.87447 3.90228 4.98131 2.76761 8.29489 3.87448 
5.53525 7.18698 4.42734 3.90228 2.76764 3.87445 2.76764 4.42734 5.64682 3.87445 5.53525 7.18701 
8.30179 4.98132 3.90228 7.18698 3.90228 4.43732 2.75766 2.76764 4.98126 5.53528 2.76764 7.19693 
4.98129 3.90228 4.98132 5.53522 2.76764 4.42737 5.25629 6.63409 4.98132 5.80423 3.87448 5.53522 
7.19696 9.40274 4.98129 3.92917 3.9292 4.42734 3.90228 3.9292 3.87445 4.43732 2.75766 8.30487 
6.91602 7.18698 4.98132 4.42734 3.87445 5.64685 7.19498 5.53525 2.76761 4.14841 0 ]xsh
126 283.404 mo
(isactuallyusefulbythefactthatWassersteinisdi\013erentiablealmosteverywhere.)
[2.76762 7.5755 4.98131 4.42734 3.87447 5.53525 4.98131 2.76762 2.76762 8.91455 5.53525 3.92918 
4.42735 3.0446 5.53525 6.41394 5.2563 8.90459 3.87447 5.53525 8.08362 3.0446 4.98131 4.42734 
7.52078 3.87445 5.53525 4.98132 7.52075 9.41272 4.98126 3.9292 3.9292 4.42734 3.90228 3.9292 
3.87445 4.42734 2.76764 9.18158 2.76761 7.58548 5.53522 2.76764 5.81116 4.42737 3.90228 4.42734 
5.25632 3.87445 2.76764 4.98129 5.53525 2.76761 8.07367 4.98129 2.76761 8.30182 4.98129 3.9292 
7.52078 4.42734 4.98929 4.42734 3.90228 5.25827 7.19498 5.53525 4.42737 3.90228 4.42734 0 
]xsh
126 295.359 mo
(FortheJS,asthediscriminatorgetsbetterthegradientsgetmorereliablebutthe)
[5.6767 4.98131 7.15009 3.87447 5.53525 7.67516 5.1198 5.53525 6.01544 4.98129 7.177 3.87445 
5.53525 7.67517 5.53525 2.76762 3.92918 4.42737 3.90227 2.76762 8.30182 2.76762 5.53525 4.98131 
3.87445 4.98132 7.15009 4.98129 4.42734 3.87445 7.177 5.81421 4.42737 3.87445 3.87445 4.42737 
7.15009 3.87445 5.53528 7.67514 4.98129 3.90228 4.98132 5.53522 2.76764 4.42737 5.25629 3.87445 
7.18695 4.98132 4.42734 7.12228 8.30179 4.98132 3.90228 7.67514 3.90228 4.42737 2.76761 2.76764 
4.98129 5.53525 2.76764 7.67514 5.53525 5.53525 7.12228 3.87445 5.53525 0 ]xsh
126 307.315 mo
(truegradientis0sincetheJSislocallysaturatedandwegetvanishinggradients,)
[3.87447 3.90228 5.53525 7.96407 4.98131 3.90228 4.98129 5.53526 2.76761 4.42735 5.2563 7.40123 
2.76762 7.46591 8.51802 3.92918 2.76764 5.53525 4.42734 7.96408 3.87445 5.53525 7.95412 5.1198 
9.07196 2.76761 7.46594 2.76761 5.25027 4.42737 4.98132 2.76761 2.76761 8.79498 3.9292 4.98132 
3.87445 5.53525 3.90228 4.98129 3.87445 4.42737 9.07196 4.98132 5.53522 9.06201 6.92599 7.9541 
4.98132 4.42734 7.41119 4.70035 4.98132 5.53525 2.76761 3.9292 5.53525 2.76764 5.53525 8.51801 
4.98129 3.90228 4.98129 5.53525 2.76764 4.42734 5.25629 3.87448 3.92917 0 ]xsh
126 319.27 mo
(ascanbeseeninFigure1ofthispaperandTheorem2.4of[1].InFigure2)
[4.98129 8.76106 4.42734 4.98131 10.3671 5.81419 9.25922 3.9292 4.42734 4.42735 10.3771 2.76762 
10.3671 6.50359 2.76762 4.98131 5.53525 3.90228 9.2592 9.81317 4.98129 7.87643 3.87448 5.53525 
2.76764 8.76105 5.53525 4.98129 5.81421 4.42734 8.73416 4.98129 5.53525 10.3671 7.19495 5.53528 
4.42734 4.98129 3.90228 4.42737 13.1436 4.98132 2.76761 9.81317 4.98129 7.87646 2.76764 4.98129 
2.76764 11.7339 3.5975 10.3671 6.5036 2.76764 4.98129 5.53525 3.90228 9.25922 0 ]xsh
126 331.225 mo
(weshowaproofofconceptofthis,wherewetrainaGANdiscriminatoranda)
[6.91602 8.88063 3.93916 5.52528 4.71231 11.6483 9.43459 5.53525 3.90228 5.26025 4.98129 7.49789 
4.98129 7.49789 4.42734 4.98129 5.53526 4.42735 4.42734 5.53525 8.32776 4.98129 7.50784 3.87448 
5.53522 2.76764 3.9292 7.49988 7.19495 5.53528 4.42734 3.90228 8.88065 6.92596 8.88062 3.87448 
3.90228 4.98129 2.76764 9.98853 9.4346 7.81763 7.47195 11.9252 5.53525 2.76764 3.92917 4.42737 
3.90228 2.76761 8.30182 2.76764 5.53525 4.98129 3.87445 4.98132 8.35553 4.98129 5.53528 9.99847 
0 ]xsh
126 343.18 mo
(WGANcritictilloptimality.Thediscriminatorlearnsveryquicklytodistinguish)
[9.96062 7.81764 7.47195 11.2876 4.42734 3.90228 2.76762 3.87447 2.76762 8.24303 3.87447 2.75766 
2.76762 6.58331 4.98129 5.53525 3.87445 2.76764 8.30182 4.98129 2.76762 2.76762 3.59552 4.43137 
8.66547 7.19501 5.53522 8.24304 5.53528 2.76761 3.9292 4.42734 3.90228 2.76764 8.30182 2.76761 
5.53525 4.98132 3.87445 4.98129 7.71796 2.76761 4.42737 4.98129 3.90228 5.53525 7.73492 4.97931 
4.43732 3.8923 9.07394 5.25827 5.53525 2.76764 4.14841 5.25827 2.76761 9.07394 3.87448 8.79697 
5.53525 2.76764 3.92917 3.87448 2.76761 5.5253 4.98129 5.53525 2.76764 3.92917 0 ]xsh
126 355.135 mo
(betweenfakeandreal,andasexpectedprovidesnoreliablegradientinformation.)
[5.81421 4.42734 3.59552 6.91602 4.42735 4.42735 9.35092 3.0446 4.98129 4.97932 8.24303 4.98131 
5.53525 9.34096 3.90228 4.42735 4.98129 2.76764 6.70284 4.98131 5.53525 9.35092 4.98131 7.73491 
4.42734 5.25827 5.81421 4.42737 4.42731 3.87448 4.42734 9.35092 5.53525 3.90228 4.70236 5.25827 
2.76764 5.53522 4.42737 7.74487 5.53522 8.78705 3.90228 4.42734 2.76761 2.76764 4.98129 5.53525 
2.76764 8.24301 4.98129 3.90228 4.98129 5.53528 2.76761 4.42734 5.25632 7.69012 2.75766 5.53525 
3.04462 4.98129 3.90228 8.30182 4.98129 3.87448 2.76761 4.98129 5.53525 0 ]xsh
126 367.09 mo
(Thecritic,however,can'tsaturate,andconvergestoalinearfunctionthatgives)
[7.19498 5.53525 8.52197 4.42735 3.90228 2.76762 3.87447 2.76762 4.42735 7.06151 5.53525 4.70235 
6.91603 4.42734 4.98929 4.42735 3.90228 7.05154 4.42735 4.98129 5.53525 2.76764 7.97903 3.9292 
4.98129 3.87445 5.53528 3.90228 4.98129 3.87448 4.42731 7.05157 4.98126 5.53528 9.62988 4.42734 
4.98129 5.26624 4.97934 4.42734 3.90228 4.98132 4.42734 8.02383 3.87445 9.07593 9.08588 2.76764 
2.76764 5.53522 4.42737 4.98129 7.99692 3.04459 5.53525 5.53525 4.42737 3.87445 2.76761 4.98132 
9.62985 3.87448 5.53525 4.98129 7.96909 4.98129 2.76764 4.97931 4.42737 0 ]xsh
126 379.046 mo
(remarkablycleangradientseverywhere.Thefactthatweconstraintheweights)
[3.90228 4.42735 8.3018 4.98131 3.90228 4.70036 4.98129 5.53526 2.76762 9.82115 4.42735 2.76761 
4.42737 4.98129 10.0882 4.99127 3.89232 4.98129 5.53525 2.76764 4.42734 5.26627 3.87445 8.4821 
4.42735 4.97931 4.43732 3.89233 5.25827 7.19498 5.53525 4.42734 3.90228 4.43732 10.907 7.19501 
5.53522 8.98029 3.04459 4.98129 4.42737 8.43732 3.87448 5.53525 4.98129 8.4274 6.91602 8.9902 
4.42737 4.98129 5.53525 3.9292 3.87445 3.90228 4.98129 2.76764 10.0882 3.87445 5.53525 8.99023 
6.91602 4.42734 2.76764 4.98129 5.25632 3.87445 0 ]xsh
126 391.001 mo
(limitsthepossiblegrowthofthefunctiontobeatmostlinearindi\013erentpartsof)
[2.76762 2.76762 8.30182 2.76762 3.87447 7.3862 3.87447 5.53525 7.88438 5.81419 4.98131 3.92918 
3.92918 2.76764 5.53525 2.76761 7.88438 4.98131 3.90227 4.70235 7.19498 3.87447 9.00223 4.98131 
6.50162 3.87448 5.53522 7.8844 3.04459 5.53525 5.53528 4.42731 3.87448 2.76761 4.98132 8.99225 
3.87448 8.43832 5.81421 7.88437 4.98129 7.33148 8.30182 4.98132 3.92917 7.33148 2.76761 2.76764 
5.53525 4.42737 4.98129 7.35931 2.76761 8.99228 5.53525 2.76764 5.81116 4.42734 3.90228 4.42734 
5.26627 7.33148 5.53525 4.98132 3.90228 3.87445 7.3862 4.98132 0 ]xsh
126 402.956 mo
(thespace,forcingtheoptimalcritictohavethisbehaviour.)
[3.87447 5.53525 7.74489 3.9292 5.53525 4.98129 4.42735 4.42735 6.09514 3.0446 4.98129 3.90228 
4.42735 2.76762 5.53525 8.29886 3.87445 5.53525 7.7449 4.98129 5.53525 3.87447 2.76762 8.30182 
4.98129 6.09512 4.42737 3.90228 2.76761 3.87448 2.76761 7.7449 3.87445 8.29886 5.53525 4.70233 
4.98932 7.74487 3.87445 5.53528 2.76761 7.24673 5.81421 4.42737 5.53522 4.70236 5.25827 2.76764 
4.98129 5.53525 3.90228 0 ]xsh
140.944 414.911 mo
(Perhapsmoreimportantly,thefactthatwecantrainthecritictilloptimality)
[6.50162 4.42735 3.90228 5.53525 4.98131 5.53525 7.76479 8.30182 4.98129 3.90228 8.26295 2.76762 
8.30182 5.80424 4.98129 3.90228 3.87447 4.98131 5.26625 3.87447 2.76761 4.42143 6.73274 3.87445 
5.53525 8.25299 3.04462 4.98129 4.42734 7.71008 3.87445 5.53525 4.98129 7.71008 6.91602 8.26294 
4.42737 4.98129 9.37085 3.87448 3.89233 4.98126 2.76764 9.37085 3.87445 5.53528 8.26294 4.42734 
3.90228 2.76764 3.87445 2.76764 8.26294 3.87448 2.76761 2.76764 6.59326 4.98129 5.53525 3.87448 
2.76761 8.30185 4.98129 2.76764 2.76761 3.59552 0 ]xsh
126 426.866 mo
(makesitimpossibletocollapsemodeswhenwedo.Thisisduetothefactthatmode)
[8.30182 4.98129 4.97932 4.42735 6.42979 2.76762 6.37508 2.76762 8.30182 5.81419 4.98131 3.92918 
3.92918 2.76764 5.53525 2.76761 6.92798 3.87445 7.47195 4.42735 4.98131 2.76761 2.76764 4.98129 
5.53525 3.9292 6.92795 8.30182 5.26025 5.53525 4.42734 6.42981 7.19501 5.53522 4.42737 8.03586 
6.91602 6.92795 5.53528 4.98126 6.92206 7.19495 5.53528 2.76761 6.42981 2.76761 6.42981 5.53525 
5.5253 6.92795 3.87445 7.48193 3.87445 5.53525 6.92795 3.04462 4.98129 4.42734 6.37509 3.87445 
5.53525 4.98129 6.37509 8.30179 5.25031 5.53525 0 ]xsh
126 438.822 mo
(collapsecomesfromthefactthattheoptimalgeneratorfora)
[4.42735 4.98129 2.76762 2.76762 4.98131 5.53525 3.92918 8.4622 4.42735 4.98129 8.30182 4.42735 
7.96404 3.0446 3.90228 4.98129 12.3367 3.87445 5.53525 8.45226 3.0446 4.98129 4.42735 7.90932 
3.87445 5.53528 4.98126 7.90933 3.87448 5.53522 8.46222 4.98132 5.53522 3.87448 2.76761 8.30182 
4.98132 6.80246 4.98129 4.42737 5.53525 4.42734 3.90228 4.98132 3.87445 4.98129 7.92715 3.04462 
4.98129 7.93713 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: JKWAAA+CMTI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JKWAAA+CMTI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMTI10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 100 /d put
dup 101 /e put
dup 120 /x put
def
/FontBBox {-35 -250 1124 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 665 667 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [68] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/fi <1C60D8A8C9B7E965A5AD39419B7876C5363CBF90649034C2089E99D8938
0C388CCB069A0C050CC11F2D35B9AF6EA8C30312430CB8A6DBB73BE9CFB93AD0
49FDD5FFDD12E13DD9A331B4A554E63629E86B5F9254F5867A275EB262DA2226
37CC87B10C74317D129BE938571658909CE086E67CAC7891D9D6A2C66505D32D
96FC0C4FFDEB84FB11D8F9F2A90A7CC2510F72E0CE8D65A6FBF5C8B9F08C1E7E
7754336AE5E7F25A6D1FF30D5755D4EDEFC87A69C89F079FA734CD5B7F0831D7
65DF83414A3176C9161ECFDC8F540AE30D12B98B6E0F599CE085967C098D4DA8
A4A79976EDBC84DD1FBF1FE4744004D565CC55C026D7A180D36BF819421D59FE
F3B> |-
/d <1C60D8A8C9B7BC12CC2205AD24A1CC8B5FD1BB19116A029DE15674482C4F
1883486F1D93753C1DF1835F8FA82CCA0252ABE0C1066E12A22C0DFF0F1A4877
C4F10003D2BB46BBA6C4AD935D7B4400B6AC9F724D37E3D2FDD3DEF2519D5962
9371CC3ECE789536B4C5001519DD783A398816529F7EBA2C07051D3C6A7BA6FE
559FBE091759EC09C63120E18DA6404CE0EFB882D3ECCD0FAFEAB921A2F94574
56DC5266D2D39C0E6F9EAC1B9048FC6E2D1167262F390AB375478590718D5FEC
D52770B28E5B10E4858D84F4B7DE96D5FFF1ADF771159BF072B2> |-
/e <1C60D8A8C9B74F361570F61A35EA78464894B1DA8CAD69B19C3F676A41A6
475967ED30A297FEB3CD3D7317CB56BD67ED8BE136EDA10CB5745498DECD970D
ECEF1ACA52F9039E01C9F5B386033674FAFA84FBC05E576740F2A615DA4003C8
F6D0D15EE471656895AD1D665316B1B828EEA1C31E22F55730B1C2314980EB> |-
/x <1C60D8A8C9B74CDDEE6E5B190E250D630739AAB227FD894CEF5925FC8E5A
638FDF102871E4A49A822DB402E36CAAA155743CDC80F6485ECB53BED4DC31C5
433B5406CDC273EBCECD6680551483BC1585F60487BEE265636D7BAB2B2EC172
FB7F0344A3F1B24EFC2BE1CCE1ABAB3CA30F89ADE3BA601DC2C9F0A6DA84AC0B
E9F96528444584F20474DCDEBE74E0D9B5BAABDC022560B40747668DAA50C49B
309F10557347E7668187E1E0F82794CA9F9959468FD6760A38C73DBBACB7CD8E
3D8BDEFF7A8C6FAB90E62EC6683AA7A2D6D855A18B6190C6AD4D7398A37DB4D4
9A5F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OMJENA+CMTI10 /JKWAAA+CMTI10 findfont ct_VMDictPut
/OMJENA+CMTI10*1 
[12{/.notdef}rp /fi 87{/.notdef}rp /d /e 18{/.notdef}rp /x 135{/.notdef}rp]
OMJENA+CMTI10 nf
OMJENA+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
403.877 438.822 mo
(\014xed)
[5.60092 4.62161 4.0748 0 ]xsh
OMJEMS+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
428.327 438.822 mo
(discriminator)
[5.53525 2.76764 3.92917 4.42737 3.90228 2.76761 8.30182 2.76761 5.53528 4.98129 3.87445 4.98129 
0 ]xsh
126 450.777 mo
(isasumofdeltasonthepointsthediscriminatorassignsthehighestvalues,as)
[2.76762 8.31273 9.35489 3.92918 5.53526 12.6853 4.98131 7.41818 5.53525 4.42734 2.76764 3.87445 
4.98131 8.31273 4.98129 9.90884 3.87445 5.53525 8.80093 5.81421 4.98129 2.76764 5.25629 3.87445 
8.31274 3.87445 5.53528 8.8009 5.53528 2.76761 3.92917 4.42737 3.90228 2.76764 8.30182 2.76761 
5.53525 4.98129 3.87448 4.98129 8.28583 4.98129 3.9292 3.9292 2.76761 4.98129 5.53528 8.30273 
3.87448 5.53525 8.81088 5.53525 2.76764 4.98129 5.53525 4.42737 3.92917 8.24805 4.71036 4.98129 
2.76761 5.53525 4.42737 3.9292 7.41019 4.98129 0 ]xsh
126 462.732 mo
(observedby[4]andhighlightedin[11].)
[4.98129 5.53526 3.92918 4.42735 3.90228 4.97932 4.42734 8.86276 5.2563 8.57582 2.76762 4.98131 
6.08517 4.98129 5.53525 8.86276 5.53525 2.76764 4.98129 5.53525 2.76762 2.75766 4.98131 5.26625 
3.87447 4.42734 8.85278 2.76764 8.85278 2.76764 4.98132 4.98126 2.76764 0 ]xsh
140.944 474.687 mo
(Inthefollowingsectionwedisplaythepracticalbene\014tsofournewalgorithm,)
[3.59749 9.04208 3.87447 5.53525 7.92422 3.0446 4.98129 2.76762 2.76764 4.71231 7.19496 2.76762 
5.53525 8.47818 3.92918 4.42735 4.42735 3.87447 2.76762 4.98131 9.04208 6.91602 7.9342 5.53522 
2.76764 3.9292 5.53525 2.76761 4.70236 8.76511 3.87445 5.53528 7.93414 5.53528 3.90228 4.98129 
4.42734 3.87445 2.76764 4.42737 4.98126 6.27448 5.80426 4.42734 5.53525 4.42737 5.53522 3.87448 
7.436 4.98132 6.55142 4.98129 5.53525 7.40912 5.5253 4.43729 10.6919 4.98129 2.76761 4.98132 
4.98129 3.90228 2.76761 3.87448 5.53525 8.30182 0 ]xsh
126 486.642 mo
(andweprovideanin-depthcomparisonofitsbehaviourandthatoftraditional)
[4.98129 5.53526 10.0583 6.91602 8.95036 5.53526 3.90228 4.70233 5.25829 2.76762 5.53525 8.95038 
4.98129 10.0583 2.76762 5.53525 3.32051 5.53526 4.42734 5.53525 3.87447 10.0483 4.42735 4.98129 
8.30182 5.53525 4.98132 3.90228 2.76761 3.92917 4.98132 10.0583 4.98129 7.5676 2.76764 3.87445 
8.45224 5.81418 4.42737 5.53525 4.70236 5.25827 2.76761 4.98132 5.53522 8.42532 4.98129 5.53525 
10.0483 3.87445 5.53528 4.98129 8.39749 4.98129 7.56763 3.87445 3.90228 4.98129 5.53528 2.76761 
3.87448 2.76761 4.98129 5.53525 4.98132 0 ]xsh
126 498.597 mo
(GANs.)
[7.81764 7.47194 7.47195 3.92918 0 ]xsh
303.509 578.888 mo
(8)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
