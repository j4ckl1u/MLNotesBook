%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: GAN_Train.pdf
%%Creator: Adobe Acrobat 8.0
%%For: shujliu
%%CreationDate: 2017/3/9, 10:51:08
%%BoundingBox: 0 0 396 261
%%HiResBoundingBox: 0 0 396 261
%%CropBox: 0 0 396 261
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:ModifyDate="2017-03-09T10:50:58+08:00"
   xap:CreateDate="2017-03-09T10:49:40+08:00"
   xap:MetadataDate="2017-03-09T10:50:58+08:00"
   xap:CreatorTool="TeX"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:5d4cfb4e-0fca-4f26-a86d-30930bd3769f"
   xapMM:InstanceID="uuid:5b70d931-6013-4739-b63a-7b93b57ffeb6"
   pdf:Producer="pdfTeX-1.40.12"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -261 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 261 li
396 261 li
396 0 li
cp
clp
[1 0 0 1 -108 0 ]ct
.797 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
108 1.26001 mo
504 1.26001 li
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+NimbusRomNo9L-Medi Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ZLQBAA+NimbusRomNo9L-Medi def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 65 /A put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-168 -341 1000 960} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 461 481 676 696] def
/BlueScale 0.039625 def
/StdHW [33] def
/StdVW [140] def
/StemSnapH [33 44 48 55 66 73] def
/StemSnapV [118 140 148 163 174 178] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/one <1C60D8A8C9B7A73DC57077681168597E507E3B705F4F5FCA3A29C4B4D9
BE99F6D15C4C9B07805825D06989012E5041F1971C6E8E077B7915858DE71E1B
403C1705DD5AD8A94741E94A424439CF190802BA669B55> |-
/A <1C60D8A8C9B6079F1E726295E14B9D3E37B5679DF68031BFBD1BFE066052
926E25CE0977A152243271BE1D747B37EA89DE114D2E292EBCFA5757AB5F0742
8265AD587191DB5983F8ED99B8DB322C097F8AA32C17CF35304218F0C8E5E2CB
9D3370FBC8175B895A9A7BF3FBEB1A81A06888C0AA48BAA23BD6E670F21106> |-
/g <1C60D8A8C9B7A73DB6986B74967860531D5C33FE655CD281C5643C14DD6E
74CB50E9F5CEBF92AB3E2DB23D8D0536338ACC1434BD74DB78E6C8972A56B5EC
A00CAED24519752EC7C275BE9E252326654566806EE44BED5B9C3C15F855C948
AE366CCB698D2FF7464E816DABCA2B9DB7D8F75909CEB8F70AAF3E4633401D87
E86EC0698BC79253BA9A49BC1498FE9CBB60BCC5D06EB4A08004B665B63A67EC
9E690E5E0DF479D3844D0B21B68EBA67DB35C98DDC948E732644238649DBC89B
54633CEF2AA882567C823C6F21331BD4F98556D8FCC8D44F10AAFF9E4FABD558
7810FF14047DFA3E5185E0955F6BD298F8306A17456D921D7D3C75CFFF140087
BB0D9FABAA9F75CEC075AC019AE213A62E888471EE6E4ACF6C4AC9422C554BB4
2C> |-
/h <1C60D8A8C9B7EF3257330F56AA26B3B4D60E1AB698B7732F7E2F8B8B1233
66FD09FD4CF17306DC3C95E7C7F49EAAA224DAF837A0D57E9845075192FEB55A
59F361EE897E2ED04657CEF5BAB80C209F8B454E76E95664E5E92A953BF5D04A
824985B9EC7D7044712DF5643ADD4D8814DFBC9F902E4D275DF69220FC0263A8
8AA2FA89922F> |-
/i <1C60D8A8C9B854D088BE03066611142D35B96CDBC6AC69CE7D90A67E607A
97F6A9B6B875C22F51FD57BA3ACC3AD42FE0C4A0E1D536D46C6FA1792B134074
70AA44206267D45F7C9D5285679ED629FF131156C24DB7D425525CB4E784EDB9
C67C53B4D02F9488FD31A7A26AA8AF73> |-
/l <1C60D8A8C9B854D088BE0307DDE29E2DC8A57E14CCBDD0429C9D43FFDCE5
7C1979D6548F9F5B47CC0F21039A42929DCC89E93721E673DC46552B4818AF30> |-
/m <1C60D8A8C9B6B41C9EF86D4D6709D4B4B598121ABB5312D265CF235A834A
848ACC160F120715B6D9D9DE49A3676340531B82B90738BD6CAE6D52EC61EB6F
4100397B542B30AF3045B69D55E829A9CA2911A2131AEF0E17B862A77C80D00D
1B61DCDDB2FDD8AC1D4F6F1C38001BCEDACD3F5BD3CF61CF3007C39B156EF6E2
E67B4D6514FBC70B978E5F934A5BE1753968182C7F65657D118D3CFD8597FCFF
C0E74EEAA06DDD9859889BDB3E82F10A5B29BD59B729EB58CA91FF4B11BFABD1
8058EFD26FA1217D294C851E56C2F5CC05EF837BC32D4E3ED3> |-
/o <1C60D8A8C9B7A73D33B29FF9A975322B3362DC44B144D77C192E90E503AC
52DEE198FC9B9A0BE397FE5C900774EEEF1E745C0E1E84056DE211BFA2C0DD56
BD867F1CEE2D1CAF0E57E72D77AF929D1611EB127B9A6B678E> |-
/r <1C60D8A8C9B77FE2B2290770D44CC430BF6AF79602E44809DC88D3C54004
27379EAC0B160CEE8AF2E8F72C87C0147E60F09C5282EDD102E5F476C901E4E6
9904CE6DB98CB80ACEE6CA70E710379770254DC0880BBCB5487957E5B0BB4709
CA0E4C60374912AFBC44CC6DACEA916420> |-
/t <1C60D8A8C9B81F2CB2ACA02E0CECC7A7088ABA14D8BB1C717E776D9EDDA4
1B7C69A092B87660DC1D8821ED3D3E1FEA1F5AEA3E07AE0B68C4FA037897D267
0ED7A25F38BD082D632B2C2A93BC6E0C80> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZWW+NimbusRomNo9L-Medi /ZLQBAA+NimbusRomNo9L-Medi findfont ct_VMDictPut
/KQVZWW+NimbusRomNo9L-Medi*1 
[49{/.notdef}rp /one 15{/.notdef}rp /A 37{/.notdef}rp /g /h /i 
2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef 
/t 139{/.notdef}rp]
KQVZWW+NimbusRomNo9L-Medi nf
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 10.516 mo
(Algorithm1)
[7.193 2.7696 4.9813 4.9813 4.4234 2.76959 3.31747 5.5392 11.5964 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VFJBAA+NimbusRomNo9L-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 77 /M put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-168 -281 1000 924} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/BlueScale 0.039625 def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38 43 53 60 73] def
/StemSnapV [78 85 91 103 109 115] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
27 dict dup begin
/comma <1C60D8A8C9B8707CA2FD797333ADE4A97DDAD77B582F5CBD0659CEC2
54CCAA47E940636A08F827925CD9A1666856A55DD075D3D80919EBA1DBDA0C08
A49DC0170BF91775E03F0E3F84EA866F24DB4E0E5C25C184B2DD7B> |-
/period <1C60D8A8C9B8707CABCFCFB7572BA26C4F342CB44977C4D272DE413
3DB5EF66FB5CBCC13D7> |-
/M <1C60D8A8C9B59F859BE0FB9A2A0F7654C6EDCAEDEE9F7FF9D3DB18954F7E
3A836D4F49588823AA3E0BA32781764B19BC402CF82F4E9C5FD476EEEA839B5A
36B407165C4F7ECC6BF68EFFCD7256A6194F4F444DA2C3D477E30DE627473946
676FD66FFE635B9837F63138E4D5B2CF03795A7A7CDACF770C823E2C6B8522> |-
/T <1C60D8A8C9B7D8BE6A419732DB5F024C0509628A5C1F3C8AEF4E7D00CBC1
830EA50E7630715A3443152766048C069B0A4C72A78E94AB6D91F59E64DF9B5E
3A2935C3883FA28660A00DBD8C0553BBB6DF7158E8BBDF61D18A> |-
/W <1C60D8A8C9B5D6EF35A61E5C76A324B31A56F3B1CFE26126626F91A2A4BA
CB1AFAA605E0E99F36A77DB54F2E6AD346FFEBAF72E8228330EFB65AAE1194D5
7BEB271028701B01DDDAD430D9B1C5E6D2484E89D44C9AF9F0018889671FF0D3
BE9234ABC3DA9D8C8004B7B21325045A51F5AA0FE20F5CDACE9D24E8264E834A
6CC230947F02E113668F0DEC36085CC5DE7FE47E19E6F994D361F781D02378A2
2F044298> |-
/a <1C60D8A8C9B77FE2B8A4D22D65455054518A9081A02F6171B4D6753717B5
C4BCFBE68C976641B0DA567300A37FD1F7BE0E53E951AF39FE7187820E58AB7E
16899451090BE178FB9A491AFEF8E37FF1C5BDD8D0256C28A39196FBCF43F894
58E78497ED2727A4DE9FADAB50CC878B363C604914D69E8722C78AB472A690DE
86045D5F8F45A8F711931993BC8981E4EC5F1265B4496A3A3138E85E75C304A4
1129F5747FC321FC219DE10F0876B8AE64C30F976EE673CA77E26C723368D2A5
BAFCD92094CBCB0C1DAAAB41901C661D72AF00> |-
/b <1C60D8A8C9B7A73DCF483CC3D064C5D3508B11AE282C299523D8D2A309C1
7B70A170029C0F65CF90DD2BE591B98673683525C4890D287920F2AE4A535CEF
E47857E6491D69196894FC8103DF0EDDDC2D4539CDA22F565FDFB14A75B6689D
6F3BBF9428A6B06753AEFCDF61504E25> |-
/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD7913AEB5D830EAFE
778D8CA9FE61C9F1D7F341AAC32F9CA6E189A5065ADF2D5F773BF6F8A8426463
FFD760FDD2A3FB2FF93A8F0D901F4D79430D0C49AB088DDE46CA955357CE80E9
61F17603291AD5A9BCF763> |-
/d <1C60D8A8C9B7A73DCF5C5F318A67A421CF99702516EE66DD46F0A19A39CD
2B5B742B889350B6027EFEDA3412AF17D7447FE125ED85A03529B863375064C8
442F844291318DB0203469A078E9359BCEB35DF8F23C36890A37B169F260AC05
C273B3B8D223D18F700437592FBE0590BD27CA2E484106160C2D3CA8D60D3B12
6EF2BAA957015ACD17B66CCB4B5794278CE2D6> |-
/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB4598F87C338598C4F359D15
4701105B91D71789866B8BBDD17C51AE2B80B6E9F47C5014A178B7C760E089E4
D6B50937639285A177B2DF2F9CD9B293DCADC3AA4DBEC7EDEC1EDE937DA59145
B9D8A5509D89ABB6F024A66CDE0F535E3C7B64> |-
/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF
77C72C9CD398FF8891FD585C23641F8AE8F6E3020ADECFAC4A393E9FF54C49FA
B5A21E2F4C1179F83C25D9862068548F63557CBD68840FA2E638617AF24BDFC9
D81568C2C6E1A315E20924BB4D9FEEC5799B976A> |-
/g <1C60D8A8C9B7A73DB582976F788935A228E33A2F9BA837718EB44913857B
7DF2B08937FF3593A626EDE6CCF55DB88F671B0ACF0E0BF6EDE603335F61508C
BD99213F6A996E978EE78EC5AD0C1CE4169AAF8ED27DA5119BB90C33C9447085
BA17B797E462B8F0977A661167FBA44D02B1BE8517861232196A81989A462F7F
2FCF08A5E9EBA1DAEB8CCBF341DCDE2423F1236D5142A49C668E169F9EAF2F25
102C1FB112EB576652F83324C585B8F161182918C8C79BC3194BCD6500A04D2D
22D177CFDF96C8E4C849F7239608F6F7453202FB5504E13F8033A5FE2FB7EA35
06AF00C9E3C825E1554EE013BCEAF50C41410225B6E0A012AC7F7FF737456D43
38> |-
/h <1C60D8A8C9B7A73DC549024A8346FE9FE9D7E1CFA5F3A3542DDBE4C5A916
A5024A59CE0EA5149D6EA79ED65490BEFEF9C3C348201E7A69F357C223E56920
09826F3A927DADAF422165EC130205D6C94EDE841416A6709F1685CEE6DEF083
AF9B4CF1705AC60AB37B96773E8FE945D56F9115B299614B0DC15F528F328117
D5F2914E00B04A31> |-
/i <1C60D8A8C9B854D08887A9543335390AEE4DB40199897ABD16F19F24E0DE
858E4CD6E00B26B1829973C0FE01CFA3E329A9D0E2AFEC96CBC670DB940EEA7C
A262004364C378CC527E7F0DFBFD9ADBA6EF6E2301F19CF6860BAC9BB8A50A02
F9217A15FCE88184A4DF0C717E46391573826F599D2DFE27F4F9D82251BA41CC> |-
/l <1C60D8A8C9B854D08887A941088E15019368529A0C411CDB31B6270BDB21
E6F24215DA6EAB48951C8DAFF38285C17967F3E2D31A5645B4CB7848E783EC24
2D0750B83BCD4D9A2F> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC36CFC8347F
8B8E738CF4CF4D1809A80A85D86BFA110670A045293350272C5F45FB77C527D1
F2930D0378ADEDC7688C13D3561051EFE72DCA1312160E6190220B69FF2CC393
85ADB7B9FA12F1BEBDBD9D878BFF3BD03685B77D07FB95D12B8B813430FA3185
D7AFA5CE12372E2F5699928B2C0F3AE08B114EAE456B389E7295ED8892CA8D2A
68CBEB3EF1E32DB99917A5DF402A16D8590243BEA627189E26BE24948A498003
EC603B5D13E615> |-
/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C630F986F2AB3ECE6D2
578D5DEC50402B578B4E6CE0632E8947CBBCEB7543031081448F167C88EBA303
B4D2C70599E4B2DBCDA2B9DA37C571B7CFFA556EE2B6CDE54270E5EAA3F80E68
09540E2D41E62BFC6D0AC69B3E0C88DD3AF2AA5C4EA7ABFC511536F434A8C9EA
34BFE186> |-
/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34D2E8E7AB07F99
F61992CA50ADD51C5A93B4B134C15D36CEC8323CBBE9C0D3A63155E9EC74B781
308A5B21C88AA604D5E026CDBDC830C30107F5FE4F678EF57725AF37DE4B> |-
/p <1C60D8A8C9B7A73DB58119388AD28C6EB26113B395FAEB5BB1A92787CC00
CD17996991481186ABE86940E24AB594D9A474B01D5D0752783C6F719E685638
4C42FC6FADE6220E0D5360188934499D6C788FD6225163F3ED610B71BFF6B877
481E0736BEF6EB1112BB14B3A87DE8D1E721238F8F2E426DBC236319E17981A4
C07831306A73D6A3E6AC794689B59CA316CE67D8D4C94BF2EB8F108645A3CF1B
50AB6566123326> |-
/r <1C60D8A8C9B81F2C46F2EFDE84D89C8CA27978F2B1BB49B09209CD1A52AA
0883E159C0BCFCEC840E4AF4AFD0AF12CC05AB7610067AFD32B1652EE398EAF1
DF9DCBDAA912A22D36A52AAB2ABE36110186ED1FE34787D24198929398156D9F
0AC35E6BD99313253DDFFC34D01333EFCC> |-
/s <1C60D8A8C9B7361F0DD2D2259B4AE3E4ACCB44FB8872BFAC621D64E450F5
14624BD4700B917EA1CE8D60019D3B1C42E0F7377CE112D5333D1612736D0EDB
07B34DD4BA1403D44985C1A0543D99F912C9BC9DC7E96430EE2781E418322823
5F9935573E82940F1E761BEFBA74A42BEDBB36268156C77D28FAFCF48800821E
AC277DD0C93425B27A2041FB9E67F885F359D5FF9B96714513F4D2945088A893
D87F8B4D3A6600FAAA0EA12384184218B424A8492A8E97821E10762E83A8B2B1
7B9DE8ED2A20C9152C561D7EAED2> |-
/t <1C60D8A8C9B854D082F829CADA2402D0C363E188624B3DC91E66507A8AF7
69E833E0645176BA592C3DD44ECFC4C7D84DE06A044A230214D945DF321A4D72
94F214FA4A69DDBFFDC37CE6C0694F8A402CC82FE94C2B9274D4DCEAB0696C3D
253D2964904B34E1D9065A46BEE535DCD936F67C56C176C8E7F77F2F60DE69B8
6A560016E73AE51935CC218444D0EB76BA0FFF40D1297093F9> |-
/u <1C60D8A8C9B7A73DB6F2A4B59B2312EBBBE2417FA44F369C1F0ED6D6A369
96AE53A137DB00AA7567A9CEC49CE2737379BD17250255FC7E3093655F665038
8D1064F7AC48308F1DF9CB661A2773CC10559E7C61A5DCDB640FF06049B6ADB9
F9495291BF4F69DA004975E0967945B04D0D1E0AADFA85B338744A9D49B5C34C
0392DD8C9A2D5D0FBF7A81667B636E9E308B1316F61183357C46ADD0B9B8732D> |-
/v <1C60D8A8C9B7A73D3387F33511357F5C470E09351F77CC276AE129494BAE
19BAE0CA39F2A5A776A3E65DC754DA89AD1C5CC64A59E7F0B5EC70F5692EBE0E
0FB9D1DB1A31CC7BBB43C8920E79F728121E780030958DB645DD328A17F8DFF9
82D1DC59D2D6959A7E783D9C1D0AA54F17D353136E> |-
/x <1C60D8A8C9B7A73DC54C6E6F1E1B2347F151B660B24776F2E8D8FE0D08BE
B090A51431058F7336381763833F21F79669FB1758E4A45605BCF730FFBF7CFA
2C722F5A25EBB940FDF2BA7B9B5ACDDB0A61662A5F4610A72EC6495E2E42CD0D
A0ABD967E5F1DD106B1FD129929FE9D5A5F6068F5AC837D5D03F8F6EF1AB141A
71105EC102F68544C432C4D0444E5DAB600D38EB3AE2F6AF3A06CD69455C91A5
6BBAB338293B6D0E> |-
/y <1C60D8A8C9B7A73DB5828C8EB6692FACE27F93F009F946C390116926A043
617DCF82B76B3921AD1CAB060694C724481443C88DCE9CCDBD4C5105E503E45C
67DC21FA0E146B65B0F0EA2429259DEF9F5CD456C1B4E1A4CBC49AFDCA5F37B1
AD742660BF135BF9BE1A2789C070C0A4FB4767FBA0411908E30D692396427C73
1EB9FE493ECBA19FDDC5F0C50E54D346D5DA656C79E40808BBE549> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu /VFJBAA+NimbusRomNo9L-Regu findfont ct_VMDictPut
/KQVZWX+NimbusRomNo9L-Regu*1 
[44{/.notdef}rp /comma /.notdef /period 30{/.notdef}rp /M 6{/.notdef}rp /T 
2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/.notdef /x /y 134{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [8.9664 0 0 -8.9664 0 0 ]msf
163.847 10.516 mo
(Minibatchstochasticgradientdescenttrainingofgenerativeadversarialnets.Thenumberof)
[7.97119 2.49266 4.4832 2.49266 4.4832 3.98108 2.49266 3.98108 7.45108 3.48801 2.49265 4.48322 
3.98108 4.4832 3.98108 3.48799 2.49268 2.49265 6.94897 4.48318 2.98575 3.98108 4.48322 2.49265 
3.98108 4.48322 5.45157 4.48318 3.98111 3.48798 3.98108 3.98108 4.48322 5.46054 2.49265 2.98578 
3.98108 2.49265 4.48318 2.49268 4.48322 7.45105 4.48322 5.95361 4.48318 3.98111 4.48318 3.98108 
2.98575 3.98108 2.49268 2.26849 4.34869 6.94897 3.98108 4.48322 4.34869 3.98108 2.98575 3.48801 
3.98108 2.98572 2.49268 3.98108 5.4516 4.48315 3.98108 2.49268 3.48798 7.20007 5.47833 4.48322 
6.94897 4.48322 4.48322 6.97583 4.48322 3.98108 5.95361 4.48322 0 ]xsh
108 20.478 mo
(stepstoapplytothediscriminator,)
[3.488 2.49265 3.98109 4.4832 6.06135 2.49266 7.05656 3.98108 4.4832 4.4832 2.49266 7.05656 
2.49265 7.05656 2.49266 4.4832 6.55444 4.4832 2.49265 3.48801 3.98108 2.98575 2.49266 6.97586 
2.49266 4.48318 3.98109 2.49266 4.4832 2.62709 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: SIUBAA+CMMI9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /SIUBAA+CMMI9 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI9.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 107 /k put
def
/UniqueID 5087384 def
/FontBBox {-29 -250 1075 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 464 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [74] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/k <1C60D8A8C9B784FA18A2E03B4C593B2CD6372AF93EAFBDFBC8D683148CD7
77338E5AC816A0EDCAFC47EC422AF864BA7E528B5B6D2438A88D82F632BED2CD
B9D1720A4FEBEA1F2D5D139039C40918BC59D296138A65C3807E6CD8FB36E3DE
14F79FAB3B506C45B29C383971CCA67AC630B548416793565F679AFB43FB12CF
7F70B63308E169EBEEA0EE7ABA81EE93A6CE903EB0AFA71A29E67051809064BC
D8E98341E214AC8E869F3701403E00561859DC2881A4FA37BBF2D3DCE92573EF
8CD9D195DCD72A94A182EA08C72B18D1174AA73E7E07BD2F7DA06A22B951CC42
FB42B4C4907A000BEFCC103A50C7A09D88CF359C3D098C3CF020B0C1A4> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZWY+CMMI9 /SIUBAA+CMMI9 findfont ct_VMDictPut
/KQVZWY+CMMI9*1 
[107{/.notdef}rp /k 148{/.notdef}rp]
KQVZWY+CMMI9 nf
KQVZWY+CMMI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
235.983 20.478 mo
(k)sh
KQVZWX+NimbusRomNo9L-Regu*1 [8.9664 0 0 -8.9664 0 0 ]msf
241.044 20.478 mo
(,isahyperparameter.Weused)
[4.89566 2.49265 6.06136 6.55446 4.43835 4.48318 4.48322 3.98108 2.98575 4.48318 3.98111 2.98575 
3.98108 6.97586 3.98108 2.49265 3.98108 2.49261 6.01642 7.74698 6.55444 4.48322 3.48801 3.98108 
0 ]xsh
KQVZWY+CMMI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
356.097 20.478 mo
(k)sh
true set_gvm
%ADOBeginSubsetFont: RWSBAA+CMR9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RWSBAA+CMR9 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR9.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 61 /equal put
def
/UniqueID 5000792 def
/FontBBox {-39 -250 1036 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [74] def
/StemSnapH [25 31] def
/StemSnapV [74 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B7BA8F69303CD9C80FF2274973BC03A8D387005951395982
5C131C762E439E0B57593BF233868669CAB4BBAEDD6C9305EFDD005B0808D21D
94B0A8D020D637371831C289D32EE57BD345D33A2ED31633AC6FA562EF5C81F6
6955BF85FFB89E05AAA766678E050D> |-
/equal <1C60D8A8C9B6D24F73516018B2F9E4A67127E3EBB9B2E7EAF00DD578
5B37C5E2E3B4780B560F46BC9F869A4CE4E9E40D814801D099E8EBFE01D90973
5A96054888CBBCD4A5D3E1F02133A98D04D4F8> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZWZ+CMR9 /RWSBAA+CMR9 findfont ct_VMDictPut
/KQVZWZ+CMR9*1 
[49{/.notdef}rp /one 11{/.notdef}rp /equal 194{/.notdef}rp]
KQVZWZ+CMR9 nf
KQVZWZ+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
364.348 20.478 mo
(=1)
[10.3597 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [8.9664 0 0 -8.9664 0 0 ]msf
379.314 20.478 mo
(,theleastexpensiveoption,inour)
[4.89566 2.49265 4.48322 6.55444 2.49265 3.98108 3.98108 3.48801 5.06601 3.84659 4.48322 4.48318 
3.98108 4.48322 3.48801 2.26849 4.34869 6.55444 4.48322 4.48318 2.49265 2.49268 4.48322 4.48318 
4.89566 2.49265 7.05655 4.48322 4.48322 0 ]xsh
108 30.441 mo
(experiments.)
[3.84659 4.4832 4.4832 3.98108 2.98575 2.49266 6.97586 3.98108 4.4832 2.49266 3.48799 0 
]xsh
.398 lw
108 34.574 mo
504 34.574 li
@
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+NimbusRomNo9L-Medi AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWW+NimbusRomNo9L-Medi dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7EF3243D232E82BE0910CC994C22771842A9ADF622B1D79E3
7DE4B68C19FCEF3730CD11E25E3272E2D5BCD269C67B73F70F41A90007DBE5E5
2CD25DBBED229B9448840D6CD8FC9C629790473304F7C27650B6E8C1752F56C8
3DB6B91FCDE4B804D81851D7DF80C983E503F4B54CFB5219587BA6339570529E
29DE5652FCE8EA96FB54198A92511FE6D7B4D6C21BE10C37FCBC2F> |-
/f <1C60D8A8C9B81F2C46CB7D4B088C9644D850FF2E7D4B535086D0F5438DAF
C761104412F361FE092E9179ED2DF1120475113D9F11FCD502BC52046F3C88BB
DF27941300ABCC14ED64B8A7F615666C615610346A170729FDF8D7C8CDA401C1
95E18403D8B9F0195CD09B663946D17CB518E3599938731873FABFDA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWW+NimbusRomNo9L-Medi /Encoding get
dup 100 /d put
dup 102 /f put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWW+NimbusRomNo9L-Medi*1 
[49{/.notdef}rp /one 15{/.notdef}rp /A 34{/.notdef}rp /d /.notdef /f 
/g /h /i 2{/.notdef}rp /l /m /.notdef /o 
2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
KQVZWW+NimbusRomNo9L-Medi nf
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
117.963 43.63 mo
(for)
[3.06841 4.9813 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWX+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B854D083E206F04B4C3DD188754390434C4FB50EB4672E
AEE8A85520BB1D78CE2A6974387875B94CD46C379E034A7804D304B20C0AC31F
F325F5883A400828> |-
/S <1C60D8A8C9B7EF3225294A5FFA2220B3A70A7F29A870B3BAEE7DFF2B94C6
9EBE02BC5C072804E44299D7CD5195B2B62440E331BF680EB99E90C8D38CE947
04C41DF179991352DDB1E57AF890781C25959AA3B7BFDF862D34BECCC3DC0893
FC4126E7ABEE67256549F5A2A6CFFEB66EFE3C866BD2872F8C1B7A2ABDDA6D8F
5E1298D98292AA28BF3CA599A78D591197DCA6EC3B7EEB172439C64EFD164E42
7DBBBA3E18B9157A9BDD8BAC44A0627E4C08D45A6CE6CCFD19F304834876F210
34F9D8D789834201D1B0F60CFC76F29AFE4E29BC48F795> |-
/U <1C60D8A8C9B6079FE80F64D637F1516D9E8985E20DE1E54990D7E09FF6F7
F806CCE49A90DDF87D67E8B1682A426E98A2CB5AE74C2EB02CDAB73A761D0960
0E57E4986D919E48378EC23E82D2FD189FD8197C33600A4305AFF2F750237481
DBB6D87498C90361FF0E685A3AB0DFA4934DE082373B6FDECB908D9CAFE5371A
B2391636> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWX+NimbusRomNo9L-Regu /Encoding get
dup 58 /colon put
dup 83 /S put
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu*1 
[44{/.notdef}rp /comma /.notdef /period 11{/.notdef}rp /colon 18{/.notdef}rp /M 
5{/.notdef}rp /S /T /U /.notdef /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v /.notdef /x /y 134{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
132.926 43.63 mo
(numberoftrainingiterations)
[4.98129 4.98131 7.7509 4.98129 4.4234 5.80812 4.98131 5.80812 2.76961 3.31746 4.4234 2.76961 
4.98129 2.76959 4.98131 7.47195 2.76961 2.76959 4.4234 3.31747 4.4234 2.76959 2.76959 4.98131 
4.98131 0 ]xsh
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.697 43.63 mo
(do)
[5.5392 0 ]xsh
127.925 54.589 mo
(for)
[3.06841 4.98131 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TDABAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /TDABAA+CMMI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 107 /k put
dup 109 /m put
dup 112 /p put
def
/UniqueID 5087385 def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D
239BCB61DC78D83A8F223F832> |-
/comma <1C60D8A8C9B85744148CA332C8F6F1C9DE6B352F8C512D68BA1E3142
6FC0ECC7A922246EACB7A924151A79EDFB3E3451BD87933C27475FAC0D74CB82
67D592363D57178D8C03E491CE91E57E08820A621E0AED28> |-
/k <1C60D8A8C9B7B3D093A5DA2D78BFACAE4C72C7594317F3A42EF85182F895
CA3E033D344B991059E6DE262A0D0EF1FA3E20AA26AB4B292D9BF643D603EA5C
3D06DF4E7570546A1A8EE39ED1F9F5A809C1905DCB1BFA54D028200ED477CFDA
998E5410725F13C6F8EDB4865D00CEDF6ACAB6AA9087A9E317C6B1DBB17A14A0
BAF86B2C29F738EA411198584BF8E1A452C39542D44ABB2AEF8B60B19725DC9B
C7D59E444E4F473281F016EC7F520868FBF8A90EEFBE8351FF390916C6EC5B16
E92746509F6EF854B3AED591A7663732060D40926B09BC895CFAEA899950EBD1
10FC867C8A0233BCB256D98482923AE7AB23D5D7CE8DC32C67BBC319C9A75BD0
D08B16F0> |-
/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE
1078F4F9FDB6B815479F3F8E4C08C2277611060995694159FCC2D78EC50D6606
F47BAC8A1398DC80C5E684AC883370A5C0C368E90D6EC6CE9F28F4FF49EB4CD9
003CC7F16FD0A458554531F31DF07949099D9F289F893C6C0EA6573FB2150C2F
087255EF81A7EEB3F17E2AAA817353178C1356798885D696ECA769BAF77B7767
3C710522BBDF0D2C2EE2D19E2E6FF3F81BFD0244B25EB4D4D7D82E1EC8E49E10
740271118963D0C05218ACE6C68295346EB12E8E166BADE2CEAD64A82CCCD612
7BF1A62C2509EE150842123EC00626CE2680D411C5A10661C74C5C04837F5760
E283E665B33789D5E578DC0371410F32760EB96A60355BA38A71507B81967F12
8B5C> |-
/p <1C60D8A8C9B7A4C86FCDA79C1DC84C4AFA74132B55E671E0148FC9185DE5
42CF0A71585BAD4258B26C1F3B3A0435613D394A097F890103EEE94F0198A0CD
F1493BEE037CA809F768D3CA31B06FDF414ADF7FA234CF7637A281CCA986F8CE
AB5B42A2FC867A6251E761A919F19974C7EB88903F96C99515F3506473744714
FD2563692FABDC1C76E0234A8313AC9D180FF055E26FDBC469D8CAAED24E9B74
57F0E7EFCCEA81732EB9B703DDA8CAAC602C310EE80FF3918D06614DBDA1B0D3
2DF8DBC97BD211B2B852C2DDD6957319A82C39CB8D70784BE77AAF8132C91742
6C6C53D6268FA19B01C107792DA8B070> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXA+CMMI10 /TDABAA+CMMI10 findfont ct_VMDictPut
/KQVZXA+CMMI10*1 
[58{/.notdef}rp /period /comma 47{/.notdef}rp /k /.notdef /m 2{/.notdef}rp 
/p 143{/.notdef}rp]
KQVZXA+CMMI10 nf
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
142.889 54.589 mo
(k)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
150.88 54.589 mo
(steps)
[3.87553 2.76959 4.4234 4.98129 0 ]xsh
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.295 54.589 mo
(do)
[5.5392 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /KXGAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
dup 102 /braceleft put
dup 103 /braceright put
dup 114 /nabla put
def
/UniqueID 5096651 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917
CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83
D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D
97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133
C46859EF9ACC558D046684C86AF46342> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E50297
25A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E4
8C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D
60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A70
95E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A7429856
03D0073C85F20BAEF47B61A9ECA7243ED> |-
/nabla <1C60D8A8C9B6B41C26EB9418446F514CE5DC8BAA4E40E337D8E0A2FA
274C84F16529821A4F3751C2DDEC087D5300E1335D56B07D7BA2C847FF7B323D
1306C627F2881AFA95C935CCAF498A448BCF857F5ACE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXB+CMSY10 /KXGAAA+CMSY10 findfont ct_VMDictPut
/KQVZXB+CMSY10*1 
[15{/.notdef}rp /bullet 86{/.notdef}rp /braceleft /braceright 10{/.notdef}rp /nabla 141{/.notdef}rp]
KQVZXB+CMSY10 nf
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.888 66.587 mo
(\017)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
145.36 66.587 mo
(Sampleminibatchof)
[5.5392 4.4234 7.7509 4.98129 2.76961 6.91405 7.7509 2.76961 4.98129 2.76961 4.98129 4.4234 
2.76961 4.4234 7.47194 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
230.868 66.587 mo
(m)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
242.106 66.587 mo
(noisesamples)
[4.98129 4.98131 2.76961 3.87552 6.91403 3.87555 4.4234 7.75089 4.98129 2.76962 4.4234 0 
]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
300.218 66.587 mo
(f)sh
true set_gvm
%ADOBeginSubsetFont: JKWAAA+CMMIB10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JKWAAA+CMMIB10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMIB10.) def
/Weight (Bold) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 122 /z put
def
/UniqueID 5087392 def
/FontBBox {-15 -250 1216 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 0 444 452 683 703] def
/OtherBlues [-202 -194] def
/BlueScale 0.04796 def
/StdHW [40] def
/StdVW [113] def
/StemSnapH [36 40] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/x <1C60D8A8C9B64652FD8A409A3FB4B9E122797BC676226C25E0A9E90271BB
1962756B0CA1DC02EFDD5EBE2DB2BDB075930390F0701FED405D9598A875408C
8137EC6E0CBC8FBCC7C2D9BFE8103DA82E6C77E83C19E466226078225FECF8BC
CCC968A7FAB0F09E66521860CC65B02B97D8A4EE13375D629C47393418350F10
A0522B237C3FABB4DC6DF947F6BCE4EACC321F9AB4FA9B72BDBF97269D561E16
80732E7B72AED584FC4D00736625FF08888AA1B624705FB94A788770FE0A1429
136CEA5A810BFC97FB9966F05F1B193BC7582AF9D365369AAF21996B> |-
/z <1C60D8A8C9B790A8353CA1086CDEEA3E52837C9752EEC12CA16104225272
6096F34D3692441EE225E08952ADD151C65754DFA9CEDC6F09AF35F9A2CE4F8F
8A2D1E2B5A7FD0B2598A74B7F4282941FC63481B5918B47F498B028EBA7BFFDB
B8743FB17A7E2D956CFA3503C586027C6F46F5B6184484EA8384591AD2BFF063
A35A3C901D637854FDFD379C638DEAA2385266CC6A62D8428310128F3B8C3D8F
649193075D00E115314271E6B8EBAAD3007E3C6000BE49C69DCB2C611F4ED810
D2F2EC> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXC+CMMIB10 /JKWAAA+CMMIB10 findfont ct_VMDictPut
/KQVZXC+CMMIB10*1 
[120{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]
KQVZXC+CMMIB10 nf
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
305.199 66.587 mo
(z)sh
true set_gvm
%ADOBeginSubsetFont: PKLAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PKLAAA+CMR7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
def
/UniqueID 5000790 def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B77D5F989B950A07335B748C2E59E5D2D6BF1E6051
957DD97CEFF35302EE98FC4B787BCA44229E0EB5B1327789C7E84159A08D8DD6
8C92A07DE5F5A75D5A81EBAB8FA5D1E69836F3FC93F6E29FC5BFCC9DEA3989EC
8EA8AA> |-
/parenright <1C60D8A8C9B77D5F989B950A07335B748CB31A51BDF9FCF02A2
BBCACD13F22BC441A3FF8286B2AF4AFEB0BAC09CB8CFC19F55A315F3EDC1D3B4
CB4181963F3AF6C950ED14D564BDEFFFE139BE1E10473AE6A5D25F9A29D9AC22
23E09CC1DB99271> |-
/one <1C60D8A8C9B7E2CE5B62E9FEEC2E64DB4DF57A0DEE8F2DC4BC1D285E2D
6E93583C8BA769F966BA0D2874BA4F6692804A12EE154BF6C4128EE336963B1B
369FC937E51FD440B01114006718C9CD9EDADE925291DDB3291CFBE83284B576
2DA660F3B8EE1736383DFDEEBA0BD582FD6608113CEA73> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXD+CMR7 /PKLAAA+CMR7 findfont ct_VMDictPut
/KQVZXD+CMR7*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 206{/.notdef}rp]
KQVZXD+CMR7 nf
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
311.149 62.972 mo
(\(1\))
[3.11307 3.97162 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
321.845 66.587 mo
(;:::;)
[4.43137 4.42142 4.4314 4.43137 0 ]xsh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
343.984 66.587 mo
(z)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
349.934 62.972 mo
(\()sh
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RUPBAA+CMMI7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /theta put
dup 103 /g put
dup 109 /m put
def
/UniqueID 5087382 def
/FontBBox {-1 -250 1171 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 441 451 463 683 703] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/theta <1C60D8A8C9B79B8EE03CE6313C19B4E581DCF83D5F607D5F4421ED91
958176EED82510B3BDAE7D6D76A9F5E533C020C3F9FC172076C7C57A8531B738
2E110A735E377E98054E24479369132ADE6634116AC54EE488DD59DCF3DC94BB
6117A6A0C18232F4809BD4BC0F27EFEAF6BF74FF4C35F20E89BE7C4B> |-
/g <1C60D8A8C9B7EE7C15DE88B1CA186814FBE813055F33C5429C37FA282139
C232BDE259D928EEB055B4AC580112DDE873D2FB74E6F04F78A6CC79183F7EFE
AAD2B6894CD644BF3F86B7384E7F7987A586CF5C7C9CF319714F655008849D6B
155AC90EC9694EF30CC91CD10F28C2118C10AD05E589918674DBDCA0D6A345B7
BB90C5F15ED5E2CD22B3F5E31CB5CA319A411D4BCC9C9B776F4A13803D6DBDBB
A51769F7D5F05184B2DB202EC0527CDFA8B5DAE788D8CE93DC6021> |-
/m <1C60D8A8C9B51B15A3B004ABA78A4F02BD45FD7274A9A74A7E48B0CC064D
1921E5F873EDDD9CF9C0E04FB4DDBB5A9DE083B2A06BBAAA363C515090F99E1B
B42E4268DDFDD4B979C34D2B766AEA414FC3301D3900FB6A2581AD984395510A
7DE6E4E94F0B46728CE5D2F992A065A90F6FDC045FF834218D0821D404C67A58
3E6DD4E1C1588B76CFCBAC1F0CF3095FBCE07AB6CB05BD94D14F59C6697D642A
E3F308A8ECEAA8EDA418A19805A2AF109BEDC47DCC3ED47312863C6C89DF3AE5
52650A8DAB19AA4E26F36E02C586851911CC17A2A390CF53B48BB9E3B044F2B7
3887D346B6371E8B3242F85376774A8C36E83543CF398DA6610FF498DF45068C
D5CFA4B320311628C3069E3398E15B2A2F0A889B7AFCD88C192CA83812CBF5C3
1A2E8B2370AC853734ADAF47BADBD0D80D02C1B26A91738B43EBAA89B839> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7 /RUPBAA+CMMI7 findfont ct_VMDictPut
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 84{/.notdef}rp /g 5{/.notdef}rp /m 146{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
353.047 62.972 mo
(m)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
360.117 62.972 mo
(\))sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
363.728 66.587 mo
(g)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
371.2 66.587 mo
(fromnoiseprior)
[3.31747 3.31747 4.98129 10.2415 4.98129 4.98132 2.76959 3.87552 6.91406 4.98129 3.31747 2.76959 
4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
438.437 66.587 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
443.45 68.082 mo
(g)sh
true set_gvm
%ADOBeginSubsetFont: EEKAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /EEKAAA+CMR10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
def
/UniqueID 5000793 def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164
F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02
A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598
A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A
0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF397
16A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB9
9C4AAA689F9E967FCE15709E3204C4D> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
25DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668
D97ECF27E58978E82B8932F2635747B0D240AA> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXF+CMR10 /EEKAAA+CMR10 findfont ct_VMDictPut
/KQVZXF+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 206{/.notdef}rp]
KQVZXF+CMR10 nf
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
448.085 66.587 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
451.959 66.587 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
457.909 66.587 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
461.784 66.587 mo
(.)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.888 79.28 mo
(\017)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
147.207 79.28 mo
(Sampleminibatchof)
[5.5392 4.4234 7.7509 4.98129 2.76961 8.75713 7.7509 2.76961 4.98129 2.76961 4.98131 4.42339 
2.76961 4.4234 9.32498 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
238.258 79.28 mo
(m)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
251.343 79.28 mo
(examples)
[4.27396 4.98131 4.4234 7.75089 4.98129 2.76962 4.4234 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
293.16 79.28 mo
(f)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
298.141 79.28 mo
(x)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
304.707 75.6639 mo
(\(1\))
[3.11307 3.97162 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
315.403 79.28 mo
(;:::;)
[4.43137 4.42142 4.4314 4.43137 0 ]xsh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
337.542 79.28 mo
(x)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
344.108 75.6639 mo
(\()sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
347.221 75.6639 mo
(m)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
354.291 75.6639 mo
(\))sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
357.902 79.28 mo
(g)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
367.222 79.28 mo
(fromdatageneratingdistribution)
[3.31747 3.31747 4.98129 12.0846 4.98129 4.4234 2.76962 8.76709 4.98129 4.4234 4.98129 4.4234 
3.31747 4.4234 2.76959 2.76959 4.98132 9.31503 4.98129 2.76959 3.87555 2.76959 3.31747 2.76959 
4.78204 4.98129 2.76959 2.76962 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.888 90.239 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
142.9 91.733 mo
(data)
[3.48689 3.09637 1.93872 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.017 90.239 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
158.891 90.239 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
165.457 90.239 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
169.331 90.239 mo
(.)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.888 101.198 mo
(\017)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
145.36 101.198 mo
(Updatethediscriminatorbyascendingitsstochasticgradient:)
[7.19299 4.98131 4.98129 4.4234 2.76961 6.91405 2.76959 4.98131 6.91405 4.98129 2.76961 3.87552 
4.4234 3.31746 2.76962 7.75089 2.76961 4.98131 4.42339 2.76961 4.98129 5.80814 4.98129 7.47195 
4.42337 3.87555 4.4234 4.4234 4.98129 4.98129 2.76959 4.98132 7.47192 2.76962 2.76959 6.36618 
3.87552 2.76962 4.98126 4.4234 4.98132 4.4234 3.87552 2.76962 2.76959 6.91403 4.98129 3.31747 
4.4234 4.98129 2.76959 4.4234 4.98132 2.76959 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
207.483 127.777 mo
(r)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
215.785 129.271 mo
(\022)sh
true set_gvm
%ADOBeginSubsetFont: PULBAA+CMMI5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PULBAA+CMMI5 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI5.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 100 /d put
def
/UniqueID 5087380 def
/FontBBox {37 -250 1349 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 464 683 705] def
/OtherBlues [-205 -191] def
/BlueScale 0.044 def
/StdHW [36] def
/StdVW [90] def
/StemSnapH [36 44] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/d <1C60D8A8C9B616A79580CA64911A5D150B104C7697177EE5F0FCC275B002
21E2041DD7AB34598328BF585DCBA81CF7A4EE6D94944A4D28CC7B56A26BEB29
7D730263FD7869F77E420995857DB37638790296E934B220125AA1672500B787
2B3EE195870B937950ACD014EBA88B6673A1371CDEFA15B550A0BC86A20D7571
EA7FFDD2C4546AEDFB7BBA9DA49711CEEF6744064C90017AEC5861369AFC1302
34745FA9F1B34F9FF64C786504FAA5B98F7AF5499EEA360A9968B2032E6B1D2F
13DD08F213D9E2935B38E7002652C1CECF8C93DEF7E7F88F7602CE48D1B7ED65
C9> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXG+CMMI5 /PULBAA+CMMI5 findfont ct_VMDictPut
/KQVZXG+CMMI5*1 
[100{/.notdef}rp /d 155{/.notdef}rp]
KQVZXG+CMMI5 nf
KQVZXG+CMMI5*1 [4.9813 0 0 -4.9813 0 0 ]msf
219.58 130.328 mo
(d)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
227.339 121.037 mo
(1)sh
225.456 125.286 mo
234.203 125.286 li
@
true set_gvm
%ADOBeginSubsetFont: TDABAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6AE362EABFCC784A071A5BFBB37F8594C9C66C9B5F101A139
1E1BFFEB9CB340BC330E7735B4ED88EDF30305384A718B8C0B0FC03C56AD0D5E
22F00BB393AED7626E99A83076ED25FB245BCA4D5C3B95AB82E5A279ED9FC53C
8FC9ED726A5FAC280B286024EE53B479292A3BA181BEBBE8C31ED0CAE7A4F729
9D99B68C95F1887B85C783E7E848773A6FC33D5472D4D4083BAAC563055F> |-
/G <1C60D8A8C9B6C769ACE610B045CAFC9B5980A473DD1FC7D0825A108A30FA
8B6928939249BB86D25CF7F7BC83AA684EADB904385B56983401AB4C03055B07
AD0B04F0195681C3704FF99AEDA7162EA34DA2298893A96EC0968FC82D924057
6EBEB60CDDC4267751368A85189C1D03A7C4168DF79F971555E9FD96763D9E2F
CFD9653E141DDD68CBFCD7799D812FB3F9D0FB7B20A86B7D279C5803E306715D
3B278CA834CBCE10493BCBF6DD47CF720BD5E2A5EF8F561B417B93A5339A1575
6A1DC1FF080401ED565511E48A597549E2B6FD001BED2FB381216F29CED68B48
75634C28A1DAA6EE1F421071E86BA892193138CB6B31060D2ADC36A6CAE37159
8E97> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXA+CMMI10 /Encoding get
dup 68 /D put
dup 71 /G put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXA+CMMI10*1 
[58{/.notdef}rp /period /comma 8{/.notdef}rp /D 2{/.notdef}rp /G 35{/.notdef}rp 
/k /.notdef /m 2{/.notdef}rp /p 143{/.notdef}rp]
KQVZXA+CMMI10 nf
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
225.456 134.611 mo
(m)sh
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXE+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B70721B9F639782C8460B97E82801AD0D8A919DC5D9CAA4C68
FBE7833AC2F83808014E455261AE4698D1787D69206B38071478CB577B72EF41
ED0606485A0805B327A9541BF99C223B853428820C7432E93F64332505182833
A9A1726F67F49595C0D6B4E36728E08E3A3FFE1D3400C0426C9F7D546B609ED9
847726C531FCA5CF35B9B04381F81797F4E937A123F607399D53953A016040EB
4EB08C885D7568DA709FDAC1486D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXE+CMMI7 /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 84{/.notdef}rp /g /.notdef /i 3{/.notdef}rp /m 
146{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
240.72 115.324 mo
(m)sh
true set_gvm
%ADOBeginSubsetFont: GXOBAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /GXOBAA+CMEX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /parenleftBig put
dup 17 /parenrightBig put
dup 88 /summationdisplay put
dup 104 /bracketleftBig put
dup 105 /bracketrightBig put
def
/UniqueID 5092766 def
/FontBBox {-24 -2960 1454 772} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/parenleftBig <1C60D8A8C9B7C63DFF0E30CD5C0327BE74A96BE560BCA961A
CF698878054DA30EF9B4CFB82768D5B4E404EF5732F1FC3DC94BDC5A964687B6
5B9F6B7DE9434850BC3D3E6B08ECDFE191872EBBA1B73992DACEFE7049F8AA21
944213CC29013B92870D3C09D041FA43B95B48671570E9D14CD545E430252F72
9AEFA6FDE84ABAFA9F180FE4E4D5A2E8926ECEF1C4A4805345051> |-
/parenrightBig <1C60D8A8C9B7C63DFF0E30CD5C0327BE74A96B45647443E5
FC8EB13065214475FD67AC6F093420444DE21E02A7D43CD34724383E912A1100
D7235C41C2786EE777C6012158E875F2D1F8601DE81C64B2C6C205BC44B8ABBF
9E6B4737C7A8449536ED331AF57DD51985426AB22DA85CE0C38F8D1A1A18F21C
D9770BD5C7B9BC03E8750B6407139B> |-
/summationdisplay <1C60D8A8C9B08A95197FC21C1744E77FED1D6499B901C
04115566CD2A05BF472A1D10EF4CD07417172414F35FFA68E5FFEE3333B3840C
AD5B5C27DE9B5EFDB4E4D74D071891FE726835B825A146ECE072AD20A381EA08
9F35CD19567562F2AD093C03B0471BA9BCC2CAF6F576049F10AB3C7C97EBE946
5E1779F3B144546BFEE53E4131F258AF0F377996F67F1040B242A55E37D86AE3
9368AC197A4E722> |-
/bracketleftBig <1C60D8A8C9B743839199E0DE55B8B4DC697CB8CD0EC4EF8
E3AAC07A311FDBFB2D8BF177F977A3D61A0D719299B24E363409C0356AD29> |-
/bracketrightBig <1C60D8A8C9B743839199E0DE55B8B4DC697CB8E16E421D
B134C33ED1858FD58E1B8BAA15835E0B0F1C758CE176FBBDD5452F36DC5C15> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXH+CMEX10 /GXOBAA+CMEX10 findfont ct_VMDictPut
/KQVZXH+CMEX10*1 
[16{/.notdef}rp /parenleftBig /parenrightBig 70{/.notdef}rp /summationdisplay 15{/.notdef}rp /bracketleftBig /bracketrightBig 
150{/.notdef}rp]
KQVZXH+CMEX10 nf
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
237.059 118.312 mo
(X)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
237.802 139.531 mo
(i)sh
true set_gvm
%ADOBeginSubsetFont: PKLAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXD+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B593D6D47FD9CC657AEA78BB93B93E797CFD3C2F45E7AE
99BBC72E0746A7E2A1090B9AA11860F7CCC70A62A9356998CC9E481F07FF34F4
8507607194D6BEE374D18623A13CD516823B17> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXD+CMR7 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXD+CMR7*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 11{/.notdef}rp /equal 194{/.notdef}rp]
KQVZXD+CMR7 nf
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
240.62 139.531 mo
(=1)
[6.11601 0 ]xsh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
253.11 116.718 mo
(h)sh
true set_gvm
%ADOBeginSubsetFont: EEKAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXF+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
63CFC67672A34CC74B0AEAADF24229DF1CCAA1488AE3E348FE2ACD572EA487EC
9D77FBB0710AB421B03DD5B8AE5519B5C269E9648E819E7ECE806EEF16A6618D
07D9AAB350E57F26F5259E8FCF9E5C2D96BBEAD16502F9E7819E854042DDB2BC
674C39681CC2E5224219582BC7B59BBAEF869C9DF91CA7770A97BAD53C3C3A99
175BA8F0A5744B5969D3BC15831A95918F7C707E41F5D87B8DB2D57378BC9C29
7DAE69E4BF438246E63F565B22D86CBE28DEF748262FB9FF82A88935451D6280
A28F1AD964E6E476D5779321E42D3A86BE41122F1BED36C3DC47E1E01C225345
98D0431873197ABE1C8EC03B4011E4B26D249635BDBABB8E5B69BE07AFA65F88
EAF6> |-
/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADF
B78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CF
F61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D3
2A> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXF+CMR10 /Encoding get
dup 43 /plus put
dup 103 /g put
dup 108 /l put
dup 111 /o put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXF+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 5{/.notdef}rp /one 53{/.notdef}rp 
/g 4{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]
KQVZXF+CMR10 nf
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
257.815 127.777 mo
(log)
[2.76764 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
272.344 127.777 mo
(D)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
282.529 116.718 mo
(\020)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
288.479 127.777 mo
(x)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
295.045 123.663 mo
(\()sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
298.158 123.663 mo
(i)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
300.977 123.663 mo
(\))sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
304.588 116.718 mo
(\021)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
312.752 127.777 mo
(+log)
[9.96063 2.76761 4.98129 0 ]xsh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
337.243 116.718 mo
(\020)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
343.193 127.777 mo
(1)sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXB+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXB+CMSY10 /Encoding get
dup 32 /minus put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXB+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus 69{/.notdef}rp /braceleft /braceright 10{/.notdef}rp 
/nabla 141{/.notdef}rp]
KQVZXB+CMSY10 nf
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
350.388 127.777 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
360.351 127.777 mo
(D)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
370.536 116.718 mo
(\020)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
376.486 127.777 mo
(G)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
385.98 116.718 mo
(\020)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
391.93 127.777 mo
(z)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
397.88 123.663 mo
(\()sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
400.993 123.663 mo
(i)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
403.812 123.663 mo
(\))sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
407.423 116.718 mo
(\021\021\021i)
[5.94965 5.94965 5.94965 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
431.638 127.777 mo
(:)sh
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+NimbusRomNo9L-Medi AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWW+NimbusRomNo9L-Medi dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B77FE24404D6FC75C46E8B158C7975D79013EBB5DCD53440E2
1332CFC4ECC341E7AFADF9585DB658612EC8ED47CB15CBF662FC73FBEE0045FF
CB1EC723F1B412304D1100168E2128E2060163C1E9CBFAF33B361B5A6E493F9D
F06D41DD478FF2FA297D0668847F9C36D5F5C238CA> |-
/n <1C60D8A8C9B7EF3257330F56C94494157A7EF7FFCBD73F84DDC3CD027CBD
344CBE46734D8DBE3D0D7A5371055EA217764D1E6D19B975A4618DAFF7C83378
2DBB8AD061F2A7084A3861B8353FAB4D938BA793AC098E1E390E341D00898940
4E3478333E6F04C8A2256EF7F64BCEACA7195CAB26AF2CF435195B53F578CD79
712EFFD6BC467431370A461A8086A2496F058336> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWW+NimbusRomNo9L-Medi /Encoding get
dup 101 /e put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWW+NimbusRomNo9L-Medi*1 
[49{/.notdef}rp /one 15{/.notdef}rp /A 34{/.notdef}rp /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
KQVZWW+NimbusRomNo9L-Medi nf
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
127.925 155.362 mo
(endfor)
[4.4234 5.5392 8.02985 3.06841 4.98131 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
127.925 166.321 mo
(\017)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
135.397 166.321 mo
(Sampleminibatchof)
[5.5392 4.4234 7.7509 4.98131 2.76959 6.91405 7.7509 2.76961 4.98129 2.76961 4.98129 4.4234 
2.76959 4.4234 7.47195 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
220.906 166.321 mo
(m)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
232.144 166.321 mo
(noisesamples)
[4.98129 4.98131 2.76961 3.87552 6.91405 3.87552 4.4234 7.75092 4.98129 2.76959 4.4234 0 
]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.255 166.321 mo
(f)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
295.236 166.321 mo
(z)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
301.186 162.706 mo
(\(1\))
[3.11307 3.97162 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.882 166.321 mo
(;:::;)
[4.43137 4.42142 4.4314 4.43137 0 ]xsh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
334.021 166.321 mo
(z)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
339.971 162.706 mo
(\()sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
343.084 162.706 mo
(m)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
350.154 162.706 mo
(\))sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
353.765 166.321 mo
(g)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
361.237 166.321 mo
(fromnoiseprior)
[3.31747 3.31747 4.98129 10.2415 4.98129 4.98132 2.76959 3.87552 6.91406 4.98129 3.31747 2.76959 
4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
428.475 166.321 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
433.487 167.815 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
438.122 166.321 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
441.997 166.321 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
447.946 166.321 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
451.821 166.321 mo
(.)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
127.925 177.28 mo
(\017)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
135.397 177.28 mo
(Updatethegeneratorbydescendingitsstochasticgradient:)
[7.19299 4.98131 4.98129 4.4234 2.76961 6.91405 2.76959 4.98131 6.91405 4.98129 4.4234 4.98129 
4.4234 3.31747 4.4234 2.76959 4.98129 5.80814 4.98129 7.47195 4.98129 4.4234 3.87552 4.4234 
4.4234 4.98129 4.98129 2.76962 4.98129 7.47195 2.76959 2.76962 6.36615 3.87555 2.76959 4.98129 
4.4234 4.98129 4.4234 3.87555 2.76959 2.76959 6.91406 4.98126 3.3175 4.4234 4.98126 2.76962 
4.4234 4.98129 2.76959 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.664 203.859 mo
(r)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
247.966 205.353 mo
(\022)sh
true set_gvm
%ADOBeginSubsetFont: PULBAA+CMMI5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXG+CMMI5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B6317D7B2657B526ED4C7D9446F95605E63E66B6FB639A0520
56F5138056D79DFCBFD34131A791E5ECB54F23D56DA3B6237D8E65B891519648
4C2356B9DF02EFE6BAA80A39484A47A4EAB1452B1E9FD0023AEA87EAECB8FA09
E80645C877FAEF292C36303E9E9F4C77DCFB61EFD6D38FEC19A9B4CC1B0C1B11
77AB7BCE2DE374C114C1A07BB6398EB57604A62499CD4E22AD5A94E9DC4AE3DD
B9541AA6AE0B66A3693599559CE2420A3409C9D9DA59023248E84E9AD5E1BEF4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXG+CMMI5 /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXG+CMMI5*1 
[100{/.notdef}rp /d 2{/.notdef}rp /g 152{/.notdef}rp]
KQVZXG+CMMI5 nf
KQVZXG+CMMI5*1 [4.9813 0 0 -4.9813 0 0 ]msf
251.761 206.35 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
259.504 197.119 mo
(1)sh
257.621 201.368 mo
266.368 201.368 li
@
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
257.621 210.693 mo
(m)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
272.885 191.406 mo
(m)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
269.224 194.394 mo
(X)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
269.967 215.614 mo
(i)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
272.785 215.614 mo
(=1)
[6.11603 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.275 203.859 mo
(log)
[2.76764 4.98129 0 ]xsh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
299.804 192.8 mo
(\020)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
305.754 203.859 mo
(1)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
312.949 203.859 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
322.912 203.859 mo
(D)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
333.097 192.8 mo
(\020)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.047 203.859 mo
(G)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
348.541 192.8 mo
(\020)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
354.491 203.859 mo
(z)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
360.44 199.746 mo
(\()sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
363.554 199.746 mo
(i)sh
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
366.372 199.746 mo
(\))sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
369.984 192.8 mo
(\021\021\021)
[5.94965 5.94965 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
389.494 203.859 mo
(:)sh
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
117.963 231.444 mo
(endfor)
[4.42339 5.53921 8.02985 3.06841 4.98131 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWX+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CF
D85> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWX+NimbusRomNo9L-Regu /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu*1 
[44{/.notdef}rp /comma /hyphen /period 11{/.notdef}rp /colon 18{/.notdef}rp /M 
5{/.notdef}rp /S /T /U /.notdef /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v /.notdef /x /y 134{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
117.963 242.403 mo
(Thegradient-basedupdatescanuseanystandardgradient-basedlearningrule.Weusedmomen-)
[6.08707 4.9813 7.06349 4.98129 3.31747 4.42339 4.98131 2.76959 4.4234 4.98131 2.76959 3.31747 
4.98131 4.42339 3.87553 4.4234 7.62138 4.98131 4.98129 4.98129 4.4234 2.76959 4.4234 6.51563 
4.4234 4.4234 7.62138 4.98129 3.87553 7.06351 4.42337 4.83188 7.6214 3.87549 2.76962 4.42337 
4.98132 4.98129 4.4234 3.31747 7.6214 4.98126 3.3175 4.4234 4.98126 2.76962 4.4234 4.98129 
2.76959 3.3175 4.98126 4.4234 3.87555 4.4234 7.62137 2.76959 4.4234 4.4234 3.31747 4.98129 
2.76959 4.98132 7.62137 3.31747 4.98129 2.76962 4.42337 6.03735 8.6077 7.06348 4.98129 3.87555 
4.42337 7.6214 7.75089 4.98132 7.75089 4.4234 4.98129 0 ]xsh
117.963 253.362 mo
(tuminourexperiments.)
[2.7696 4.9813 10.2415 2.76961 7.47195 4.98129 4.98131 5.80812 4.27396 4.98129 4.98131 4.42339 
3.31747 2.76961 7.7509 4.4234 4.98129 2.76961 3.87553 0 ]xsh
108 259.703 mo
504 259.703 li
@
true set_gvm
%ADOBeginSubsetFont: ZLQBAA+NimbusRomNo9L-Medi AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWW+NimbusRomNo9L-Medi dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707C5568E087A7013AEDEAB4E43FD5B4AD668B70E3E
CD4C9D9B81940C416ED75> |-
/four <1C60D8A8C9B7A73DC54C6E606542DA2B13B475FF574CC2CC0CFC629B4
15D90565E7EF74AD7E2366209B4992519ED444FB7C263B7BF8CE0BCF629F8B7C
614E3DE9A361BAE93E1BE37C6116F5575B0C2C042DF037187CAF08F9EB5CEF2F
D12AFB330012CD0F2AE62EAE178292BA4AC449A48A47AAF8124BB> |-
/G <1C60D8A8C9B6FF867A6C34F63CFBA49D0BF476471BE33CE5599E66840CFC
0D703649CFA3CF6E434BDF4AD1B29AE455C49BFD2D8EFEB43A435A49D9F3B119
54EC9195F3DB84DEC205CBBB33987EE8FC871D177C0A839261720AFD2571516F
C0C719E3B34798781D3AEFF6B0BF947D8CE0F75BE5F1E1C5D4CC270ABFC606CF
EB545FA12A92D8A4BB30E880FFA5DBC8EAA63DD608E667C4C5> |-
/O <1C60D8A8C9B6FF867A6C34F63CFBA483F20348D2DAD0C454E2872F1EFB83
B828C0BBAF767F3EF27D6397A2DEF68C9F347FD90275688C783EA11450BD3115
A537ED51F320BE134232B37E819BD3E39A17B19174C37C49F8C74729C0F7F969
090CA0774FFE469E38> |-
/P <1C60D8A8C9B7D8BE18D5D66A87CFFD1A7BF8CC4E0780AABA6495BC6AFC3D
DEB143438D4C1D9E5741A147EA9F06E240708A25754D91340662AA255C2B4E05
8E434BC187D37A0778EF3B4D2D5852798647A8B6C151319A56F0EAF863926AC6
DBCFC58026C6FDB20C34288D03C5FF921485DEE654376A07857D9EC3297059BB
470CC19143A2BF892120648DAF8DB6374D48A42C9C6B0582F45F7555B5> |-
/a <1C60D8A8C9B7A73D3387F3351E8E18AD4C337D189ACB524452C5C76175D3
6A9B9EE21E61CCD032B72EA732DAB08D223F8476F8158A75DD87D53D4754BF58
8F21BBDD0B9BD8A57E8132EB5982C81AEFE1FC21DC7FEF21759B1DDD64FEC1B0
1D76B223BFE0C623B317990FF3F82C513CCA8FA63FF271DA495502242C53CA27
EA3287B2BBFC3217711C1DDF95ED56603997D39682906E04AF748FD5C8E52443
0A90FD84624F869BD880BCBADE562C810BE2A83CC20CB51E6D0CA2C7008633C4
06518E> |-
/b <1C60D8A8C9B7EF32A197526A4B04A18ABDFB17B506314FEBCC967D58D37A
1BAE1D70D51387A69E33A3528C1E4C46131DD0F716CB9CD5D029861C055A88A4
7591CB3E3F2D0AE589CD946E2F4EFB67DDEE0D1973635635E163477753314CA0
CA2593426D2EDAC290CA8BDEDC3D96B7> |-
/p <1C60D8A8C9B7EF3227BDC2DEF081752ABC87234A787BA60BDC47984CB411
ED63EC5E4B6D9478A33F088C2CF316BB52BFDB2FED861B15237D1ED95B6588FF
AAF4CF1D5D5601B80B411956DD9A8EE126B5735EB8A2084BC88DF8086F350B74
E28D821E583543F692E28901FD341BDD4D823558AE3235E81A295B5EFBE1B545
992A1C7B5623EEB3F1D3B33C87E44AE813DE4EF7B2CC460C88EC70DF784AA774
F4201DD8AE370C53518363BFDEE9C94F8DB93BA9732F9E3008C774076C08C665
4E3E> |-
/s <1C60D8A8C9B7361F88137B0B3B9E3BE8575A6F0132A8AB9BC21CCB7EEA59
D7C1838FEEC96953798936A0666A27E1BC45EA9D786F997994F74D34DE4AFF12
ED9FE990CE76057A0B0440124651A1447CC3EB65F8E5DD21BBCCF42559B0DC72
BC23E377821A6082C09BFD65655DAD91AC241371D8EE6F35DC6A81FF8B99FAAB
CFE16B4C07309EF358F349B1ADEA227F8C0DF4EAE6353A5FFA74> |-
/y <1C60D8A8C9B7A73DB58DF6ABC4C1AF5EFC125FE6C359A08BB2BFFC7A67B2
7E2F364682D82A3CB3B97945B9CF478EB602CC754345B09114C85962712E25D9
EC080FDDCA108C0C4C7AD1EFD9EBD254799B46DF18467A9F6E09AFD467F082BD
EBB2D0AB4F916FB53590B6CC79EC098EC44D11B153032B9097AA730E748CAB91
2BB594BA5FD41B1B3E088FF709A94E7A24E118276A359759EE4FEF29795446E8
A97247D117A0B653E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWW+NimbusRomNo9L-Medi /Encoding get
dup 46 /period put
dup 52 /four put
dup 71 /G put
dup 79 /O put
dup 80 /P put
dup 97 /a put
dup 98 /b put
dup 112 /p put
dup 115 /s put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWW+NimbusRomNo9L-Medi*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 2{/.notdef}rp /four 12{/.notdef}rp /A 
5{/.notdef}rp /G 7{/.notdef}rp /O /P 16{/.notdef}rp /a /b 
/.notdef /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
KQVZWW+NimbusRomNo9L-Medi nf
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 290.422 mo
(4.1GlobalOptimalityof)
[4.9813 2.49065 14.9439 7.7509 2.76961 4.98129 5.5392 4.98131 5.26025 7.7509 5.5392 3.31747 
2.76961 8.29877 4.98129 2.76961 2.76961 3.31747 7.47194 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
221.473 290.422 mo
(p)sh
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXE+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B59F85673FCBC9B679E78560694A72920A8F272591027C350F
5786D53401883D83193200AED03D6C139D717B4A49CF17DE043824C76BBDE970
9CEA3A834DC16F15DEAB8A4226348C5B167BE871B65343BF6F99788A9B06FA20
4CE4ECE54A41DF23AEE31FE6D57EEC278AD53DC35ACCB7F23333A6DADD81486D
587364DEFECCA43B265793E79F374AA4347C6E0D3D38DD33F21161AAA8F40486
A99CED9EAC7202F14A1613795AEE6EED29403B7A5C0C91EC210854B585289661
2C8AA0531D3BD07EF835252E3B97FCF85FD6755FC79CA397EE9D05A43608BB9A
00539CFAF18F410C64F3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXE+CMMI7 /Encoding get
dup 71 /G put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 52{/.notdef}rp /G 31{/.notdef}rp /g /.notdef /i 
3{/.notdef}rp /m 146{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
226.486 291.916 mo
(g)sh
true set_gvm
%ADOBeginSubsetFont: EEKAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXF+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E59
93F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5
497F9A03CF7F30718A4F8E51FE4C555962B834> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXF+CMR10 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXF+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 5{/.notdef}rp /one 11{/.notdef}rp 
/equal 41{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]
KQVZXF+CMR10 nf
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
233.888 290.422 mo
(=)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.404 290.422 mo
(p)sh
KQVZWW+NimbusRomNo9L-Medi*1 [6.9738 0 0 -6.9738 0 0 ]msf
249.417 291.916 mo
(data)
[3.87743 3.48689 2.32224 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWX+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B7EF32570AFF8231DCF4ABC5DEFD5B6D550686CFFCC91C267
F1252BA4F4DAA274A3A6688691900FFEF7A839B52553AB9F891F187F51351F44
C21EAFE0C45D0394141E4F8BAFD06377AA51E37B7097AD1CD66EBD9853CBF817
2875228C37FE0953ECA0AB863FE32A47EEF2B7DF444F4BC2717645C8B4ECA894
32D1027B7AF6DE75966098D9C73E00129B4A704F85D81AF7D80671478639E183
CA75D9BD8666D9EFCDBB6B3C3084DAC79574807631815CB8BE737035BB77F054
C44C971E29217D4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWX+NimbusRomNo9L-Regu /Encoding get
dup 174 /fi put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu*1 
[44{/.notdef}rp /comma /hyphen /period 11{/.notdef}rp /colon 18{/.notdef}rp /M 
5{/.notdef}rp /S /T /U /.notdef /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v /.notdef /x /y 52{/.notdef}rp 
/fi 81{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 311.229 mo
(We\256rstconsidertheoptimaldiscriminator)
[8.60769 6.91405 5.53921 3.31746 3.87553 5.26025 4.42339 4.98131 4.98131 3.87552 2.76961 4.98129 
4.4234 5.80812 2.76959 4.98131 6.91405 4.98129 4.98131 2.76961 2.76959 7.7509 4.4234 5.26024 
4.98131 2.76961 3.87552 4.4234 3.31747 2.76959 7.75092 2.76959 4.98129 4.4234 2.76959 4.98132 
0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
280.979 311.229 mo
(D)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
291.995 311.229 mo
(foranygivengenerator)
[3.31747 4.98129 5.80814 4.42337 4.83188 7.47195 4.98129 2.52054 4.83185 4.4234 7.47195 4.98129 
4.4234 4.98132 4.42337 3.31747 4.4234 2.76959 4.98132 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
387.167 311.229 mo
(G)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
395 311.229 mo
(.)sh
KQVZWW+NimbusRomNo9L-Medi*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 326.489 mo
(Proposition1.)
[6.08707 4.24407 4.98129 5.5392 4.98131 3.87552 2.76961 3.31747 2.76961 4.98129 8.02985 4.98131 
0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GIWBAA+NimbusRomNo9L-ReguItal Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GIWBAA+NimbusRomNo9L-ReguItal def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle -15.5 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 120 /x put
dup 174 /fi put
def
/FontBBox {-169 -270 1010 924} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 432 452 653 673] def
/BlueScale 0.039625 def
/StdHW [23] def
/StdVW [78] def
/StemSnapH [19 23 32 38 43 47 53 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/comma <1C60D8A8C9B8707CBBCDCD2F001BBE788476BF095E47CF14E2CE49EF
9CA2B7A5BD99BFE693BD109792E1F7C905A135699BDF5AEB> |-
/F <1C60D8A8C9B7D8BE6A40C97BA45958936AF6A6926E425D87C6AAC8699F95
274AFF621A56399191219DDF73044F937372B08ADCC67852E2449B5CBB823A88
BAA59E5AAB1A17BD86D4CC2CF81FAEFB371FF59A33C030427DC86AE74CFC8F3A
98A9E094CCDB98746B9E486C811DB220DC2868E57444115D447935CCC9EE4EE5
795D6462C12F4894BF099E69320426E765DDCB531A45CD4E7AA3CBF25837A83D> |-
/a <1C60D8A8C9B7A73DCEA80DF8A035E6052CC982C976E52805ECA17E96ED85
358DAEDA8137772CDA5D0D5F7C4275C1A5E4026261E2C3B38D308543B0E1AE71
3B517F7E54F0F5CF956209F612780761A2B71144A88A7046841A56B11D93FFB7
995D2EA00522953A8040D863497047DA14446BB2067ECCA8ED4D837CAE01ACE7
B46971340ABC15D79E32B004512A5DC5059BB56C2E7C594AD5A68E2BF959502E
9DADE6C7214B6F03755BE1A81CA309BC3F4F893EA7111D43D400FD21B368B73A
A2E3205E67> |-
/c <1C60D8A8C9B77FE2B98067ECA4D192682BFDB9E0521383E33AEF2AB13B6C
DDCB44DC5120998F37998811E16806D92A99440332371A54614042CCE9C92086
58B4DA3084C9D34213BEAABE4A6FF1F8DDFDED091410C941873DF78E52217871
1690A9E31F99D607B4F2E450328ADA> |-
/d <1C60D8A8C9B7A73DCEAFB0502243BD04706825067C78310881CCC16C5F6F
F8AAEC74F317B88CC0E4F1055489FB852C14136A6E1F60B5B0042E4758635412
066A24BD500B790764F39B57DB21FA6563BA932B89447DF074787049FE3A50BB
104A3B691543F02DCED75C58972F1687D2574445464A58B981530FA8EB1E9C62
58FCE2491852C79FF9BF09AA8339BC431996263A97DBE2207CD8E1022C6FAAC5
776FC9675ECCB714EEA043A95F7AFBAEC875872AC8A77FB76A5F76AFE9EC3753
490950DCB6FFAFA27B> |-
/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FB14EBA73D87B1A4
D022DF8523FDF49BC255F6353D4EC7286276F638720F53775551090EF627DE32
99167E228A46C7C9F7600C313C9DB3D95EFD29DAE4921482D8BDA0C17CF165AE
54F2E4EAE86D7BC98FAA78761A40F55BE22953DF97061B> |-
/h <1C60D8A8C9B7A73DCCC2CF5CE401F1233C4539879FDA2315CCD592E8AAFB
2E4918D29F3424D89DEAEFF064A3D792A1490EDBA1C4ABF8210DC7A773E30DF8
24690DCED1024C9B211BDB612AA25F25249E3EF8B551D98FEFC1AAC679EFC32E
B47DBD03361A2D604292AC71EFDCC2750031E6E0FD4D4CE6DFB4E59CC1F5285E
96D5FE62789C95EEA8C79C8EEBD27583EEFA9E932B8E1887683720948D58687C
65BD460CE5031A57CDFE0332B5120E> |-
/i <1C60D8A8C9B854D083AFE4C873AEC1E7FDB9EE859797A45455327B9BDB70
760240E8ACF666DC8D59275277C3F3C252A46BC2A92D5BC509D2A0906FF0489A
6A2863B6C52E12014E0BA262008BDC08AE94865A26FD90663B8FE13B433E5668
3A79BB00550E9151E21E522B2D2B5D71B39AD827ED501C13C2B901FC1670356A
6C436566AF4075B7579EA6C70A85F6C747F08B> |-
/l <1C60D8A8C9B854D0838A1108B53790159DD3B4EA9A1AD8636B0628F820FD
D5F77683DE15235D1FD339E9EA97EC21485FAAD28EC53B019AD5B813C84FDEA8
E91A6EF405E10B821029B8F161246B85F33E1B773CCB78341CFCF787EB8263F3
78D06DE7AFE2110DF0B39030FD> |-
/m <1C60D8A8C9B6079F178B521F79AB859140E406AE0C2925608732DA7C451C
154E79810E39F6B5B32562F5C747F43EAB8EE9FB3FB6AA02E6DDB5B640F73FD8
7203F2815F23DF37ED7B3C3D8C139F5494C5B589021482C0B49E3A45AD6BB8E3
CAD535C1815C616845611D52745E9E3A7F20A4EBDE118920053905EBB7FD273F
CEE0F7C3154EDD9B7922A8B0AA076EDCD5457FC5F23E58EA02963DE27C4A3BF9
950FE2FA1EA72709B44D0C0F0BF575E839D8A98FDCD76D9969A59CC799256EFB
31C8671E64FA561CA954E7B20BA848D7C14B1A853B062E6E8D2D0191BA5377EA
F94B1122C09634F15B> |-
/n <1C60D8A8C9B7A73DCCC2CF5CE401F1233B06D0FCF55836E538C58E814EEA
E6634460655FD290AE7488CE32E814759E0AF2C2482D7ABBAB2541CE23A2082E
8ED41FB38E252A6CF76E3507FBCD76F6FFBE5683A3516B6ED6647539D8D688FE
36EA596FC13D794F6D3DDE908BBDA3068338531638CB57995C08C38697724D14
8D71913F92B471AD67329A2D4B1A2188889C10BEBFE0E915562767D4E2D95C76
B539DE865FC66F5538DC89EE812915B3922908D3579330F65A44> |-
/o <1C60D8A8C9B7A73DCEB4B8D8F0C1B91E5FCECE20C383B5A3A04C5E300C44
73F1758AD6EBD68AF3342250ECA77E8264601968E8BB73C8BCE96E285325E4E5
F9A5427A9867F5E01A213534416D8FA7BD45D53E120FBAFC16324C55CE0B8ECC
A30F4FDCBBCADFF556EA> |-
/p <1C60D8A8C9B7A73DCE8ADACD4C270B1786D169F3E20E591ACA0CE0F9229D
EE17149E57EA8C388BBBF5AE30EF5200D4A0F04C5FB938FADE53A36AA852E300
38E1FA465FEEE81384F5AC9A894FCBDF86FEF2356D791085E73D3BAC227D40C3
D40A0ABF220A13538E735EB867A89FE7F997755F8A45044BE6AD11D1FCB29BDB
76E0B5A99487831F30A755181A44C79BEC9E7A2E620A0A8F0F68B5D6A210CFBB
2A4B6BC0BD97267D664E7703B3442231F4316A57450D866947A8A78B101E2823
43E74357967E784FE808D25ACE69CE8C0752F22F39F56CA80C2FD357DE0B> |-
/r <1C60D8A8C9B7361F7E31A316A5441472A3D5F0BBE187EC79A442CBC96388
45592AF85C4E4C7D40F5739783C28CBA686CB4EDBADD3DF864045E1617F9EF64
EF28B75F06BB7DB3735A4D1B8449A08901B30CEFEBABE09F310BAA3CE48486D6
4D9403EE527234C18BDC9B0C77031AC2437A48321C> |-
/s <1C60D8A8C9B7361F8BB5EB474F071A14F6886A6A71311E11AE8DF8D62DC3
BA85E254787E7DE96602C8D214E85040DD2CD59A86CF2994C7DBEBE3497C89DE
48A5193513118D9558DD3565C61BBDDA73580B36F71CB4E32D78B6DB4E5ED4D1
267100D1262D415027F043F562CDF11A5D7AA04FB2DDF5C58D3789142B59E5C7
AE5B5B52E6A06FCCAD6BA1E60EEC10FDF0D840DA95B7FF8BF26E189AC01FA90D
B18C7828CCC68A7BB8906A516C79B12ED0B2A14494F039D484536482D2FB3F95
00> |-
/t <1C60D8A8C9B854D083A90EFBC938A92D26787E8A2985BDD732F5F3979320
973AE05469589D37F6710993FA8C4F22B07BA5CDB62E8203EBC0D0A817CECF14
3F719975302FFF456E372C07C4540089BA89691B08F22F6B687DBA322D090528
19E08BEFEC85E919D4B4433340CE06E3E3F5538367ACD04AC81520E078F70831
E1> |-
/x <1C60D8A8C9B77FE2B9EADE002CE8C0592767613E8C76BA671787429B6C83
926DCAE20B5B81842719356D95F7AE7A8857617CA9A67F432AA0B4912EE460F5
D35F23B528B3CE2467CEE2E1E36B7643F0372BBD3ED767BD5BEFA47FBC57C97A
0886B2F5A870EFE6B8E4389FF68AC51528DCAED8916007D2F900AEF7090F254D
7D27B6E83D66E8897A1B68F85FC920EA7D826FEA4D9EEEF659696E43577A34D4
1DE63FDA8D0BDC7053E78E46D64E4509DF641AC847EE19E36EA21613B597F1C6
5AFF2E01114BD2917B21288154> |-
/fi <1C60D8A8C9B7A73DB58F6C98A5E3761A1BAD4C6AA16E3404DC9F6F52195
C5E055530D0F0AE4A43C9A4F8E3355B0340B60E234DD50BCF3FF412A6DC0D7FF
F16A2390549118672BACCF65F97EA4D3C9B7B5A6D1074BACC8DC99F6E7CEE2C7
DBE22A1C3F42F5D6E47EF9FC3711B2FC5D6718702EC11387021F832A46CE3391
253821E08C7A515CB79722C5AD33AB2C3B065F5EEC77CF8E8AE385268D2B6D37
666835EACB05976DB7E40CCEE92797978DED7C798EDA80D579AD4E5EDABA4512
BB05880BAAB69F3E81D9D790CBFF256A4A145643E5C734FC7171512B8C583091
4830C667813934E6A8CC5D513B39EE3985F6B60D044011EE7FAC3B374B0073E7
5C261D73DBAF99FC225E79F76CFED38D5BFC8001152824441C1C87EDDE5B959C
1234812790E6A0A784738A54C2708D3FB03147107F50AC3A2A1865CE9B76E24> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXI+NimbusRomNo9L-ReguItal /GIWBAA+NimbusRomNo9L-ReguItal findfont ct_VMDictPut
/KQVZXI+NimbusRomNo9L-ReguItal*1 
[44{/.notdef}rp /comma 25{/.notdef}rp /F 26{/.notdef}rp /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t 3{/.notdef}rp 
/x 53{/.notdef}rp /fi 81{/.notdef}rp]
KQVZXI+NimbusRomNo9L-ReguItal nf
KQVZXI+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.029 326.489 mo
(For)
[5.041 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
188.418 326.489 mo
(G)sh
KQVZXI+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
198.742 326.489 mo
(\256xed,theoptimaldiscriminator)
[4.98129 4.4234 4.4234 4.98129 4.98131 2.76961 4.98129 6.91405 4.98129 4.98131 2.76959 2.76961 
7.19301 4.98129 5.26025 4.98129 2.76959 3.87555 4.4234 3.87552 2.76959 7.19299 2.76962 4.98129 
4.98129 2.76959 4.98132 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
326.87 326.489 mo
(D)sh
KQVZXI+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
337.885 326.489 mo
(is)
[2.76959 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.35 351.36 mo
(D)sh
true set_gvm
%ADOBeginSubsetFont: XLWBAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /XLWBAA+CMSY7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY7.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
def
/UniqueID 5096648 def
/FontBBox {-15 -951 1251 782} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 708] def
/OtherBlues [-139 -127] def
/BlueScale 0.039625 def
/StdHW [49] def
/StdVW [49] def
/StemSnapH [49 69] def
/StemSnapV [49 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/asteriskmath <1C60D8A8C9B7F2A7A957C62A7E675D52274C442BA1EC23A83
71202E608E9C6C0239B6DD36C567054C95415F836653614FB1F26B50B17B783E
1ADACA259034D2DCE4EF8270D80F8D333BF25F0E720D955AC1C5D8F4D765EB08
4F98D1D1EB476EA1F2A963DFD114148AE6F7B1BD3441A3715A354217CE35DFB2
CF6FE845469D6B3DA2B3031EEB4285ABC98A131F21916D69E481E04F3CC38411
5510D3C1FEBBA70A7A989D4399A5238BD3EA8AC4FEC098355E91A071A3C8C15F
A9623A2A32DAB5D0B71> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXJ+CMSY7 /XLWBAA+CMSY7 findfont ct_VMDictPut
/KQVZXJ+CMSY7*1 
[3{/.notdef}rp /asteriskmath 252{/.notdef}rp]
KQVZXJ+CMSY7 nf
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
257.875 347.246 mo
(\003)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
257.598 353.823 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.299 351.36 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
268.173 351.36 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
274.739 351.36 mo
(\)=)
[6.64407 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.161 344.62 mo
(p)sh
KQVZXI+NimbusRomNo9L-ReguItal*1 [6.9738 0 0 -6.9738 0 0 ]msf
316.174 346.114 mo
(data)
[3.48691 3.48688 1.93872 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
329.071 344.62 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
332.946 344.62 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.511 344.62 mo
(\))sh
293.092 348.869 mo
361.455 348.869 li
@
true set_gvm
%ADOBeginSubsetFont: TDABAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B7F44A4E58A3FE29A801396C4DA1DF17CDB2B354514EF59794
C1C07AC5FD6F40EE28650B2FE8FB68B9DA6BD85A482B92D52BA74241616AB0AC
8E2815E3098242BF657BCF71DB2E9E87D171CE76BB8548E6B2121240DDA27C25
25AEFECBD1C7DAA77355B1A83D994CDF326D8868CE17D3A0CE201581FECDB843
7425CA9F468A336E5E62074B2DDBF80B29DEFA7D4EED2051F19152B8775C48F8
3E63250113F1DBD5E8454CCAEF5F05469AC04B813D2E1365A8E1> |-
/a <1C60D8A8C9B78B91A67BA90DF97699E62422F799E84D7B3A3D661D3F0324
E36572B6F55CADB321D76184E6FEF1C36861E0613E833FB68C82A2BC4CC3F2AE
1478AB881A1C5039ABE584E2AA004A051637F696A77CD1D24E6C0AD11A3EB785
309C0E2AB7535D5D031B6A1E90F4F776EED2B4AB4D941EE9E7FB4FC39D412686
AA36237E62F516F642CB8A3242F57961731A226FF7AD93C39CBF70401C2AD048
EF189ACE014A51BEE18C391779FAC193FC4AD6B6168A27E2206DC0BE> |-
/b <1C60D8A8C9B76E37966B5F84C2CE65B00308611EF442ACCEB193BA494A07
8B1B3B4E0176A87CA980760BCA4189B2A6ACF9CFE5BE3304FD43B30C38AC68AE
BA4926CE1D2AE23913CDFD90275A13B65E4D4C8FA5E9EB4464B84B4334CD5FA7
173C5045E6BEDFA2DF527CA5A92AAB5AFF8EB0B79DCE0B8AB5D0A7694C76FB59
95335F8BC703E49ABA2372ECDA8FC63F30FECF911B2EDCD805C070CE8312> |-
/d <1C60D8A8C9B7B3D093A5DA22F344125466E8D0134FBA69AA1653B6AEF1AF
8F8CB80A17DE6F373F54D15BEC86DD2B0C4F1928DCEC9AD2CBC531A3FA9442BA
DD64BD5DE854EF788EA4122FAD019E556E23DA6C2BFB96BABCB99348CF6360E1
C8E9AD6EA5D3F79D11F01C19320594007512E5C397385890448082CA3D6A2DBB
BC2957A5FA0CE1D738A715E9A8F1491B51F14D5FC6CEFFE47A302D922E710D5D
854B98204EC69C80D2EECA3B54178DD3ED23184E7DD06BB68A9BC87154E9B2C8
16290FF5A0> |-
/g <1C60D8A8C9B75F2F6D395BACC84C31C3B8372903CC9CFF677AF414414B7A
87C94C2007602795A97FFC216D9EC68A6CC816BABFC68EE2D165F092E1DEDD21
80D5E68F1E46BD3D39915DBF0BD529944A9F460E79C2A2DD3ADDE535C40B258B
0EDF1F0BB945C030943CE9CE8EC3218E2F97303675C45D0C4673767D0716ABF7
60AE70BC855A6EC26691BFC4D832CC1B7C48F0D399DAC1CD612279746CF4AD2E
4603C65720EFD86A50DF927E0E363599AA3336A351667EC814635E> |-
/x <1C60D8A8C9B7E02ADD9A961EA85B11A4D6AE8E5FF47D0FB2B207722E9454
9CFCF90B2994EB4018DCD72707FC7E657C1357774D6ABC659E4BFFA1BAD58151
43126640EA2DAE45CE146667BB09E3222C5B2BE1809001CE57FFDA3F8C3B30B2
86B230357F5F955C9F57E2989850ACB5C1C587977554FAB8160F71D5F85970C9
22D115B7642513052A5260EFE973B9D542C18F64EADFD1C5FDD09160C3DC94D4
7F2CD7AE4851BB3D04487C33689E9C61C71A12B0085775C7E4FAF6B3AF6BF212
F2A47B39735F454DF875687BF642E91EEAEBA7EEB2> |-
/y <1C60D8A8C9B751D5041DDABC011B22E2674EC9D2008402DC54EAC5EE3379
40D4E00C5876708EBFC0F089816A923F7414E12F4EC86FE029C9164FB00D37CE
3824BFB04DBE0C4C2733327610FB8442214C961F4823DCB09F8F2DF872A8CE22
62AC898EC0E84871D4EC8F51AF0892D628BA7C3C799F6D511F178BEE37A8BECE
AA043542F6F8FB29E710A79A7852CCE7858DA82878DF2512D738066A24C3F23D
5749E869C5C3A41524DE46794B0E3880C3C1C4EB7FF85447E9075DF4909C0859
7159F3848B34F8F9CB8E9A6A1B158B5BD9C5F03DD569D590DA5F215711D7> |-
/z <1C60D8A8C9B74A3E84382C6D1E91220933A5E730ADFD63E24CC08BDDE5EE
CA0BA0C973053CBE62A90AF50619728A5330D6E611C5EF4C665B91BCC6C9B9A4
33ABA29ABE22766F4AB4E577E8AE8EDFEBE713F31BAC993648067C175C8A44D6
3E25AE63D517E6187730672F9913AE7BC1D7D63D892A6FBE9A4096169311DBF5
2AF53851ACFBDD2DB3B04F5339642881F60AAF4779FD123A43929A3DBA810A4F
2198B4F8ED5421E29DC26B665F9A021D5B3E3785C44DB407480E75BCA2516928
1269E75C4FC1DC930D8CB737C0790AF7657E82C3D84A1D1D5761> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXA+CMMI10 /Encoding get
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 103 /g put
dup 120 /x put
dup 121 /y put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXA+CMMI10*1 
[58{/.notdef}rp /period /comma 8{/.notdef}rp /D 2{/.notdef}rp /G 14{/.notdef}rp 
/V 10{/.notdef}rp /a /b /.notdef /d 2{/.notdef}rp /g 
3{/.notdef}rp /k /.notdef /m 2{/.notdef}rp /p 7{/.notdef}rp /x 
/y /z 133{/.notdef}rp]
KQVZXA+CMMI10 nf
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
293.092 358.193 mo
(p)sh
true set_gvm
%ADOBeginSubsetFont: GIWBAA+NimbusRomNo9L-ReguItal AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXI+NimbusRomNo9L-ReguItal dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CABCFCF9DA0E740BAF14381B46E7EF43F488F487
2E9294321A54B0280> |-
/P <1C60D8A8C9B7D8BE6A40C975083C7340CD6906ECF2E3CF1D49E1FDD49037
20EF71B3A78D8667F96783ADBE5D639A1A9294E478A05AB8697E20511C51636C
79CA58D9AC0ED2B24253F3883E4BFA7A7ED2FE6DBB0541A5A1AF05898322C2BF
61032DFB5A3199D8C2D78558FCCAC63830D93433F13102D03E9BD11B84EA92C1
E67DFCB7040B8DBDE8078B21DD19424F2DBFC8E85D438E028391F0884D790AB8> |-
/f <1C60D8A8C9B854D0F80E05032B288E000DCD85BA04E3639668EA8CF33314
967F215DCF3373594481AA451E5349F27E4E02B7A9E0C010FA198738E851F805
AD4075CE4AA02ACAF4D254E4DDB04C264E0C215EB3CF2E44607705BCCF314DA0
049C748EAC09831A6CEFB594251F06374C6655B3BAEBEC9D05EAD5F04F3C23B6
AEAB01831E482C6786E731A0746FA5EDD3EFF368BCED6F94D69606B73365F8A0
6E71> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXI+NimbusRomNo9L-ReguItal /Encoding get
dup 46 /period put
dup 80 /P put
dup 102 /f put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXI+NimbusRomNo9L-ReguItal*1 
[44{/.notdef}rp /comma /.notdef /period 23{/.notdef}rp /F 9{/.notdef}rp /P 
16{/.notdef}rp /a /.notdef /c /d /e /f /.notdef 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t 3{/.notdef}rp /x 53{/.notdef}rp /fi 
81{/.notdef}rp]
KQVZXI+NimbusRomNo9L-ReguItal nf
KQVZXI+NimbusRomNo9L-ReguItal*1 [6.9738 0 0 -6.9738 0 0 ]msf
298.104 359.688 mo
(data)
[3.48691 3.48688 1.93872 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: EEKAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXF+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/bracketleft <1C60D8A8C9B857441457F48D14F3F47B30BCEFA5B1BB16AB48
A411FDEDDBBCA4E8659FE72DCA596311382BB6> |-
/bracketright <1C60D8A8C9B857441457F48D14F3F47B30BD99EBE2CD4840C
E39569BE9FF8DDD4604DD868D11B34C9C90BD70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXF+CMR10 /Encoding get
dup 48 /zero put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXF+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp /zero /one 
11{/.notdef}rp /equal 29{/.notdef}rp /bracketleft /.notdef /bracketright 9{/.notdef}rp /g 
4{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]
KQVZXF+CMR10 nf
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.002 358.193 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
314.876 358.193 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
321.442 358.193 mo
(\)+)
[6.08615 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
337.493 358.193 mo
(p)sh
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXE+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7D04D6EAC82F8236992FC7B075E79E13721E67606CC7CB1C1
341E499C16669F8E832C7BBF92CCCA25441F87E33D4C56566B335F7DB78148D0
11F90B6CBA7B8511ED65A515E66767EA6C6A2593BA18EA27C354755856993C63
64F03C4A44FD9A4EF4B4324F4E9AB0E8015ADA73B8E2196307A0372CDF806D86
713115049ECE43E5C5D5E090805805E0F6406B60A6790A6B4F1D2F7EC7C37DAC
CAD6030DF5A398C693824186C48D669E310E41570649D967796D60> |-
/z <1C60D8A8C9B79AB824C3FF06301A11B44795EBA132908BDDD157BBBE0CEE
242C8D69ECA919CEAA1853464E661EEFE99713CFB373FBC791CF0F923975C3C8
CA969B488CFDBF450146E96B47D88279A8ACAB4897DE2A2F344119285257312A
0ECCE9D82E1EDE38CDC80CB1A5FA2628A3E23F4ACCEFCBA72BB071DC9B3AAFB5
059999B7954F447F8644C686527C93D959E189513968B66307DDC94090F443D1
B8FD2FB14E5E02EC5D78F32DFAE74FD66E8EB50A6097867557C006A987C1082B
1B34FF30E7D77AA8693D33679BA7956B4DE6613D4EA601> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXE+CMMI7 /Encoding get
dup 97 /a put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 52{/.notdef}rp /G 25{/.notdef}rp /a 5{/.notdef}rp /g 
/.notdef /i 3{/.notdef}rp /m 12{/.notdef}rp /z 133{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
342.505 359.688 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
347.14 358.193 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
351.015 358.193 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
357.58 358.193 mo
(\))sh
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWX+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34C10FB5B45A8FF20C81B99897830644196B
9F0B77D18F1E2415B32643B9BEFB32917C4D47B1853CE389710AFD496390E0F7
93FB9D427EA0C5D4BB5FDA148EAFEE0C20062EA421DE85BAC5> |-
/parenright <1C60D8A8C9B81F2C34C10FB5F8CB4FB0C01CBD8EB5118892552
E140106D8CE6C92507D29757CD6290403441A1EA7693B4F3C96FFB476C2C573B
7D2E57D40483AABB12672AA2C522BCD98D28F543A66D4C9ADFF> |-
/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B744F8
D4F54DF812628245A65EF24CEAADD5DE190FFD56148C6E385D5491D13046F140
F2584C73B6FA05C320B018358B9C23ED6C9E586FC4F73E174BDB9E859FD3482F
BC3EE225AB5583DDBB> |-
/three <1C60D8A8C9B7A73D33B7A780A4FB6D478F9DFFD1DA2730E109F94628
9022DF44AA9C6B3C7A83D30909F0BAB42A6E1D1548FDDC248F7C953CDE5A28D8
689A27CB59F87D356A314D4EFED0475CC0AAF39DC03786C824DDF509843103FC
7FA496FB5DCC5A8557EAC7C07B47467CFAA928DDE85F766B75A88715FF4FBE39
5D793AA936CD181919EAA5062E994CBA144301D3C748F9AB1671C4DDDDB4E131
7F6796560BFDDC9A58> |-
/D <1C60D8A8C9B6079F1E4884847E183CDFB6808979A7FFAABD96864B66E877
4E70985CF395DC1D2FB7C8BCD1A4C47C710B24983ACFD957FDD5209F65A7CC6D
CA7FAB2B31A94757B920900AF55DAFF07E485481F6EE171E97C1FB25B33FFF25
DE136D66C781030917AD5172E37CA4D4A7F6F4BF8A8F873BF0626800AF87A204
C228E1B6C0435E1F9862D6C5EA44C6C9DEA79E98A81138E9957151BC634A5F49
B7895409D9F2A50BD885B883DF4C> |-
/F <1C60D8A8C9B7EF322BCE349315DC362BCA8CFE4FA18BB639D443336F7111
E2FACF60D2E19F1D435E96E49FD0AF135C8F4D593F674BA833D2635B8F02FCB2
BA0EA4D7637689C705ACF839A843947A142679A187B852855766FB975C8A7F4A
36CBB0767C130BA6A421FFE56B2026B49CFD6C7C20869DFF5A9F134D0B5DB06E
3DBFFEF295> |-
/q <1C60D8A8C9B7A73DB5811938DD329AF5702F449C4C3015239F3E0A7732DF
C9E0828332DA51F1D7FDE724DF869BE73384BD1B7136B03BB11DF051325EE7A7
668042B3ABF69CE2C13C47BD4E4C9A86DDCBB9CAE3222F43A69A8FF1ABBDD409
F18B51721F47402665B69C88AC7610BDEE6B922DEBE4B9A5509B50F0E0D3E071
713E6B4ECEE647E52C37F2D1A72629A17EE40EF1260847BDA48E1E19> |-
/z <1C60D8A8C9B77FE2B2232EA49D913A831C97B47563501A79DCA41E417E74
E20F3E3020C6B422D96B1171C7F6A868EEF4F80EC234E8C81C6D5907680692B3
D53F97E8CC04C61D64F59B524A639C52> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWX+NimbusRomNo9L-Regu /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 50 /two put
dup 51 /three put
dup 68 /D put
dup 70 /F put
dup 113 /q put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 3{/.notdef}rp 
/two /three 6{/.notdef}rp /colon 9{/.notdef}rp /D /.notdef /F 
6{/.notdef}rp /M 5{/.notdef}rp /S /T /U /.notdef /W 
9{/.notdef}rp /a /b /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/q /r /s /t /u /v /.notdef /x 
/y /z 51{/.notdef}rp /fi 81{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
492.384 351.36 mo
(\(2\))
[3.31747 4.98129 0 ]xsh
KQVZXI+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 383.864 mo
(Proof.)
[6.08707 3.42721 4.9813 4.9813 2.62016 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.569 383.864 mo
(ThetrainingcriterionforthediscriminatorD,givenanygenerator)
[6.08707 4.98131 7.96011 2.76961 3.31747 4.4234 2.76959 4.98129 2.76961 4.98131 8.51802 4.42339 
3.31747 2.76961 2.76961 4.42339 3.31747 2.76961 4.98129 8.52798 3.31747 4.98129 6.85419 2.76961 
4.98131 7.96011 4.98129 2.76962 3.87549 4.4234 3.3175 2.76959 7.75092 2.76959 4.98129 4.42337 
2.76962 4.98129 6.85419 7.19299 6.03735 4.98132 2.52051 4.83188 4.4234 8.51804 4.4234 4.83185 
8.51801 4.98132 4.4234 4.98126 4.4234 3.31747 4.4234 2.76962 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
413.396 383.864 mo
(G)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
421.229 383.864 mo
(,istomaximizethe)
[6.29636 2.76962 7.41223 2.76959 8.51804 7.75092 4.42337 4.98132 2.76959 7.75089 2.76962 4.4234 
7.96011 2.76959 4.98132 0 ]xsh
108 394.823 mo
(quantity)
[4.9813 4.9813 4.42339 4.9813 2.76961 2.76959 2.76961 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
143.148 394.823 mo
(V)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
151.173 394.823 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.048 394.823 mo
(G;D)
[7.8336 4.43138 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.834 394.823 mo
(\))sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
165.178 419.475 mo
(V)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.204 419.475 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
177.078 419.475 mo
(G;D)
[7.8336 4.43138 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.864 419.475 mo
(\)=)
[6.64406 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXOBAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXH+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/integraldisplay <1C60D8A8C9B790A849148EA2EFC9362E655F2F729E21E0
A96F71F3D2F04B836DA2CAB1BC2E58AAC1B3720846A3A712506815034EF8014E
5CC4E36AFB4EF97A795583E2CDE40F7505B18CA2823D600DD6A04177BD13E773
24C80508B6994BE0D1DDD9C625179C01C399B6C9AF8D4FB77A6303E4EADC5506
F23FD6438EF745921134B35265D4B35DE5210353A58F1EF75E6E90201E6EF7A9
701A1D5388E400C599167967EA94A83E86F315503BCBF05FD39D76AA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXH+CMEX10 /Encoding get
dup 90 /integraldisplay put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXH+CMEX10*1 
[16{/.notdef}rp /parenleftBig /parenrightBig 70{/.notdef}rp /summationdisplay /.notdef /integraldisplay 13{/.notdef}rp 
/bracketleftBig /bracketrightBig 150{/.notdef}rp]
KQVZXH+CMEX10 nf
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
213.915 405.915 mo
(Z)sh
true set_gvm
%ADOBeginSubsetFont: RQDBAA+CMMIB7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RQDBAA+CMMIB7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMIB7.) def
/Weight (Bold) def
/ItalicAngle -14.035 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 122 /z put
def
/UniqueID 5087389 def
/FontBBox {-7 -250 1341 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-16 0 444 452 686 702] def
/OtherBlues [-202 -194] def
/BlueScale 0.04796 def
/StdHW [63] def
/StdVW [63] def
/StemSnapH [63 123] def
/StemSnapV [63 123] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/x <1C60D8A8C9B61400B43DDEC1E36A26504FC005FBCD713A5A4B3FCCADE624
66D319291AC840AB21A59D5A59B33B5AF56A8788F6D200E8599568D674BB5701
3354519B1AA57B1ADE9C93BBAB5306CC4D9EED116C0E98C15C08019BC7A868DA
4D86E51842D99E1F63A8087344A2C2C7A828EA74B329E2E1870E08F96B499A49
A2162467FFD7AAD5D66C890D497AAFA400073DC42FA874D6EC212471B88A82BD
3D7A4A624A081CD1666A50F788E3D09199F432A1B6D6B2B641EDBCA6FC0B868C
78BAFA198ECDE29D10EA030FF78DCDAFABE50C60FB300C8673F296F1BE70D5AF
FA8EDF65332D3301B4E203656FE791696A7D6BD5451A790C52DC14F870E50BCD
755DF8EB3E52719D75063971CB> |-
/z <1C60D8A8C9B66C0E1617E108A93E7F0E5EFF11C7EF33CE73A799BB0B5FE2
8A47771BC7B28F590ED8A88CE03E4EA447EE8306DD2E81243FE7BCCB0EAD1BAE
9F2C02F9DAF77588947792C1501D78258791803F5530BFD0B0E5614BF26A69D7
B6E1B1711854D352B2302F5EA474BDE0F6A255C82B1C37E9CD6515E71A069ED6
2F17036FE0F989EB5DD506FE0AE04C8216ECA2EF06A9CC7EE41D04817A81F55B
70D54493D56B5B7215A95B323B98FBB1BEB3FE7F41485C4121431DED68CDFC5A
67A00FC7B4B999058DDB178A42EE56F3A3BC06EFA51CAFB1E91C64EA98> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXK+CMMIB7 /RQDBAA+CMMIB7 findfont ct_VMDictPut
/KQVZXK+CMMIB7*1 
[120{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]
KQVZXK+CMMIB7 nf
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
219.449 428.553 mo
(x)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
226.751 419.475 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
231.763 420.97 mo
(data)
[3.48689 3.09637 1.93872 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
243.879 419.475 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
247.754 419.475 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.319 419.475 mo
(\)log\()
[5.53822 2.76761 4.98132 5.12076 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
276.597 419.475 mo
(D)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.122 419.475 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
288.996 419.475 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
295.562 419.475 mo
(\)\))
[3.87445 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
303.311 419.475 mo
(dx)
[5.18546 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
316.404 419.475 mo
(+)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
326.367 405.915 mo
(Z)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
331.901 428.553 mo
(z)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
338.152 419.475 mo
(p)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
343.165 420.97 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
348.349 419.475 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
352.224 419.475 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
358.174 419.475 mo
(\)log\(1)
[5.53821 2.76764 4.98129 5.12079 3.8645 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXB+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
/element <1C60D8A8C9B64FAD2EF2B8851D1968E5D029958E40ACD5147C4074
1E22A1237398886102D9E824068CF8CCB984BE3805C3EE450A9950F9ADBD244A
087E2AE7BA5402D250A2547E9B9000BF371B31F9A1575410E09C98112EBDE784
B50FA20B3F67AF0A9C97E9C2EA9A7FD1BDD7C5C4> |-
/backslash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA69FC834282
50F6E54A577D50130C4DB7B5D04291E7B5BBE2983FC7B8E91AF300180A1F0BEC
481A35062FBA1A0273BD4F70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXB+CMSY10 /Encoding get
dup 33 /arrowright put
dup 50 /element put
dup 110 /backslash put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXB+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 51{/.notdef}rp 
/braceleft /braceright 6{/.notdef}rp /backslash 3{/.notdef}rp /nabla 141{/.notdef}rp]
KQVZXB+CMSY10 nf
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
387.647 419.475 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
397.609 419.475 mo
(D)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
406.134 419.475 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
410.008 419.475 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
415.118 419.475 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
418.992 419.475 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
424.942 419.475 mo
(\)\)\))
[3.87445 3.87448 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
436.565 419.475 mo
(dz)
[5.18546 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
204.506 446.098 mo
(=)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
213.915 432.538 mo
(Z)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
219.45 455.175 mo
(x)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
226.751 446.098 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
231.763 447.592 mo
(data)
[3.48689 3.09637 1.93872 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
243.879 446.098 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
247.754 446.098 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.319 446.098 mo
(\)log\()
[5.53822 2.76761 4.98132 5.12076 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
276.597 446.098 mo
(D)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.122 446.098 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
288.996 446.098 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
295.562 446.098 mo
(\)\)+)
[3.87445 6.08618 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
315.487 446.098 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
320.5 447.592 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
325.135 446.098 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
329.009 446.098 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
335.575 446.098 mo
(\)log\(1)
[5.53821 2.76764 4.98129 5.12079 3.8645 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
365.048 446.098 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
375.01 446.098 mo
(D)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
383.535 446.098 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
387.41 446.098 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
393.975 446.098 mo
(\)\))
[3.87445 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
401.724 446.098 mo
(dx)
[5.18546 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
492.384 446.098 mo
(\(3\))
[3.31747 4.98129 0 ]xsh
108 477.864 mo
(Forany)
[5.38976 4.9813 6.39592 4.42339 4.83188 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
142.076 477.864 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
145.95 477.864 mo
(a;b)
[5.26617 4.43138 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
159.92 477.864 mo
(\))sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
167.644 477.864 mo
(2)sh
true set_gvm
%ADOBeginSubsetFont: PATAAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PATAAA+MSBM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSBM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/UniqueID 5031982 def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6079F1E7838D45200AB9CB22597F21F6361648E8FDDD666EB
0CF7B9EF8F2C30DE5503BDB7C71C5E67A1F9A81847A349A9D5F7137475465FDB
14641D338C0C604C51D762DF8CA0F6A27DF0EB148BE88D485F21388070605E41
62DA42B90EA15109197ADCCF064DEE8C994045382891EAA34E027FCD527A9951
9AAB139E612CB2DCDDD6290B8216A6AF7B9FCCD4D0BCBA375AFAF81986C74DC7
068022C0FC19A0C61194F9B8AA264188570B4E48C925610D8113954F9B284F3F
BE6D8DDC6D2714398DCF03C14D6402B9B340A9193F2643E7F6675EA2041F1300
4EC5BA6C7473ED394EFB24B3F12E19EFD39125FC75CC7955D633507C83DB46B2
D2DCF7C5A4E282E5171260AE4CF9FB783F8EC30936561DC2FBDE5BCA293DA1BA
3E478132D1662F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXL+MSBM10 /PATAAA+MSBM10 findfont ct_VMDictPut
/KQVZXL+MSBM10*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
KQVZXL+MSBM10 nf
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.136 477.864 mo
(R)sh
true set_gvm
%ADOBeginSubsetFont: PKLAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXD+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7E2CE5B2D2AF3C16D655586ADDFD255F342CC78E0CFD77C
BD9B63EF6E836EA2677FC1E3515560DC8E1709808740B3E922280CDDC6B1DE59
498D3F96D52EB7A68A65E121CBB4EE62A5F7C7620A42A7CFE5CDEB9DCEFA2914
61A983E5129317168388213985652593802B6BD46B323DAA41AA2361FFE1897E
F8609C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXD+CMR7 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXD+CMR7*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 10{/.notdef}rp /equal 
194{/.notdef}rp]
KQVZXD+CMR7 nf
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
185.331 474.249 mo
(2)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
192.448 477.864 mo
(nf)
[7.63135 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
205.057 477.864 mo
(0)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
210.039 477.864 mo
(;)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
214.466 477.864 mo
(0)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
219.448 477.864 mo
(g)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
224.429 477.864 mo
(,thefunction)
[5.70857 2.76959 4.98131 7.50185 3.31746 4.98131 4.98129 4.4234 2.76959 2.76962 4.98129 0 
]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
281.671 477.864 mo
(y)sh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.763 477.864 mo
(!)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
304.576 477.864 mo
(a)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.502 477.864 mo
(log\()
[2.76764 4.98129 5.12076 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
328.245 477.864 mo
(y)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
333.487 477.864 mo
(\)+)
[6.52451 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
350.404 477.864 mo
(b)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
356.34 477.864 mo
(log\(1)
[2.76764 4.98129 5.12076 3.87448 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
380.711 477.864 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
391.107 477.864 mo
(y)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
396.349 477.864 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
403.298 477.864 mo
(achievesitsmaximumin)
[4.4234 4.4234 4.98129 2.76959 4.17435 4.83185 4.4234 6.95398 2.76959 2.76959 6.94403 7.75089 
4.4234 4.98129 2.76959 7.75092 4.98129 10.8293 2.76962 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 488.823 mo
([0)
[2.76762 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
115.749 488.823 mo
(;)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
120.177 488.823 mo
(1])
[4.9813 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
131.292 488.823 mo
(at)
[4.4234 0 ]xsh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
147.857 484.9 mo
(a)sh
143.047 486.332 mo
156.988 486.332 li
@
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXE+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A59ED12F4D13B79B17995B23FFE94DA08DF58623464775E9
B79BB0087E37B12614C80AE458CE659F73438CBF4C80C529B184095B182CFFA6
AF0B00759BE7AF5BEAB370DBD0AB89A04E5C70BEA644998A329B1AD5AE3D8A20
39C63B982A55265A2C367F2CC61889D00AC306B5B8DDAB24E042B1BF15B775CA
9642152E40F5A70C550E0D7B64E4E2610BD373A752E88E60337267C3EA0557BF
ED29D5D939A5F51A70F20A3BA470> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXE+CMMI7 /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 52{/.notdef}rp /G 25{/.notdef}rp /a /b 4{/.notdef}rp 
/g /.notdef /i 3{/.notdef}rp /m 12{/.notdef}rp /z 133{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
143.047 492.258 mo
(a)sh
true set_gvm
%ADOBeginSubsetFont: PKLAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXD+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B593D6D8BB90123291AA259E2A2720FD4880A5BA5668DBB
3FDE6DF999803DA9EDD496C11A38D856114909900BC9E753D6A6BF5C2786C87D
5C6E0CE8F6625D8E3C55B080D69D2651DDE1B21281AD85504D17B37BA0750A5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXD+CMR7 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXD+CMR7*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 5{/.notdef}rp /one /two 
10{/.notdef}rp /equal 194{/.notdef}rp]
KQVZXD+CMR7 nf
KQVZXD+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
147.368 492.258 mo
(+)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
153.484 492.258 mo
(b)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
158.183 488.823 mo
(.Thediscriminatordoesnotneedtobede\256nedoutsideof)
[8.20918 6.08707 4.98131 7.79076 4.98129 2.76961 3.87552 4.4234 3.31747 2.76959 7.7509 2.76961 
4.98131 4.42339 2.76961 4.98129 6.68484 4.98129 4.98129 4.4234 7.23291 4.98132 4.98129 6.13696 
4.98129 4.4234 4.4234 8.34866 2.76959 8.34866 4.98132 7.79074 4.98129 4.4234 5.53918 4.98132 
4.4234 8.34863 4.98132 4.98129 2.76959 3.87552 2.76959 4.98132 7.79074 4.98129 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TDABAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7D61B49D3C2C55B286BB7611547356F88D2748EE94686CFF7
DB559D31FC9FF071D4427CD1BE2C0E0154218F9B78D7DF9660DF25B6417BB6F9
F75BE0C95B4CBE8A0ADD0EF176DA908C8A6AAD739CC99FA33EF7F99A2A03213B
C117D582256B8F7B61A53F49F1649834B93E189E2FF00920DC197ABC503F0465
1DBD65AF220AEBDF91D683045EABE5E48703024D70629FF86262AEF629A8290D
AB0FA7171C89CB4B4541502BABA5B917742283F08909BAE0150CBE3362CCB8C1
E37DBFD80043B2D3C627189CF060AF2A1FEBD818E46E95> |-
/u <1C60D8A8C9B7FF2B5E691B594ED192F8DAF34DFDE1D2AAEDCD429841AF03
FDEA037486B5217B1B05A5EA4ABDFB35DFC78D2367DC40D1F110D583E8EBBA49
C004ACD629A48271FCE64CD04E93EA587D6991CFE1813773F316554FB187F1A2
7AAE160963B619280C2DE705C3EE513DCAC3176102E1BB76490EDF13E368D3E2
693EB823E673110833B73C97BAC15E18A7F2AA5836D9B258FB3639BFC56A0204
B2679716898C8E599CB663ECF34E857BCBAFDCF77253C3818BB386D1F1C2BC8D
3C0C6EC202486664411D1ABA0B85E128> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXA+CMMI10 /Encoding get
dup 83 /S put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXA+CMMI10*1 
[58{/.notdef}rp /period /comma 8{/.notdef}rp /D 2{/.notdef}rp /G 11{/.notdef}rp 
/S 2{/.notdef}rp /V 10{/.notdef}rp /a /b /.notdef /d 
2{/.notdef}rp /g 3{/.notdef}rp /k /.notdef /m 2{/.notdef}rp /p 
4{/.notdef}rp /u 2{/.notdef}rp /x /y /z 133{/.notdef}rp]
KQVZXA+CMMI10 nf
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
402.046 488.823 mo
(Supp)
[6.68695 5.70352 5.01218 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
424.457 488.823 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
428.331 488.823 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
433.344 490.317 mo
(data)
[3.48691 3.09637 1.93869 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
445.46 488.823 mo
(\))sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXB+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/union <1C60D8A8C9B64FAD38E2718FC0FC4884BBDFD52A17668B0B34233FF4
751C0A51D905854AF0CF2E48C9A9230A54E46D66F50104F02FAED30FD29483AC
36E1BC0453A7BEF6E6FC809106D1132F65B857AB4C960E0F98BBFAE0D1CB6B0D
E2A236> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXB+CMSY10 /Encoding get
dup 91 /union put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXB+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 40{/.notdef}rp 
/union 10{/.notdef}rp /braceleft /braceright 6{/.notdef}rp /backslash 3{/.notdef}rp /nabla 
141{/.notdef}rp]
KQVZXB+CMSY10 nf
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
452.197 488.823 mo
([)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
461.702 488.823 mo
(Supp)
[6.68695 5.70352 5.01218 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
484.113 488.823 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
487.987 488.823 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
493 490.317 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
497.635 488.823 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
501.509 488.823 mo
(,)sh
108 500.879 mo
(concludingtheproof.)
[4.42339 4.9813 4.9813 4.4234 2.7696 4.98131 4.98129 2.76959 4.98131 7.47195 2.76959 4.98131 
6.91405 4.98129 3.31747 4.98131 4.98129 3.31747 0 ]xsh
496.937 500.879 mo
496.937 494.154 li
@
497.137 494.354 mo
503.115 494.354 li
@
497.137 500.68 mo
503.115 500.68 li
@
503.314 500.879 mo
503.314 494.154 li
@
true set_gvm
%ADOBeginSubsetFont: VFJBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZWX+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC549024A66BCA9F4353026BD17B6210A66FD5D4176
116945A2F6BAB903CF6DE4F4D3C8542E96270F5E403BDB0773406DE9484D2E0E
A2DBD71107DE79DF70216D3BFEAA2172D8D68DEE8378CE1279ABF171> |-
/four <1C60D8A8C9B7A73DC54C6E607A6FCD37FCCF09F620AB8801B1F0077EA
3F37AB8BF3C03672891DED2FC99FFD9BAEE71DC6FF4E84D49BFD23A40AAA079B
4A5E5C982CD38A9CA8B7D76353673683E32A19F787E51F0426691> |-
/E <1C60D8A8C9B7D8BE6A6FAF13E57A5D0C2C66821CCEEF24B4E4419847787E
D4C8A98BBE3EBCCE15D1DC333F323E4C7D43FF48D1C1F11091632F6F11174D4D
B924B1BBA6DF69EF4ADB27C45D6BAFF8FAE037CF2DD63F0C99022D146FEDA01C
CFEE96DE599AE8069A8E5F6B8E0F74979F0CC193D875C6765F26CD248D1D0923
817F3CBDA21B14A62B3E828ED4997E1F5E3EED19C373DD0855950863084BA232
08116185FD3DCF> |-
/N <1C60D8A8C9B6079F150BE669E05A86555759DA107B43AB61905A62645A66
3DE63B767402DC6894A5DFEDB84E4BDD1D351CED404CF8174231DE9B67002319
4AC38274F20C1FD6D4B8DAC4F0C8BAF545ED28910A7DBCC99ACA30CFE6FD8C85
EEB2F3221A60E51AFB01492A579996C127A28D4FA98C92096380068298F29040
ACE78F68E55A11F391A0536D2E67FD1C08CF11> |-
/j <1C60D8A8C9B854D0F8036B9E41B2E65A80996E2E907110434A0413DE6F0F
A1CED7D44101D2CB80C53365B7D9FCFEF3C557C392B7A8BD9A59049D2FAAF659
0B303228E435BBBFF7AB6415134822B91A84512D7F51F017E320BF297D96E6DA
013E3EF49D9FE337AA59725CBCFD287E12AC43B2BA5588F15DB53EA3E4AD5969
92DAFBC9104E3366F1848F482EBDAB72B852260AA183> |-
/k <1C60D8A8C9B7A73DC549024AEE55A0365CA53932E5214D92E03447BD2708
2733F8BC4B52390213A989FF43E960E136400BFBE15D14D9BA4C2D61B09B4F05
0FBF7DCACD230C4E8767F21A80F637BF5694F2161773ADC9B25B69CFE9C32887
671F39202B1661FF55FACF361DF983E96161F84FF87D28B0AC0FA43709B6CB55
E1E44E07E3A733E7B5F64E7A67A496C0C4D5E21D4A198AB4487F8ABDBAE25A8E
986F6B42BE1053CBBD4E723DD568DBDCFB> |-
/w <1C60D8A8C9B6079FE827C15FB749C5E2D59AF07BCDCB23600A9E54DC7F64
C7E827C38E4CA3EDC141AC5EDC06F362661B84CB18900C724B81D9620EF76D18
0ED63FA9D5A5F924854335916B03AA4F91AFA0C7C0C6CB02E2839A0511DD63E5
74762EF80F517D5F038A6BF8C6AA8B2D183A3AB23FCFA16E562D70F6716B39E9
98C527890272681E7128A4D20258D13EE2F2B8FA152F655FEBAEDC8C60259050
DBA81825B0CDCAC66195D9F1022749> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZWX+NimbusRomNo9L-Regu /Encoding get
dup 49 /one put
dup 52 /four put
dup 69 /E put
dup 78 /N put
dup 106 /j put
dup 107 /k put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZWX+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp 
/one /two /three /four 5{/.notdef}rp /colon 9{/.notdef}rp /D 
/E /F 6{/.notdef}rp /M /N 4{/.notdef}rp /S /T 
/U /.notdef /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /k /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y /z 51{/.notdef}rp /fi 
81{/.notdef}rp]
KQVZWX+NimbusRomNo9L-Regu nf
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 526.842 mo
(Notethatthetrainingobjectivefor)
[7.193 4.9813 2.7696 7.64132 2.76959 4.98131 4.4234 5.97755 2.76961 4.98129 7.64131 2.76961 
3.31747 4.4234 2.76959 4.98129 2.76961 4.98131 8.18925 4.98131 4.98129 2.76961 4.42339 4.4234 
2.76961 2.52054 4.83186 7.64131 3.31747 4.98129 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TDABAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B63FB7C309BB51A0AA38866971342058637E4EA8CE5B53AB6E
EDDFC0DD4BDF4349D1CCBEC7FC3B8F8C4BC56F4AACD598A0CB5CDB1A49842906
ED33DE2381C847D7D561B34860359680485FF707969037C9A22F4277055DB265
4232064AD12BBF45F796A3AB236EB6B871446058974A4373294390B85B91CDA4
CC8A3CAF6468783E7EEB7DC337BF0B494BB06171CC8D9EE695CD15> |-
/P <1C60D8A8C9B677ECB1F5884EF202194D27AFDA20C9C5AF9717AEDDA8FACC
FA5CE5F06E7E735F3308B4CA613864C8BB9E998C2D16EBC620C6B43596E1DD40
839888CA51D52E708072E18AA08B28E3CB1E6EF21FAD99F857CC70EE52D6669F
D4FEF6D378C3644D9B3C83FB9CAAC301898C0568C7EDDC149173AA0D66326455
24A8E317AEDEA6E137E747B687221C612ED78EEB9D5BC26FBD4832935A8A744A
79B07DF310B6BFAA137B534BCCDB0286BC5B1A9F8DB00E7C57> |-
/Y <1C60D8A8C9B7F7BFE9965B72C66223E0BD38C03944ABD0691FB86EAFA855
7AB043297AE991C9291464747BAAFC167E0D0BE820F5019CD2081463ABAA6E1A
BFF07F99EE02FF2837012AF6E74C6FB0AF539193FF1B386E7F19C02B7DFC56F7
5AE913848D4CAB5DC8040F1BEDDB51959987004B2EAFB6E61CBE9A985EE23D0C
13B1A538C53D2FB8E6FAEEEEE906589CCA967F68E1E703C2F12E6A708FC80902
A3ED8C5BCA23DBBFB130A60C5EEE61FEB629DC15C94845865A5AAA503E7CD5A4
3427576067F71A849538C0E2C2C24EEBA5FA650157A3882ECB011C19DAEB6CBA
2B5D9F4DC3791732B6F0AB9BFD87BA956ADD5FAE000EE312EEACECCEED4A318F
57BB54CCA5F849E9A70C25733BAC791646D5FE1FCEE9F3A08B14BAAFFFBE45F3
31C84F28ADCB9642D49D773931538BEE1E7EC10A6509037E4F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXA+CMMI10 /Encoding get
dup 67 /C put
dup 80 /P put
dup 89 /Y put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXA+CMMI10*1 
[58{/.notdef}rp /period /comma 7{/.notdef}rp /C /D 2{/.notdef}rp /G 
8{/.notdef}rp /P 2{/.notdef}rp /S 2{/.notdef}rp /V 2{/.notdef}rp /Y 
7{/.notdef}rp /a /b /.notdef /d 2{/.notdef}rp /g 3{/.notdef}rp 
/k /.notdef /m 2{/.notdef}rp /p 4{/.notdef}rp /u 2{/.notdef}rp 
/x /y /z 133{/.notdef}rp]
KQVZXA+CMMI10 nf
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
252.499 526.842 mo
(D)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.238 526.842 mo
(canbeinterpretedasmaximizingthelog-likelihoodfores-)
[4.4234 4.4234 8.19922 4.98129 7.63135 2.76959 4.98132 2.76959 4.4234 3.31747 4.98129 3.31747 
4.4234 2.76959 4.4234 8.19922 4.4234 7.0835 7.75089 4.4234 4.98132 2.76959 7.75089 2.76962 
4.4234 2.76959 4.98129 8.19922 2.76962 4.98126 7.63138 2.76959 4.98129 4.98132 3.31744 2.76962 
2.76959 4.88168 4.4234 2.76959 2.76959 4.98132 4.98126 4.98132 8.19922 3.31747 4.98129 6.52545 
4.4234 3.87549 0 ]xsh
108 537.801 mo
(timatingtheconditionalprobability)
[2.7696 2.7696 7.75091 4.42339 2.76961 2.76959 4.98131 8.08963 2.76959 4.98131 7.54169 4.4234 
4.98129 4.98131 4.98129 2.76961 2.76961 2.76959 4.98129 4.98131 4.42339 5.87794 4.98131 3.31747 
4.98129 4.98129 4.4234 4.98129 2.76961 2.76961 2.76959 2.76961 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.399 537.801 mo
(P)sh
true set_gvm
%ADOBeginSubsetFont: EEKAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXF+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DCB03313BCF7AD8C8EE234E5372D46A65E92A78F4B7E0
2ECC58F71EE6C027AD4D56C5E4DE1AF1031295DC17C0E7AC8D8358634F9A19B0
2A110E5539C10136C68E0D2CBEA6658A501D9D73323861F8C29EB92F9080ACC3
E236C5F14389534682EC2925F59CD4A215569A7BD7B9F7827A30BA75EB840535
B2A2C8F92AD166CE93D277314A4C690C47DB847F73BFE1049631CDDB9124FD76
2753AA8DB187C216ED3005CA929015114EA53826E55872B63FD1FA60DB9883C7
27F137C754792AB823A705DD0DF28293037E1DA5DE4936C6573A1718CA671378
3EC51D8DA977> |-
/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A0865738F60F138
94266612CF652F44C217A476812BE532AC6358E0DAFFB0D5E5117642F5BA2923
BEDB1C7E5DCDCA6F9C7FD13A241FE9CAACF60BAB1EA0492936F6C6CF04C43B9A
FAC5B2026A794CD9C7836D055F7A78383659A460B574C21AA89D092E6B58E9A3
1CB4E83AFE695EB2A4193C039EA5F618CAF7745B1FDA9ADBC0C4AFF43C821C25
38E4D3E0311619B8D0096703429D61227134D3D4F10264801F2AA4B0A71E8991
4A580FDC8088D541BDE06B262C3D90AF19EF55DBE228CA71D5828F50534BACCE
F423C267E1995B8408ADC61022455B144160D98EB158310C4459DDC5A63157F9
82CF307D29294A260DA3997052E3598EEBA826650D8D48FE852C19EC9306D477
60211C4650B51CCF133ADCA8B28F2087D2999D418C5739327F2B40FD7891074F
BE2A054E78BE9D42> |-
/x <1C60D8A8C9B78C669F28CFA812DED67DCEB62F17AD12F7D7900E6AD3161B
3BB6A9E88D307B5F8CC0D753B8AC565B099CC0ACAA4A7CA31F2811E297F44D0D
EB72F7C315759FD2E63382EDE3061A24E5309BEE98D8290B6BC9B628BEBD7F7D
73F1B5EA640583D87E4AD24CB7F7908FD9A3DC9303785637F3B203908DF84330
922688D7A03D094D4EF700DA6BD8427088868109E238A57C22F5759A9FC99E5C
3C3F2D6B15D44C534041C741DF56BEDC796180345856EA6BBC1BD98F587E9295
32F631C96BE91F404EF68AE1203A5AD95C9FFBED9A1E5A7A1275795AE7884699
0825436FB611A109B66853254DCAC13E4C6298C531E7AEB98A1184600057B10A
9DAB09484AF36A38858BAF4BD8E53752011A5652B9FACEB6B61F17736A8E4776
835DFBDE552410043F2D535B01DBC3DAA1EA0A782CE3B35114AE12> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXF+CMR10 /Encoding get
dup 97 /a put
dup 109 /m put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXF+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp /zero /one 
11{/.notdef}rp /equal 29{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
5{/.notdef}rp /g 4{/.notdef}rp /l /m /.notdef /o 8{/.notdef}rp 
/x 135{/.notdef}rp]
KQVZXF+CMR10 nf
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
262.179 537.801 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
266.053 537.801 mo
(Y)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
277.971 537.801 mo
(=)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
289.64 537.801 mo
(y)sh
true set_gvm
%ADOBeginSubsetFont: KXGAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXB+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bar <1C60D8A8C9B857441457E710B30AAAC225216DDD3F0F67D37AB5F17441
25AC44330DB61243F0DBA44459146B24E9B3E94009> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXB+CMSY10 /Encoding get
dup 106 /bar put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXB+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 40{/.notdef}rp 
/union 10{/.notdef}rp /braceleft /braceright 2{/.notdef}rp /bar 3{/.notdef}rp /backslash 
3{/.notdef}rp /nabla 141{/.notdef}rp]
KQVZXB+CMSY10 nf
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
294.882 537.801 mo
(j)sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
297.649 537.801 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
304.215 537.801 mo
(\))sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
308.089 537.801 mo
(,where)
[5.75839 7.19299 4.98129 4.4234 3.31747 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
341.301 537.801 mo
(Y)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
352.412 537.801 mo
(indicateswhether)
[2.76959 4.98132 4.98129 2.76959 4.4234 4.4234 2.76959 4.4234 6.98386 7.19299 4.98129 4.4234 
2.76962 4.98129 4.4234 0 ]xsh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
426.144 537.801 mo
(x)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
435.823 537.801 mo
(comesfrom)
[4.4234 4.98129 7.75092 4.42337 6.98389 3.31744 3.31747 4.98132 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
486.871 537.801 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
491.884 539.296 mo
(data)
[3.48691 3.09637 1.93869 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
108 548.76 mo
(\(with)
[3.31747 7.19299 2.76961 2.7696 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
131.521 548.76 mo
(y)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
139.531 548.76 mo
(=1)
[10.5185 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.028 548.76 mo
(\)orfrom)
[5.80812 4.98131 5.80812 3.31746 3.31747 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
193.484 548.76 mo
(p)sh
true set_gvm
%ADOBeginSubsetFont: RUPBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXE+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B5A8C73EDD94BC44D4E0BE1F0F514467C60AFD020EE9E3FB49
C54E5F23DC02B9A0C967419D8ACD0EE89AF36AFF2CC9E67AE4A302DEB2BA4C3B
70CBB69D841FEA2A274D1631A7E0CEE0E71FAE38661AFDB1FAF02EDEAA929ADA
D8680B6B427CBC7A99B53BB570C16F1857E0352FD6D5D795CA07C1AD65FCA669
87A37684F1025CBE0365397C8B3CDA1522D8BBBF9023B3> |-
/p <1C60D8A8C9B7CF7CC0110C5B2BBB893738FB1B2A870C74A5B6D9E5F8D92C
0DA056906EED924D081612EC7538CD1EFB4EFF84E8BC93244FA3E1B1AA88489C
8FBEF8299EA8716E5C1673B3401166ADE7F26AE1AAD400A5B35D592DD488A38E
4AD2A33AD2B964FE51C082176C4A85B12453BE8A1C7392E9C26B6C909B909E55
719FB24DF370C587EBAD7D0C1C1D55D0E2B53D38D8AF92113A7ADD29B31E86B3
2283E22255453F8EB4B9E6054F67FD56219A9F5ACB00F69EF21FE824A56E9F3F
B233A636E8D3D75AECD689DC8C0FC366785DF0A7E9BD7834652F11836760449F
644FD75F42F3CED641176B37B3847A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXE+CMMI7 /Encoding get
dup 68 /D put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXE+CMMI7*1 
[18{/.notdef}rp /theta 49{/.notdef}rp /D 2{/.notdef}rp /G 25{/.notdef}rp /a 
/b 4{/.notdef}rp /g /.notdef /i 3{/.notdef}rp /m 2{/.notdef}rp 
/p 9{/.notdef}rp /z 133{/.notdef}rp]
KQVZXE+CMMI7 nf
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
198.496 550.255 mo
(g)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
205.622 548.76 mo
(\(with)
[3.31747 7.19299 2.76961 2.76959 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
229.143 548.76 mo
(y)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
237.153 548.76 mo
(=0)
[10.5185 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
252.65 548.76 mo
(\).TheminimaxgameinEq.1cannowbereformulatedas:)
[3.31747 5.57904 6.0871 4.98129 6.91403 7.75092 2.76959 4.98129 2.76962 7.75089 4.4234 7.47195 
4.93149 4.4234 7.75092 6.91403 2.76959 7.47195 6.08707 4.98129 4.98132 7.47192 4.4234 4.4234 
7.47195 4.98129 4.73224 9.68365 4.98132 6.91403 3.31747 4.4234 3.31744 4.98132 3.31744 7.75092 
4.98132 2.76959 4.4234 2.76959 4.4234 7.47192 4.4234 3.87555 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
156.478 584.261 mo
(C)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
164.312 584.261 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
168.186 584.261 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
176.019 584.261 mo
(\)=max)
[6.64406 9.40273 8.30182 4.98129 0 ]xsh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
197.976 590.687 mo
(D)sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
212.272 584.261 mo
(V)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
220.297 584.261 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
224.172 584.261 mo
(G;D)
[7.8336 4.43138 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.958 584.261 mo
(\))sh
182.661 603.34 mo
(=)sh
true set_gvm
%ADOBeginSubsetFont: PATAAA+MSBM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXL+MSBM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B64FADC67CD6F922FEE3640D25B42FCA3A021742130DE8E5A7
593959B4B095EB55569A4E340D1AC23624BEAD5FA5580CE37D00F8AA4EEA9762
AA632209A9207CC2E5BB4067C484F5901A72A029F4AA14ED0EAA5D953C4760B1
ADD6F8521830072B2C8FE3A721FC93D22BC5258E198225D307825269C6F5CF46
9728A5E2D6686A719CB0C1FCCFF3AAD40C5E57CFB41DAC767908174BAC76253C
8E5482CC19FFF1619717A1CCA161E94A963151AB2CD8A2A21D3D721FF2C392C8
847903E815C5A3263BCB57BBE421326F2BDDEACA2E6AF54B5167BAD9BCBC74CE
B207BF1A4272F2BCC5C1690FE34F72F447383330A3508D55D2D281FDB7695AE9
0ABBDA3D0A8E4CA4A85258619589955E0ECAC49B6BA66B2577478B1C0FAA744D
D67A89298A5390BC44CCFBDD9431CC23FFF5B9CEDEC94938> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXL+MSBM10 /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXL+MSBM10*1 
[69{/.notdef}rp /E 12{/.notdef}rp /R 173{/.notdef}rp]
KQVZXL+MSBM10 nf
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
190.41 603.34 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
197.051 604.834 mo
(x)sh
true set_gvm
%ADOBeginSubsetFont: XLWBAA+CMSY7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXJ+CMSY7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/similar <1C60D8A8C9B5822B08C4D09C04F6C08D3906B5048CC216FE45FF80
E118D6EE1E0FEE08E17C114FC012EEE5175071E48784CE7668F3354C3515C720
5B24C755D65757ACA6FF5C1D945914F9A24A79315589A8A7F964E147D01B39EB
AA9F24B1459BBBA01D7825916B844A6B7414B0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXJ+CMSY7 /Encoding get
dup 24 /similar put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXJ+CMSY7*1 
[3{/.notdef}rp /asteriskmath 20{/.notdef}rp /similar 231{/.notdef}rp]
KQVZXJ+CMSY7 nf
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
202.194 604.834 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
208.42 604.834 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [4.9813 0 0 -4.9813 0 0 ]msf
212.527 605.83 mo
(data)
[2.49065 2.2117 1.3848 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
221.822 603.34 mo
([log)
[2.76762 2.76762 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.119 603.34 mo
(D)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
247.644 599.226 mo
(\003)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
247.367 605.802 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.068 603.34 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
257.942 603.34 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.508 603.34 mo
(\)]+)
[3.87445 4.97934 0 ]xsh
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
283.326 603.34 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
289.968 604.834 mo
(z)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
294.654 604.834 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
300.881 604.834 mo
(p)sh
true set_gvm
%ADOBeginSubsetFont: NXMAAA+CMMIB5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NXMAAA+CMMIB5 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMIB5.) def
/Weight (Bold) def
/ItalicAngle -14.035 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /z put
def
/UniqueID 5087387 def
/FontBBox {14 -250 1537 751} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 444 454 686 705] def
/OtherBlues [-204 -194] def
/BlueScale 0.04796 def
/StdHW [83] def
/StdVW [83] def
/StemSnapH [83 123] def
/StemSnapV [83 123] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/z <1C60D8A8C9B6E9C36CFE1AE934E1ABE6F116F291B4F1935D5A73DF2FF30D
0279BEDAFC1E260036D0665B6F5258F0AF901F2B6EC7071871B1313797FC1145
719A97FBC23DE7617AE1BDD05182E391DC27E2A94E0FADB9D24DE84A207F16E6
2DD4385FA3CFF4135254876A253664BDAFEF5A15E8CF2D22E0BCAC44B0798C67
35A81F531FD9FFCB2D2946EE65CAAF1EA6A11B303B57C2645C9E0BB79BFDE3F0
7876CE3489EB3FB261C8C696CD9ECCBA07242E7E605048082CFD8734460DC544
9FE44C86AA7F0B278815D5651825AEB1E323184927DDFF> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/KQVZXM+CMMIB5 /NXMAAA+CMMIB5 findfont ct_VMDictPut
/KQVZXM+CMMIB5*1 
[122{/.notdef}rp /z 133{/.notdef}rp]
KQVZXM+CMMIB5 nf
KQVZXM+CMMIB5*1 [4.9813 0 0 -4.9813 0 0 ]msf
304.988 605.83 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
309.921 603.34 mo
([log\(1)
[2.76764 2.76761 4.98129 5.12079 3.87445 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
336.626 603.34 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
346.589 603.34 mo
(D)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
355.114 599.226 mo
(\003)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
354.837 605.802 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
361.538 603.34 mo
(\()sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
365.412 603.34 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
373.245 603.34 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
377.12 603.34 mo
(z)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
383.07 603.34 mo
(\)\)\)])
[3.87445 3.87448 3.87445 0 ]xsh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
492.384 603.34 mo
(\(4\))
[3.31747 4.98129 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.661 617.287 mo
(=)sh
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
190.41 617.287 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
197.051 618.782 mo
(x)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
202.194 618.782 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
208.42 618.782 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [4.9813 0 0 -4.9813 0 0 ]msf
212.527 619.778 mo
(data)
[2.49065 2.2117 1.3848 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
221.822 617.287 mo
([log)
[2.76762 2.76762 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.119 617.287 mo
(D)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
247.644 613.174 mo
(\003)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
247.367 619.75 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.068 617.287 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
257.942 617.287 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.508 617.287 mo
(\)]+)
[3.87445 4.97934 0 ]xsh
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
283.326 617.287 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
289.968 618.782 mo
(x)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
295.11 618.782 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
301.337 618.782 mo
(p)sh
KQVZXG+CMMI5*1 [4.9813 0 0 -4.9813 0 0 ]msf
305.444 619.778 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
310.109 617.287 mo
([log\(1)
[2.76764 2.76761 4.98129 5.12079 3.87445 0 ]xsh
KQVZXB+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
336.814 617.287 mo
( )sh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
346.777 617.287 mo
(D)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
355.302 613.174 mo
(\003)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
355.025 619.75 mo
(G)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
361.726 617.287 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
365.6 617.287 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
372.166 617.287 mo
(\)\)])
[3.87445 3.87448 0 ]xsh
182.661 639.177 mo
(=)sh
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
190.41 639.177 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
197.051 640.672 mo
(x)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
202.194 640.672 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
208.421 640.672 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [4.9813 0 0 -4.9813 0 0 ]msf
212.527 641.668 mo
(data)
[2.49065 2.2117 1.3848 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXOBAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXH+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleftbigg <1C60D8A8C9B78C66EB34ADDE18F137ED09CE1E2CAB9987
C07A6D0860B2237C0B0050692D3F237F6891A4A410E6AD4A2E9EF898B18FE2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXH+CMEX10 /Encoding get
dup 20 /bracketleftbigg put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXH+CMEX10*1 
[16{/.notdef}rp /parenleftBig /parenrightBig 2{/.notdef}rp /bracketleftbigg 67{/.notdef}rp /summationdisplay /.notdef 
/integraldisplay 13{/.notdef}rp /bracketleftBig /bracketrightBig 150{/.notdef}rp]
KQVZXH+CMEX10 nf
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
223.483 625.13 mo
(\024)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
228.741 639.177 mo
(log)
[2.76762 4.98131 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
263.226 632.438 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
268.239 633.932 mo
(data)
[3.48691 3.09637 1.93869 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
280.355 632.438 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
284.23 632.438 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.795 632.438 mo
(\))sh
244.465 636.687 mo
313.43 636.687 li
@
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.465 646.011 mo
(P)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
250.861 647.506 mo
(data)
[3.48689 3.09639 1.93869 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
262.978 646.011 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
266.852 646.011 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
273.418 646.011 mo
(\)+)
[6.08615 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
289.469 646.011 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
294.481 647.506 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
299.116 646.011 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
302.991 646.011 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
309.556 646.011 mo
(\))sh
true set_gvm
%ADOBeginSubsetFont: GXOBAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
KQVZXH+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketrightbigg <1C60D8A8C9B78C66EB34ADDE18F137ED09CE1ED065105
428C28A9B742C9A6CC0E71B446E8AB8C161C9FC7190C7771C77EFA30E83D300> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQVZXH+CMEX10 /Encoding get
dup 21 /bracketrightbigg put
pop
%ADOEndSubsetFont
reset_gvm
/KQVZXH+CMEX10*1 
[16{/.notdef}rp /parenleftBig /parenrightBig 2{/.notdef}rp /bracketleftbigg /bracketrightbigg 66{/.notdef}rp /summationdisplay 
/.notdef /integraldisplay 13{/.notdef}rp /bracketleftBig /bracketrightBig 150{/.notdef}rp]
KQVZXH+CMEX10 nf
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
314.626 625.13 mo
(\025)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
322.098 639.177 mo
(+)sh
KQVZXL+MSBM10*1 [9.9626 0 0 -9.9626 0 0 ]msf
332.061 639.177 mo
(E)sh
KQVZXK+CMMIB7*1 [6.9738 0 0 -6.9738 0 0 ]msf
338.702 640.672 mo
(x)sh
KQVZXJ+CMSY7*1 [6.9738 0 0 -6.9738 0 0 ]msf
343.845 640.672 mo
(\030)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
350.072 640.672 mo
(p)sh
KQVZXG+CMMI5*1 [4.9813 0 0 -4.9813 0 0 ]msf
354.179 641.668 mo
(g)sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
360.504 625.13 mo
(\024)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
365.762 639.177 mo
(log)
[2.76764 4.98129 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
403.296 632.438 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
408.309 633.932 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
412.944 632.438 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
416.818 632.438 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
423.384 632.438 mo
(\))sh
381.486 636.687 mo
449.068 636.687 li
@
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
381.486 646.011 mo
(p)sh
KQVZWX+NimbusRomNo9L-Regu*1 [6.9738 0 0 -6.9738 0 0 ]msf
386.499 647.506 mo
(data)
[3.48691 3.09637 1.93869 0 ]xsh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
398.615 646.011 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
402.489 646.011 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
409.055 646.011 mo
(\)+)
[6.08615 0 ]xsh
KQVZXA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
425.106 646.011 mo
(p)sh
KQVZXE+CMMI7*1 [6.9738 0 0 -6.9738 0 0 ]msf
430.118 647.506 mo
(g)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
434.753 646.011 mo
(\()sh
KQVZXC+CMMIB10*1 [9.9626 0 0 -9.9626 0 0 ]msf
438.628 646.011 mo
(x)sh
KQVZXF+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
445.193 646.011 mo
(\))sh
KQVZXH+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf
450.263 625.13 mo
(\025)sh
KQVZWX+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
303.509 678.75 mo
(4)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
